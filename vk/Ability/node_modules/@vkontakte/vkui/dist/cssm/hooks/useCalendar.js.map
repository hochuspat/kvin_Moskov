{"version":3,"sources":["../../../src/hooks/useCalendar.ts"],"sourcesContent":["import * as React from 'react';\nimport { CalendarProps } from '../components/Calendar/Calendar';\nimport {\n  addMonths,\n  endOfDay,\n  isAfter,\n  isBefore,\n  isSameDay,\n  startOfDay,\n  subMonths,\n} from '../lib/date';\n\nexport interface UseCalendarDependencies\n  extends Pick<CalendarProps, 'onHeaderChange' | 'onNextMonth' | 'onPrevMonth'> {\n  value?: Array<Date | null> | Date;\n  disablePast?: boolean;\n  disableFuture?: boolean;\n  shouldDisableDate?(value: Date): boolean;\n}\n\nexport function useCalendar({\n  value,\n  disablePast,\n  disableFuture,\n  shouldDisableDate,\n  onHeaderChange,\n  onNextMonth,\n  onPrevMonth,\n}: UseCalendarDependencies) {\n  const [viewDate, setViewDate] = React.useState(\n    (Array.isArray(value) ? value[0] : value) ?? new Date(),\n  );\n  const [focusedDay, setFocusedDay] = React.useState<Date>();\n\n  const setPrevMonth = React.useCallback(() => {\n    onPrevMonth?.();\n    setViewDate(subMonths(viewDate, 1));\n  }, [viewDate, onPrevMonth]);\n  const setNextMonth = React.useCallback(() => {\n    onNextMonth?.();\n    setViewDate(addMonths(viewDate, 1));\n  }, [viewDate, onNextMonth]);\n\n  const handleSetViewDate = React.useCallback(\n    (value: Date) => {\n      onHeaderChange?.(value);\n      setViewDate(value);\n    },\n    [onHeaderChange],\n  );\n\n  const isDayFocused = React.useCallback(\n    (day: Date) => Boolean(focusedDay && isSameDay(day, focusedDay)),\n    [focusedDay],\n  );\n\n  const isDayDisabled = React.useCallback(\n    (day: Date) => {\n      const now = new Date();\n      let disabled = false;\n      if (disablePast) {\n        disabled = isBefore(endOfDay(day), now);\n      }\n      if (disableFuture) {\n        disabled = isAfter(startOfDay(day), now);\n      }\n      if (shouldDisableDate) {\n        disabled = shouldDisableDate(day);\n      }\n\n      return disabled;\n    },\n    [disableFuture, disablePast, shouldDisableDate],\n  );\n\n  const resetSelectedDay = React.useCallback(() => {\n    setFocusedDay(undefined);\n  }, [setFocusedDay]);\n\n  return {\n    viewDate,\n    setViewDate: handleSetViewDate,\n    setPrevMonth,\n    setNextMonth,\n    focusedDay,\n    setFocusedDay,\n    isDayFocused,\n    isDayDisabled,\n    resetSelectedDay,\n  };\n}\n"],"names":["React","addMonths","endOfDay","isAfter","isBefore","isSameDay","startOfDay","subMonths","useCalendar","value","disablePast","disableFuture","shouldDisableDate","onHeaderChange","onNextMonth","onPrevMonth","viewDate","setViewDate","useState","Array","isArray","Date","focusedDay","setFocusedDay","setPrevMonth","useCallback","setNextMonth","handleSetViewDate","isDayFocused","day","Boolean","isDayDisabled","now","disabled","resetSelectedDay","undefined"],"mappings":"AAAA,YAAYA,WAAW,QAAQ;AAE/B,SACEC,SAAS,EACTC,QAAQ,EACRC,OAAO,EACPC,QAAQ,EACRC,SAAS,EACTC,UAAU,EACVC,SAAS,QACJ,cAAc;AAUrB,OAAO,SAASC,YAAY,EAC1BC,KAAK,EACLC,WAAW,EACXC,aAAa,EACbC,iBAAiB,EACjBC,cAAc,EACdC,WAAW,EACXC,WAAW,EACa;IACxB,MAAM,CAACC,UAAUC,YAAY,GAAGjB,MAAMkB,QAAQ,CAC5C,AAACC,CAAAA,MAAMC,OAAO,CAACX,SAASA,KAAK,CAAC,EAAE,GAAGA,KAAI,KAAM,IAAIY;IAEnD,MAAM,CAACC,YAAYC,cAAc,GAAGvB,MAAMkB,QAAQ;IAElD,MAAMM,eAAexB,MAAMyB,WAAW,CAAC;QACrCV;QACAE,YAAYV,UAAUS,UAAU;IAClC,GAAG;QAACA;QAAUD;KAAY;IAC1B,MAAMW,eAAe1B,MAAMyB,WAAW,CAAC;QACrCX;QACAG,YAAYhB,UAAUe,UAAU;IAClC,GAAG;QAACA;QAAUF;KAAY;IAE1B,MAAMa,oBAAoB3B,MAAMyB,WAAW,CACzC,CAAChB;QACCI,iBAAiBJ;QACjBQ,YAAYR;IACd,GACA;QAACI;KAAe;IAGlB,MAAMe,eAAe5B,MAAMyB,WAAW,CACpC,CAACI,MAAcC,QAAQR,cAAcjB,UAAUwB,KAAKP,cACpD;QAACA;KAAW;IAGd,MAAMS,gBAAgB/B,MAAMyB,WAAW,CACrC,CAACI;QACC,MAAMG,MAAM,IAAIX;QAChB,IAAIY,WAAW;QACf,IAAIvB,aAAa;YACfuB,WAAW7B,SAASF,SAAS2B,MAAMG;QACrC;QACA,IAAIrB,eAAe;YACjBsB,WAAW9B,QAAQG,WAAWuB,MAAMG;QACtC;QACA,IAAIpB,mBAAmB;YACrBqB,WAAWrB,kBAAkBiB;QAC/B;QAEA,OAAOI;IACT,GACA;QAACtB;QAAeD;QAAaE;KAAkB;IAGjD,MAAMsB,mBAAmBlC,MAAMyB,WAAW,CAAC;QACzCF,cAAcY;IAChB,GAAG;QAACZ;KAAc;IAElB,OAAO;QACLP;QACAC,aAAaU;QACbH;QACAE;QACAJ;QACAC;QACAK;QACAG;QACAG;IACF;AACF"}