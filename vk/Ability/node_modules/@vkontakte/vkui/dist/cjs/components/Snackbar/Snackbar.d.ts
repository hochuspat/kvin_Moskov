import * as React from 'react';
import { HTMLAttributesWithRootRef } from '../../types';
export interface SnackbarProps extends HTMLAttributesWithRootRef<HTMLElement> {
    /**
     * Название кнопки действия в уведомлении
     * Не может использоваться одновременно с `subtitle`
     */
    action?: React.ReactNode;
    /**
     * Будет вызвано при клике на кнопку действия
     */
    onActionClick?: (e: React.MouseEvent) => void;
    /**
     * Может быть следующими компонентами:
     *  - цветная иконка 24x24 или 28x28 пикселя
     *  - `<Avatar size={32} />`
     *  - `<Image size={40} />`
     */
    before?: React.ReactNode;
    /**
     * Контент в правой части, может быть иконкой 24x24
     */
    after?: React.ReactNode;
    /**
     * Варианты расположения кнопки действия
     * Игнорируется на десктопах и при наличии элементов `after` или `subtitle`
     */
    layout?: 'vertical' | 'horizontal';
    /**
     * Время в миллисекундах, через которое плашка скроется
     */
    duration?: number;
    /**
     * Обработчик закрытия уведомления
     */
    onClose: () => void;
    /**
     * Задает стиль снекбара
     */
    mode?: 'default' | 'dark';
    /**
     * Дополнительная строка текста под `children`.
     * Не может использоваться одновременно с `action`
     */
    subtitle?: React.ReactNode;
    /**
     * Величина отступа снизу. Используется для позиционирования элемента в случае, когда нежелательно, чтобы Snackbar при появлении перекрывал важные элементы интерфейса.
     */
    offsetY?: React.CSSProperties['bottom'];
}
/**
 * @see https://vkcom.github.io/VKUI/#/Snackbar
 */
export declare const Snackbar: ({ children, layout: layoutProps, action, before, after, duration, onActionClick, onClose, mode, subtitle, offsetY, style, ...restProps }: SnackbarProps) => React.JSX.Element;
//# sourceMappingURL=Snackbar.d.ts.map