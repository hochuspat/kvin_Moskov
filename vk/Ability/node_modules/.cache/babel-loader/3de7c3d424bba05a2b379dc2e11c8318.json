{"ast":null,"code":"import { _ as _define_property } from \"@swc/helpers/_/_define_property\";\nimport { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_spread_props } from \"@swc/helpers/_/_object_spread_props\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport * as React from \"react\";\nimport { Icon16Dropdown } from \"@vkontakte/icons\";\nimport { classNames } from \"@vkontakte/vkjs\";\nimport { useAdaptivity } from \"../../hooks/useAdaptivity\";\nimport { SizeType } from \"../../lib/adaptivity\";\nimport { Tappable } from \"../Tappable/Tappable\";\nimport { Caption } from \"../Typography/Caption/Caption\";\nimport { Subhead } from \"../Typography/Subhead/Subhead\";\nvar appearanceStyles = {\n  accent: \"vkuiSubnavigationButton--appearance-accent\",\n  neutral: \"vkuiSubnavigationButton--appearance-neutral\"\n};\nvar modeStyles = {\n  primary: \"vkuiSubnavigationButton--mode-primary\",\n  outline: \"vkuiSubnavigationButton--mode-outline\",\n  tertiary: \"vkuiSubnavigationButton--mode-tertiary\"\n};\nvar sizeStyles = {\n  s: \"vkuiSubnavigationButton--size-s\",\n  m: \"vkuiSubnavigationButton--size-m\",\n  l: \"vkuiSubnavigationButton--size-l\"\n};\n\nvar sizeYClassNames = _define_property({\n  none: \"vkuiSubnavigationButton--sizeY-none\"\n}, SizeType.COMPACT, \"vkuiSubnavigationButton--sizeY-compact\");\n\nvar SubnavigationButtonTypography = function (_param) {\n  var textLevel = _param.textLevel,\n      restProps = _object_without_properties(_param, [\"textLevel\"]);\n\n  if (textLevel === \"1\") {\n    return /*#__PURE__*/React.createElement(Subhead, restProps);\n  }\n\n  return /*#__PURE__*/React.createElement(Caption, _object_spread({\n    level: textLevel === \"2\" ? \"1\" : \"2\"\n  }, restProps));\n};\n/**\n * @see https://vkcom.github.io/VKUI/#/SubnavigationButton\n */\n\n\nexport var SubnavigationButton = function (_param) {\n  var _param_mode = _param.mode,\n      mode = _param_mode === void 0 ? \"primary\" : _param_mode,\n      _param_appearance = _param.appearance,\n      appearance = _param_appearance === void 0 ? \"accent\" : _param_appearance,\n      _param_size = _param.size,\n      size = _param_size === void 0 ? \"m\" : _param_size,\n      selected = _param.selected,\n      _param_textLevel = _param.textLevel,\n      textLevel = _param_textLevel === void 0 ? \"1\" : _param_textLevel,\n      before = _param.before,\n      after = _param.after,\n      expandable = _param.expandable,\n      children = _param.children,\n      className = _param.className,\n      restProps = _object_without_properties(_param, [\"mode\", \"appearance\", \"size\", \"selected\", \"textLevel\", \"before\", \"after\", \"expandable\", \"children\", \"className\"]);\n\n  var _useAdaptivity = useAdaptivity(),\n      _useAdaptivity_sizeY = _useAdaptivity.sizeY,\n      sizeY = _useAdaptivity_sizeY === void 0 ? \"none\" : _useAdaptivity_sizeY;\n\n  return /*#__PURE__*/React.createElement(Tappable, _object_spread_props(_object_spread({}, restProps), {\n    hasActive: false,\n    focusVisibleMode: \"outside\",\n    className: classNames(\"vkuiSubnavigationButton\", sizeStyles[size], modeStyles[mode], appearanceStyles[appearance], selected && \"vkuiSubnavigationButton--selected\", sizeY !== SizeType.REGULAR && sizeYClassNames[sizeY], className)\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"vkuiSubnavigationButton__in\"\n  }, before && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"vkuiSubnavigationButton__before\"\n  }, before), /*#__PURE__*/React.createElement(SubnavigationButtonTypography, {\n    textLevel: textLevel,\n    className: \"vkuiSubnavigationButton__label\",\n    Component: \"span\"\n  }, children), after && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"vkuiSubnavigationButton__after\"\n  }, after), expandable && /*#__PURE__*/React.createElement(Icon16Dropdown, {\n    className: \"vkuiSubnavigationButton__expandableIcon\"\n  })));\n};","map":{"version":3,"mappings":";;;;AAAA,YAAYA,KAAZ,MAAuB,OAAvB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,SAASC,QAAT,QAAyB,sBAAzB;AAEA,SAASC,QAAT,QAAwC,sBAAxC;AACA,SAASC,OAAT,QAAwB,+BAAxB;AACA,SAASC,OAAT,QAAwB,+BAAxB;AAGA,IAAMC,mBAAmB;EACvBC,MAAM,8CADiB;EAEvBC,OAAO;AAFgB,CAAzB;AAKA,IAAMC,aAAa;EACjBC,OAAO,yCADU;EAEjBC,OAAO,yCAFU;EAGjBC,QAAQ;AAHS,CAAnB;AAMA,IAAMC,aAAa;EACjBC,CAAC,mCADgB;EAEjBC,CAAC,mCAFgB;EAGjBC,CAAC;AAHgB,CAAnB;;AAMA,IAAMC;EACJC,IAAI;AADAD,GAEHf,SAASiB,OAFNF,EAEa,wCAFbA,CAAN;;AAgCA,IAAMG,gCAAgC;MACpCC;MACGC,gDADHD,WACGC;;EAEH,IAAID,cAAc,GAAlB,EAAuB;IACrB,oBAAOvB,oBAACO,OAAD,EAAaiB,SAAb,CAAP;EACF;;EAEA,oBAAOxB,oBAACM,OAAD,EAACA;IAAQmB,OAAOF,cAAc,GAAdA,GAAoB,GAApBA,GAA0B;EAAzCjB,GAAkDkB,SAAlDlB,CAAD,CAAP;AACF,CATA;AAWA;;;;;AAGA,OAAO,IAAMoB,sBAAsB;2BACjCC;MAAAA,gCAAO,SAAPA,GAAOC;MAAAC,2BACPC;MAAAA,4CAAa,QAAbA,GAAaD;MAAAE,qBACbC;MAAAA,gCAAO,GAAPA,GAAOD;MACPE;MAAAA,0BACAV;MAAAA,0CAAY,GAAZA,GAAYW;MACZC;MACAC;MACAC;MACAC;MACAC;MACGf,gDAVHG,MAUGH,EATHM,YASGN,EARHQ,MAQGR,EAPHS,UAOGT,EANHD,WAMGC,EALHW,QAKGX,EAJHY,OAIGZ,EAHHa,YAGGb,EAFHc,UAEGd,EADHe,WACGf;;EAEH,IAA2BrB,gCAA3B;EAAA,IAA2BA,sCAAnBqC,KAAR;EAAA,IAAQA,0CAAQ,MAARA,GAAQC,oBAAhB;;EAEA,oBACEzC,oBAACK,QAAD,EAACA,wCACKmB,SADLnB,GACKmB;IACJkB,WAAW,KADPlB;IAEJmB,kBAAiB,SAFbnB;IAGJe,WAAWrC,sCAETa,UAAU,CAACiB,IAAD,CAFD9B,EAGTS,UAAU,CAACgB,IAAD,CAHDzB,EAITM,gBAAgB,CAACsB,UAAD,CAJP5B,EAKT+B,+CALS/B,EAMTsC,UAAUpC,SAASwC,OAAnBJ,IAA8BrB,eAAe,CAACqB,KAAD,CANpCtC,EAOTqC,SAPSrC;EAHPsB,CADLnB,CAAD,eAcEL,oBAAC6C,MAAD,EAACA;IAAKN,SAAS;EAAdM,CAAD,EACGV,uBAAUnC,oBAAC6C,MAAD,EAACA;IAAKN,SAAS;EAAdM,CAAD,EAAyDV,MAAzD,CADb,EACsEA,aACpEnC,oBAACsB,6BAAD,EAACA;IACCC,WAAWA,SADZD;IAECiB,SAAS,kCAFVjB;IAGCwB,WAAU;EAHXxB,CAAD,EAKGgB,QALH,CAFF,EASGF,sBAASpC,oBAAC6C,MAAD,EAACA;IAAKN,SAAS;EAAdM,CAAD,EAAwDT,KAAxD,CATZ,EAUGC,2BAAcrC,oBAACC,cAAD,EAACA;IAAesC,SAAS;EAAxBtC,CAAD,CAVjB,CAdF,CADF;AA6BF,CA5CO","names":["React","Icon16Dropdown","classNames","useAdaptivity","SizeType","Tappable","Caption","Subhead","appearanceStyles","accent","neutral","modeStyles","primary","outline","tertiary","sizeStyles","s","m","l","sizeYClassNames","none","COMPACT","SubnavigationButtonTypography","textLevel","restProps","level","SubnavigationButton","mode","_param_mode","_param_appearance","appearance","_param_size","size","selected","_param_textLevel","before","after","expandable","children","className","sizeY","_useAdaptivity_sizeY","hasActive","focusVisibleMode","REGULAR","span","Component"],"sources":["C:\\Users\\kulag\\vk\\Ability\\node_modules\\@vkontakte\\vkui\\src\\components\\SubnavigationButton\\SubnavigationButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Icon16Dropdown } from '@vkontakte/icons';\nimport { classNames } from '@vkontakte/vkjs';\nimport { useAdaptivity } from '../../hooks/useAdaptivity';\nimport { SizeType } from '../../lib/adaptivity';\nimport { HasChildren, HasComponent } from '../../types';\nimport { Tappable, TappableProps } from '../Tappable/Tappable';\nimport { Caption } from '../Typography/Caption/Caption';\nimport { Subhead } from '../Typography/Subhead/Subhead';\nimport styles from './SubnavigationButton.module.css';\n\nconst appearanceStyles = {\n  accent: styles['SubnavigationButton--appearance-accent'],\n  neutral: styles['SubnavigationButton--appearance-neutral'],\n};\n\nconst modeStyles = {\n  primary: styles['SubnavigationButton--mode-primary'],\n  outline: styles['SubnavigationButton--mode-outline'],\n  tertiary: styles['SubnavigationButton--mode-tertiary'],\n};\n\nconst sizeStyles = {\n  s: styles['SubnavigationButton--size-s'],\n  m: styles['SubnavigationButton--size-m'],\n  l: styles['SubnavigationButton--size-l'],\n};\n\nconst sizeYClassNames = {\n  none: styles['SubnavigationButton--sizeY-none'],\n  [SizeType.COMPACT]: styles['SubnavigationButton--sizeY-compact'],\n};\n\nexport interface SubnavigationButtonProps extends Omit<TappableProps, 'size'> {\n  mode?: 'primary' | 'outline' | 'tertiary';\n  appearance?: 'accent' | 'neutral';\n  size?: 's' | 'm' | 'l';\n  selected?: boolean;\n  /**\n   * Размер шрифта. Этим свойством рекомендуется пользоваться, чтобы отрегулировать размер шрифта у кнопок в `<SubnavigationBar mode=\"fixed\" />`\n   */\n  textLevel?: '1' | '2' | '3';\n  /**\n   * Рекомендуется использовать только иконки с размером 24\n   */\n  before?: React.ReactNode;\n  /**\n   * Рекомендуется использовать только `<Counter size=\"s\" />` или `<Badge />`\n   */\n  after?: React.ReactNode;\n  expandable?: boolean;\n}\n\ntype SubnavigationButtonTypographyProps = Pick<\n  SubnavigationButtonProps,\n  'textLevel' | 'className'\n> &\n  HasComponent &\n  HasChildren;\n\nconst SubnavigationButtonTypography = ({\n  textLevel,\n  ...restProps\n}: SubnavigationButtonTypographyProps) => {\n  if (textLevel === '1') {\n    return <Subhead {...restProps} />;\n  }\n\n  return <Caption level={textLevel === '2' ? '1' : '2'} {...restProps} />;\n};\n\n/**\n * @see https://vkcom.github.io/VKUI/#/SubnavigationButton\n */\nexport const SubnavigationButton = ({\n  mode = 'primary',\n  appearance = 'accent',\n  size = 'm',\n  selected,\n  textLevel = '1',\n  before,\n  after,\n  expandable,\n  children,\n  className,\n  ...restProps\n}: SubnavigationButtonProps) => {\n  const { sizeY = 'none' } = useAdaptivity();\n\n  return (\n    <Tappable\n      {...restProps}\n      hasActive={false}\n      focusVisibleMode=\"outside\"\n      className={classNames(\n        styles['SubnavigationButton'],\n        sizeStyles[size],\n        modeStyles[mode],\n        appearanceStyles[appearance],\n        selected && styles['SubnavigationButton--selected'],\n        sizeY !== SizeType.REGULAR && sizeYClassNames[sizeY],\n        className,\n      )}\n    >\n      <span className={styles['SubnavigationButton__in']}>\n        {before && <span className={styles['SubnavigationButton__before']}>{before}</span>}\n        <SubnavigationButtonTypography\n          textLevel={textLevel}\n          className={styles['SubnavigationButton__label']}\n          Component=\"span\"\n        >\n          {children}\n        </SubnavigationButtonTypography>\n        {after && <span className={styles['SubnavigationButton__after']}>{after}</span>}\n        {expandable && <Icon16Dropdown className={styles['SubnavigationButton__expandableIcon']} />}\n      </span>\n    </Tappable>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}