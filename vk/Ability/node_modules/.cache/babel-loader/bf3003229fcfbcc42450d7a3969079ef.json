{"ast":null,"code":"/**\n * Loads async import with retries. It can be useful for bad internet connection\n *\n * @example\n * const HeaderLazyComponent = React.lazy(() => asyncImportLoader(() => import('../components/Header/Header')));\n *\n * @example\n * asyncImportLoader(() => import('some-module'), 20).then((someModule) => {\n *   someModule.init();\n * });\n */\nexport var asyncImportLoader = function (asyncImport) {\n  var attempts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 10;\n  return new Promise(function (resolve, reject) {\n    asyncImport().then(resolve).catch(function (error) {\n      setTimeout(function () {\n        if (attempts === 0) {\n          reject(error);\n          return;\n        }\n\n        asyncImportLoader(asyncImport, attempts - 1).then(resolve, reject);\n      }, 1000);\n    });\n  });\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;AAWA,OAAO,IAAMA,oBAAoB,UAAIC,WAAJ,EAAIA;MAA+BC,4EAAW;EAC7E,OAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAUA;IAC3BJ,cACGK,IADHL,CACQG,OADRH,EAEGM,KAFHN,CAES,UAACO,KAAD,EAACA;MACNC,WAAW;QACT,IAAIP,aAAa,CAAjB,EAAoB;UAClBG,OAAOG,KAAPH;UACA;QACF;;QACAL,kBAAkBC,WAAlBD,EAA+BE,WAAW,CAA1CF,EAA6CM,IAA7CN,CAAkDI,OAAlDJ,EAA2DK,MAA3DL;MACF,CANAS,EAMG,IANHA;IAOF,CAVFR;EAWF,CAZO,CAAP;AAaF,CAdO","names":["asyncImportLoader","asyncImport","attempts","Promise","resolve","reject","then","catch","error","setTimeout"],"sources":["C:\\Users\\kulag\\vk\\Ability\\node_modules\\@vkontakte\\vkjs\\src\\async.ts"],"sourcesContent":["/**\n * Loads async import with retries. It can be useful for bad internet connection\n *\n * @example\n * const HeaderLazyComponent = React.lazy(() => asyncImportLoader(() => import('../components/Header/Header')));\n *\n * @example\n * asyncImportLoader(() => import('some-module'), 20).then((someModule) => {\n *   someModule.init();\n * });\n */\nexport const asyncImportLoader = <T>(asyncImport: () => Promise<T>, attempts = 10): Promise<T> => {\n  return new Promise((resolve, reject) => {\n    asyncImport()\n      .then(resolve)\n      .catch((error) => {\n        setTimeout(() => {\n          if (attempts === 0) {\n            reject(error);\n            return;\n          }\n          asyncImportLoader(asyncImport, attempts - 1).then(resolve, reject);\n        }, 1000);\n      });\n  });\n};\n"]},"metadata":{},"sourceType":"module"}