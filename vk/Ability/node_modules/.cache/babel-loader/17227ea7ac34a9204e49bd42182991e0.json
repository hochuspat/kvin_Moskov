{"ast":null,"code":"import { _ as _sliced_to_array } from \"@swc/helpers/_/_sliced_to_array\";\nimport * as React from \"react\";\nimport { getMillisecondsToTomorrow, isSameDay } from \"../lib/date\";\nimport { useDOM } from \"../lib/dom\";\n/**\n * Опционально обновляемая дата сегодняшнего дня\n *\n * Дата - сегодня (в соответствии с системным временем)\n *\n * Часы, минуты, секунды, миллисекунды - произвольные\n *\n * @param listenDayChangesForUpdate - флаг по которому определяется, будет ли создаваться подписка на смену календарного дня\n */\n\nexport function useTodayDate() {\n  var listenDayChangesForUpdate = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;\n\n  var _useDOM = useDOM(),\n      document = _useDOM.document,\n      window = _useDOM.window;\n\n  var _React_useState = _sliced_to_array(React.useState(function () {\n    return new Date();\n  }), 2),\n      todayDate = _React_useState[0],\n      setTodayDate = _React_useState[1];\n\n  React.useEffect(function () {\n    if (!listenDayChangesForUpdate || !document || !window) {\n      return;\n    }\n\n    var timeout = undefined;\n\n    var recalcTimeout = function () {\n      if (document.visibilityState === \"visible\") {\n        var now = new Date();\n        var timeToDayChange = getMillisecondsToTomorrow(now); // Удаляем старый таймаут\n\n        window.clearTimeout(timeout); // Создаем новый таймаут\n\n        timeout = window.setTimeout(function () {\n          setTodayDate(now);\n        }, timeToDayChange); // Если todayDate не обновился в таймаут - обновить при заходе на вкладку\n\n        if (!isSameDay(todayDate, now)) {\n          setTodayDate(now);\n        }\n      }\n    };\n\n    recalcTimeout(); // Создаем слушатель visibilitychange, чтобы предотвратить пропуск обновления стейта после заморозки вкладки\n    // Если человек ее долго не трогал или закрывал крышку ноута и тп\n    // https://developer.chrome.com/blog/page-lifecycle-api/\n\n    document.addEventListener(\"visibilitychange\", recalcTimeout);\n    return function () {\n      window.clearTimeout(timeout);\n      document.removeEventListener(\"visibilitychange\", recalcTimeout);\n    };\n  }, [document, listenDayChangesForUpdate, todayDate, window]);\n  return todayDate;\n}","map":{"version":3,"mappings":";AAAA,YAAYA,KAAZ,MAAuB,OAAvB;AACA,SAASC,yBAAT,EAAoCC,SAApC,QAAqD,aAArD;AACA,SAASC,MAAT,QAAuB,YAAvB;AAEA;;;;;;;;;;AASA,OAAO,SAASC,YAAT,GAASA;MAAaC,6FAA4B;;EACvD,IAA6BF,kBAA7B;EAAA,IAAQG,WAAqBH,QAArBG,QAAR;EAAA,IAAkBC,SAAWJ,QAAXI,MAAlB;;EACA,IAAkCP,yCAAMQ,QAANR,CAAe;WAAM,IAAIS,IAAJ;GAArBT,KAAlC;EAAA,IAAOU,YAA2BV,kBAAlC;EAAA,IAAkBW,eAAgBX,kBAAlC;;EAEAA,MAAMY,SAANZ,CAAgB;IACd,IAAI,CAACK,yBAAD,IAA8B,CAACC,QAA/B,IAA2C,CAACC,MAAhD,EAAwD;MACtD;IACF;;IAEA,IAAIM,UAA8BC,SAAlC;;IAEA,IAAMC,gBAAgB;MACpB,IAAIT,SAASU,eAATV,KAA6B,SAAjC,EAA4C;QAC1C,IAAMW,MAAM,IAAIR,IAAJ,EAAZ;QAEA,IAAMS,kBAAkBjB,0BAA0BgB,GAA1BhB,CAAxB,CAH0C,CAK1C;;QACAM,OAAOY,YAAPZ,CAAoBM,OAApBN,EAN0C,CAQ1C;;QACAM,UAAUN,OAAOa,UAAPb,CAAkB;UAC1BI,aAAaM,GAAbN;QACF,CAFUJ,EAEPW,eAFOX,CAAVM,CAT0C,CAa1C;;QACA,IAAI,CAACX,UAAUQ,SAAVR,EAAqBe,GAArBf,CAAL,EAAgC;UAC9BS,aAAaM,GAAbN;QACF;MACF;IACF,CAnBA;;IAqBAI,gBA5Bc,CA8Bd;IACA;IACA;;IACAT,SAASe,gBAATf,CAA0B,kBAA1BA,EAA8CS,aAA9CT;IAEA,OAAO;MACLC,OAAOY,YAAPZ,CAAoBM,OAApBN;MACAD,SAASgB,mBAAThB,CAA6B,kBAA7BA,EAAiDS,aAAjDT;IACF,CAHA;EAIF,CAvCAN,EAuCG,CAACM,QAAD,EAAWD,yBAAX,EAAsCK,SAAtC,EAAiDH,MAAjD,CAvCHP;EAyCA,OAAOU,SAAP;AACF","names":["React","getMillisecondsToTomorrow","isSameDay","useDOM","useTodayDate","listenDayChangesForUpdate","document","window","useState","Date","todayDate","setTodayDate","useEffect","timeout","undefined","recalcTimeout","visibilityState","now","timeToDayChange","clearTimeout","setTimeout","addEventListener","removeEventListener"],"sources":["C:\\Users\\kulag\\vk\\Ability\\node_modules\\@vkontakte\\vkui\\src\\hooks\\useTodayDate.ts"],"sourcesContent":["import * as React from 'react';\nimport { getMillisecondsToTomorrow, isSameDay } from '../lib/date';\nimport { useDOM } from '../lib/dom';\n\n/**\n * Опционально обновляемая дата сегодняшнего дня\n *\n * Дата - сегодня (в соответствии с системным временем)\n *\n * Часы, минуты, секунды, миллисекунды - произвольные\n *\n * @param listenDayChangesForUpdate - флаг по которому определяется, будет ли создаваться подписка на смену календарного дня\n */\nexport function useTodayDate(listenDayChangesForUpdate = false) {\n  const { document, window } = useDOM();\n  const [todayDate, setTodayDate] = React.useState(() => new Date());\n\n  React.useEffect(() => {\n    if (!listenDayChangesForUpdate || !document || !window) {\n      return;\n    }\n\n    let timeout: number | undefined = undefined;\n\n    const recalcTimeout = () => {\n      if (document.visibilityState === 'visible') {\n        const now = new Date();\n\n        const timeToDayChange = getMillisecondsToTomorrow(now);\n\n        // Удаляем старый таймаут\n        window.clearTimeout(timeout);\n\n        // Создаем новый таймаут\n        timeout = window.setTimeout(() => {\n          setTodayDate(now);\n        }, timeToDayChange);\n\n        // Если todayDate не обновился в таймаут - обновить при заходе на вкладку\n        if (!isSameDay(todayDate, now)) {\n          setTodayDate(now);\n        }\n      }\n    };\n\n    recalcTimeout();\n\n    // Создаем слушатель visibilitychange, чтобы предотвратить пропуск обновления стейта после заморозки вкладки\n    // Если человек ее долго не трогал или закрывал крышку ноута и тп\n    // https://developer.chrome.com/blog/page-lifecycle-api/\n    document.addEventListener('visibilitychange', recalcTimeout);\n\n    return () => {\n      window.clearTimeout(timeout);\n      document.removeEventListener('visibilitychange', recalcTimeout);\n    };\n  }, [document, listenDayChangesForUpdate, todayDate, window]);\n\n  return todayDate;\n}\n"]},"metadata":{},"sourceType":"module"}