{"ast":null,"code":"import { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_spread_props } from \"@swc/helpers/_/_object_spread_props\";\nimport { _ as _sliced_to_array } from \"@swc/helpers/_/_sliced_to_array\";\nimport { _ as _to_consumable_array } from \"@swc/helpers/_/_to_consumable_array\";\nimport * as React from \"react\";\nimport { isFunction, noop } from \"@vkontakte/vkjs\";\nimport { getNavId } from \"../../lib/getNavId\";\nimport { useIsomorphicLayoutEffect } from \"../../lib/useIsomorphicLayoutEffect\";\nimport { warnOnce } from \"../../lib/warnOnce\";\nimport { ModalType } from \"./types\";\n\nfunction getModals(children) {\n  return React.Children.toArray(children);\n}\n\nvar warn = warnOnce(\"ModalRoot\");\nexport function modalTransitionReducer(state, action) {\n  if (action.type === \"setActive\" && action.id !== state.activeModal) {\n    var nextModal = action.id; // preserve exiting modal if switching mid-transition\n\n    var prevModal = state.exitingModal || state.activeModal;\n    var history = state.history ? _to_consumable_array(state.history) : [];\n    var isBack = Boolean(nextModal && history.includes(nextModal));\n\n    if (nextModal === null) {\n      history = [];\n    } else if (isBack) {\n      history = history.splice(0, history.indexOf(nextModal) + 1);\n    } else {\n      history.push(nextModal);\n    }\n\n    return {\n      activeModal: nextModal,\n      // not entering yet\n      enteringModal: null,\n      exitingModal: prevModal,\n      history: history,\n      isBack: isBack\n    };\n  }\n\n  if (action.type === \"entered\" && action.id === state.enteringModal) {\n    return _object_spread_props(_object_spread({}, state), {\n      enteringModal: null\n    });\n  }\n\n  if (action.type === \"exited\" && action.id === state.exitingModal) {\n    return _object_spread_props(_object_spread({}, state), {\n      exitingModal: null\n    });\n  }\n\n  if (action.type === \"inited\" && action.id === state.activeModal) {\n    return _object_spread_props(_object_spread({}, state), {\n      enteringModal: action.id\n    });\n  }\n\n  return state;\n}\n/**\n * Реализует переход модалок. При смене activeModal m1 -> m2:\n * 1. activeModal: m1, exitingModal: null, enteringModal: null, триггер перехода\n * 2. activeModal: m2, exitingModal: m1, enteringModal: null, рендерим m2 чтобы прошел init, начинаем анимацию выхода\n * одновременный переход между ModalPage:\n *   3a. activeModal: m2, exitingModal: m1, enteringModal: m2\n *   4a. exitingModal и enteringModal переходят в null в порядке завершения анимации\n * ИЛИ дожидаемся скрытия ModalCard\n *   3b. activeModal: m2, exitingModal: null, enteringModal: m2\n *   4b. enteringModal переходит в null после завершения анимации\n * 5. activeModal: m2, exitingModal: null, enteringModal: null, переход закончен\n */\n\nexport function useModalManager(activeModal, children) {\n  var onOpen = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : noop,\n      onOpened = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : noop,\n      onClose = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : noop,\n      onClosed = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : noop,\n      initModal = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : noop;\n  var modalsState = React.useRef({}).current;\n  getModals(children).forEach(function (Modal) {\n    var modalProps = Modal.props;\n    var id = getNavId(modalProps, warn);\n    var state = id !== undefined && modalsState[id] || {\n      id: id !== null && id !== void 0 ? id : null\n    };\n    state.onOpen = Modal.props.onOpen;\n    state.onOpened = Modal.props.onOpened;\n    state.onClose = Modal.props.onClose;\n    state.onClosed = Modal.props.onClosed; // ModalPage props\n\n    if (typeof modalProps.settlingHeight === \"number\") {\n      state.settlingHeight = modalProps.settlingHeight;\n    }\n\n    if (state.id !== null) {\n      modalsState[state.id] = state;\n    }\n  });\n  var isMissing = activeModal && !modalsState[activeModal];\n  var safeActiveModal = isMissing ? null : activeModal;\n\n  var _React_useReducer = _sliced_to_array(React.useReducer(modalTransitionReducer, {\n    activeModal: safeActiveModal,\n    enteringModal: null,\n    exitingModal: null,\n    history: safeActiveModal ? [safeActiveModal] : [],\n    isBack: false\n  }), 2),\n      transitionState = _React_useReducer[0],\n      dispatchTransition = _React_useReducer[1]; // Map props to state, render activeModal for init\n\n\n  useIsomorphicLayoutEffect(function () {\n    // ignore non-existent activeModal\n    if (process.env.NODE_ENV === \"development\" && isMissing) {\n      warn(\"Переход невозможен - модальное окно (страница) \".concat(activeModal, \" не существует\"), \"error\");\n    }\n\n    dispatchTransition({\n      type: \"setActive\",\n      id: safeActiveModal !== null && safeActiveModal !== void 0 ? safeActiveModal : null\n    });\n  }, [activeModal]); // Init activeModal & set enteringModal\n\n  useIsomorphicLayoutEffect(function () {\n    if (transitionState.activeModal) {\n      initModal(modalsState[transitionState.activeModal]);\n      dispatchTransition({\n        type: \"inited\",\n        id: transitionState.activeModal\n      });\n    }\n  }, [transitionState.activeModal]);\n\n  var isCard = function (id) {\n    var _modalsState_id;\n\n    return id != null && ((_modalsState_id = modalsState[id]) === null || _modalsState_id === void 0 ? void 0 : _modalsState_id.type) === ModalType.CARD;\n  };\n\n  var onEntered = React.useCallback(function (id) {\n    if (id) {\n      var modalState = modalsState[id];\n\n      if (isFunction(modalState.onOpened)) {\n        modalState.onOpened();\n      } else if (isFunction(onOpened)) {\n        onOpened(id);\n      }\n    }\n\n    dispatchTransition({\n      type: \"entered\",\n      id: id\n    });\n  }, [modalsState, onOpened]);\n  var onExited = React.useCallback(function (id) {\n    if (id) {\n      var modalState = modalsState[id];\n\n      if (isFunction(modalState.onClosed)) {\n        modalState.onClosed();\n      } else if (isFunction(onClosed)) {\n        onClosed(id);\n      }\n    }\n\n    dispatchTransition({\n      type: \"exited\",\n      id: id\n    });\n  }, [modalsState, onClosed]);\n  var delayEnter = Boolean(transitionState.exitingModal && (isCard(activeModal) || isCard(transitionState.exitingModal)));\n  var getModalState = React.useCallback(function (id) {\n    return id ? modalsState[id] : undefined;\n  }, [modalsState]);\n\n  function onEnter() {\n    var modalState = transitionState.activeModal && modalsState[transitionState.activeModal];\n\n    if (modalState) {\n      if (isFunction(modalState.onOpen)) {\n        modalState.onOpen();\n      } else if (isFunction(onOpen) && modalState.id) {\n        onOpen(modalState.id);\n      }\n    }\n  }\n\n  function onExit() {\n    var modalState = transitionState.activeModal && modalsState[transitionState.activeModal];\n\n    if (modalState) {\n      if (isFunction(modalState.onClose)) {\n        modalState.onClose();\n      } else if (isFunction(onClose) && modalState.id) {\n        onClose(modalState.id);\n      }\n    }\n  }\n\n  return _object_spread_props(_object_spread({\n    onEnter: onEnter,\n    onEntered: onEntered,\n    onExit: onExit,\n    onExited: onExited\n  }, transitionState), {\n    delayEnter: delayEnter,\n    getModalState: getModalState\n  });\n}\nexport function withModalManager() {\n  var initModal = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : noop;\n  return function (Wrapped) {\n    return function WithModalManager(props) {\n      var transitionManager = useModalManager(props.activeModal, props.children, props.onOpen, props.onOpened, props.onClose, props.onClosed, initModal);\n      return /*#__PURE__*/React.createElement(Wrapped, _object_spread({}, props, transitionManager));\n    };\n  };\n}","map":{"version":3,"mappings":"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","names":["React","isFunction","noop","getNavId","useIsomorphicLayoutEffect","warnOnce","ModalType","getModals","children","Children","toArray","warn","modalTransitionReducer","state","action","type","id","activeModal","nextModal","prevModal","exitingModal","history","_to_consumable_array","isBack","Boolean","includes","splice","indexOf","push","enteringModal","_object_spread_props","useModalManager","onOpen","onOpened","onClose","onClosed","initModal","modalsState","useRef","current","forEach","Modal","modalProps","props","undefined","settlingHeight","isMissing","safeActiveModal","useReducer","transitionState","dispatchTransition","process","env","NODE_ENV","concat","isCard","CARD","onEntered","useCallback","modalState","onExited","delayEnter","getModalState","onEnter","onExit","withModalManager","Wrapped","WithModalManager","transitionManager"],"sources":["C:\\Users\\kulag\\vk\\Ability\\node_modules\\@vkontakte\\vkui\\src\\components\\ModalRoot\\useModalManager.tsx"],"sourcesContent":["import * as React from 'react';\nimport { isFunction, noop } from '@vkontakte/vkjs';\nimport { getNavId } from '../../lib/getNavId';\nimport { useIsomorphicLayoutEffect } from '../../lib/useIsomorphicLayoutEffect';\nimport { warnOnce } from '../../lib/warnOnce';\nimport { HasChildren } from '../../types';\nimport { ModalsState, ModalsStateEntry, ModalType } from './types';\n\ninterface ModalTransitionState {\n  activeModal?: string | null;\n  enteringModal?: string | null;\n  exitingModal?: string | null;\n  history?: string[];\n  isBack?: boolean | null;\n}\n\nexport interface ModalTransitionProps extends ModalTransitionState {\n  onEnter: VoidFunction;\n  onEntered: (id: string | null) => void;\n  onExit: VoidFunction;\n  onExited: (id: string | null) => void;\n  getModalState: (id: string | undefined | null) => ModalsStateEntry | undefined;\n  delayEnter: boolean;\n}\n\nfunction getModals(children: React.ReactNode | React.ReactNode[]) {\n  return React.Children.toArray(children) as React.ReactElement[];\n}\n\nconst warn = warnOnce('ModalRoot');\n\nexport function modalTransitionReducer(\n  state: ModalTransitionState,\n  action: {\n    type: 'setActive' | 'entered' | 'exited' | 'inited';\n    id: string | null;\n  },\n): ModalTransitionState {\n  if (action.type === 'setActive' && action.id !== state.activeModal) {\n    const nextModal = action.id;\n    // preserve exiting modal if switching mid-transition\n    const prevModal = state.exitingModal || state.activeModal;\n    let history = state.history ? [...state.history] : [];\n    const isBack = Boolean(nextModal && history.includes(nextModal));\n\n    if (nextModal === null) {\n      history = [];\n    } else if (isBack) {\n      history = history.splice(0, history.indexOf(nextModal) + 1);\n    } else {\n      history.push(nextModal);\n    }\n\n    return {\n      activeModal: nextModal,\n      // not entering yet\n      enteringModal: null,\n      exitingModal: prevModal,\n      history,\n      isBack,\n    };\n  }\n  if (action.type === 'entered' && action.id === state.enteringModal) {\n    return { ...state, enteringModal: null };\n  }\n  if (action.type === 'exited' && action.id === state.exitingModal) {\n    return { ...state, exitingModal: null };\n  }\n  if (action.type === 'inited' && action.id === state.activeModal) {\n    return { ...state, enteringModal: action.id };\n  }\n  return state;\n}\n\n/**\n * Реализует переход модалок. При смене activeModal m1 -> m2:\n * 1. activeModal: m1, exitingModal: null, enteringModal: null, триггер перехода\n * 2. activeModal: m2, exitingModal: m1, enteringModal: null, рендерим m2 чтобы прошел init, начинаем анимацию выхода\n * одновременный переход между ModalPage:\n *   3a. activeModal: m2, exitingModal: m1, enteringModal: m2\n *   4a. exitingModal и enteringModal переходят в null в порядке завершения анимации\n * ИЛИ дожидаемся скрытия ModalCard\n *   3b. activeModal: m2, exitingModal: null, enteringModal: m2\n *   4b. enteringModal переходит в null после завершения анимации\n * 5. activeModal: m2, exitingModal: null, enteringModal: null, переход закончен\n */\nexport function useModalManager(\n  activeModal: string | null | undefined,\n  children: React.ReactNode | React.ReactNode[],\n  onOpen: (id: string) => void = noop,\n  onOpened: (id: string) => void = noop,\n  onClose: (id: string) => void = noop,\n  onClosed: (id: string) => void = noop,\n  initModal: (state: ModalsStateEntry) => void = noop,\n): ModalTransitionProps {\n  const modalsState = React.useRef<ModalsState>({}).current;\n  getModals(children).forEach((Modal) => {\n    const modalProps = Modal.props;\n    const id = getNavId(modalProps, warn);\n    const state: ModalsStateEntry = (id !== undefined && modalsState[id]) || {\n      id: id ?? null,\n    };\n\n    state.onOpen = Modal.props.onOpen;\n    state.onOpened = Modal.props.onOpened;\n    state.onClose = Modal.props.onClose;\n    state.onClosed = Modal.props.onClosed;\n    // ModalPage props\n    if (typeof modalProps.settlingHeight === 'number') {\n      state.settlingHeight = modalProps.settlingHeight;\n    }\n\n    if (state.id !== null) {\n      modalsState[state.id] = state;\n    }\n  });\n\n  const isMissing = activeModal && !modalsState[activeModal];\n  const safeActiveModal = isMissing ? null : activeModal;\n  const [transitionState, dispatchTransition] = React.useReducer(modalTransitionReducer, {\n    activeModal: safeActiveModal,\n    enteringModal: null,\n    exitingModal: null,\n    history: safeActiveModal ? [safeActiveModal] : [],\n    isBack: false,\n  });\n\n  // Map props to state, render activeModal for init\n  useIsomorphicLayoutEffect(() => {\n    // ignore non-existent activeModal\n    if (process.env.NODE_ENV === 'development' && isMissing) {\n      warn(`Переход невозможен - модальное окно (страница) ${activeModal} не существует`, 'error');\n    }\n    dispatchTransition({ type: 'setActive', id: safeActiveModal ?? null });\n  }, [activeModal]);\n\n  // Init activeModal & set enteringModal\n  useIsomorphicLayoutEffect(() => {\n    if (transitionState.activeModal) {\n      initModal(modalsState[transitionState.activeModal]);\n      dispatchTransition({ type: 'inited', id: transitionState.activeModal });\n    }\n  }, [transitionState.activeModal]);\n\n  const isCard = (id: string | null | undefined) =>\n    id != null && modalsState[id]?.type === ModalType.CARD;\n  const onEntered = React.useCallback(\n    (id: string | null) => {\n      if (id) {\n        const modalState = modalsState[id];\n\n        if (isFunction(modalState.onOpened)) {\n          modalState.onOpened();\n        } else if (isFunction(onOpened)) {\n          onOpened(id);\n        }\n      }\n\n      dispatchTransition({ type: 'entered', id });\n    },\n    [modalsState, onOpened],\n  );\n  const onExited = React.useCallback(\n    (id: string | null) => {\n      if (id) {\n        const modalState = modalsState[id];\n\n        if (isFunction(modalState.onClosed)) {\n          modalState.onClosed();\n        } else if (isFunction(onClosed)) {\n          onClosed(id);\n        }\n      }\n\n      dispatchTransition({ type: 'exited', id });\n    },\n    [modalsState, onClosed],\n  );\n  const delayEnter = Boolean(\n    transitionState.exitingModal && (isCard(activeModal) || isCard(transitionState.exitingModal)),\n  );\n  const getModalState = React.useCallback(\n    (id: string | undefined | null) => (id ? modalsState[id] : undefined),\n    [modalsState],\n  );\n\n  function onEnter() {\n    const modalState = transitionState.activeModal && modalsState[transitionState.activeModal];\n    if (modalState) {\n      if (isFunction(modalState.onOpen)) {\n        modalState.onOpen();\n      } else if (isFunction(onOpen) && modalState.id) {\n        onOpen(modalState.id);\n      }\n    }\n  }\n\n  function onExit() {\n    const modalState = transitionState.activeModal && modalsState[transitionState.activeModal];\n    if (modalState) {\n      if (isFunction(modalState.onClose)) {\n        modalState.onClose();\n      } else if (isFunction(onClose) && modalState.id) {\n        onClose(modalState.id);\n      }\n    }\n  }\n\n  return {\n    onEnter,\n    onEntered,\n    onExit,\n    onExited,\n    ...transitionState,\n    delayEnter,\n    getModalState,\n  };\n}\n\ntype WithModalManager<Props extends ModalTransitionProps> = HasChildren &\n  Omit<Props, keyof ModalTransitionProps> & {\n    activeModal?: string | null;\n  };\n\nexport function withModalManager(initModal: (a: ModalsStateEntry) => void = noop) {\n  return function <Props extends ModalTransitionProps>(\n    Wrapped: React.ComponentType<Props>,\n  ): React.ComponentType<WithModalManager<Props>> {\n    return function WithModalManager(props) {\n      const transitionManager = useModalManager(\n        props.activeModal,\n        props.children,\n        (props as any).onOpen,\n        (props as any).onOpened,\n        (props as any).onClose,\n        (props as any).onClosed,\n        initModal,\n      );\n      return <Wrapped {...(props as any)} {...transitionManager} />;\n    };\n  };\n}\n"]},"metadata":{},"sourceType":"module"}