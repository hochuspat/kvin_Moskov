{"ast":null,"code":"import { _ as _sliced_to_array } from \"@swc/helpers/_/_sliced_to_array\";\nimport * as React from \"react\";\nvar TransitionDirectionContext = /*#__PURE__*/React.createContext(undefined);\nexport var NavTransitionDirectionProvider = function (param) {\n  var children = param.children,\n      isBackProp = param.isBack;\n  var parentIsBack = React.useContext(TransitionDirectionContext); // if local isBack is undefined then transition happend on the parent side (probably Root)\n\n  var isBack = isBackProp !== undefined ? isBackProp : parentIsBack; // 'direction' should always represent the direction state of the panel on mount\n  // save the on mount value of the panel to the state\n  // to make sure we don't trigger new re-render for the panel\n  // due to change in the prop passed to provider\n\n  var _React_useState = _sliced_to_array(React.useState(isBack), 1),\n      isBackOnMount = _React_useState[0];\n\n  return /*#__PURE__*/React.createElement(TransitionDirectionContext.Provider, {\n    value: isBackOnMount\n  }, children);\n};\nexport var useNavDirection = function () {\n  var isBack = React.useContext(TransitionDirectionContext);\n  var transitionDirection = isBack === undefined ? undefined : isBack ? \"backwards\" : \"forwards\";\n  return transitionDirection;\n};","map":{"version":3,"mappings":";AAAA,YAAYA,KAAZ,MAAuB,OAAvB;AAIA,IAAMC,0CAA6BD,MAAME,aAANF,CAA0CG,SAA1CH,CAAnC;AAEA,OAAO,IAAMI,iCAAiC;MAC5CC;MACAC,UAAQC,SAARD;EAEA,IAAME,eAAeR,MAAMS,UAANT,CAAiBC,0BAAjBD,CAArB,CAJ4C,CAK5C;;EACA,IAAMM,SAASC,eAAeJ,SAAfI,GAA2BA,UAA3BA,GAAwCC,YAAvD,CAN4C,CAQ5C;EACA;EACA;EACA;;EACA,IAAwBR,yCAAMU,QAANV,CAAqCM,MAArCN,GAAqCM,CAArCN,CAAxB;EAAA,IAAOW,gBAAiBX,kBAAxB;;EAEA,oBACEA,oBAACC,2BAA2BW,QAA5B,EAAoC;IAACC,OAAOF;EAAR,CAApC,EACGN,QADH,CADF;AAKF,CAnBO;AAuBP,OAAO,IAAMS,kBAAkB;EAC7B,IAAMR,SAASN,MAAMS,UAANT,CAAiBC,0BAAjBD,CAAf;EACA,IAAMe,sBAAsBT,WAAWH,SAAXG,GAAuBH,SAAvBG,GAAmCA,SAAS,WAATA,GAAuB,UAAtF;EAEA,OAAOS,mBAAP;AACF,CALO","names":["React","TransitionDirectionContext","createContext","undefined","NavTransitionDirectionProvider","children","isBack","isBackProp","parentIsBack","useContext","useState","isBackOnMount","Provider","value","useNavDirection","transitionDirection"],"sources":["C:\\Users\\kulag\\vk\\Ability\\node_modules\\@vkontakte\\vkui\\src\\components\\NavTransitionDirectionContext\\NavTransitionDirectionContext.tsx"],"sourcesContent":["import * as React from 'react';\n\ntype DirectionContextType = boolean | undefined;\n\nconst TransitionDirectionContext = React.createContext<DirectionContextType>(undefined);\n\nexport const NavTransitionDirectionProvider = ({\n  children,\n  isBack: isBackProp,\n}: React.PropsWithChildren<{ isBack: DirectionContextType }>) => {\n  const parentIsBack = React.useContext(TransitionDirectionContext);\n  // if local isBack is undefined then transition happend on the parent side (probably Root)\n  const isBack = isBackProp !== undefined ? isBackProp : parentIsBack;\n\n  // 'direction' should always represent the direction state of the panel on mount\n  // save the on mount value of the panel to the state\n  // to make sure we don't trigger new re-render for the panel\n  // due to change in the prop passed to provider\n  const [isBackOnMount] = React.useState<DirectionContextType>(isBack);\n\n  return (\n    <TransitionDirectionContext.Provider value={isBackOnMount}>\n      {children}\n    </TransitionDirectionContext.Provider>\n  );\n};\n\nexport type TransitionDirection = undefined | 'forwards' | 'backwards';\n\nexport const useNavDirection = (): TransitionDirection => {\n  const isBack = React.useContext(TransitionDirectionContext);\n  const transitionDirection = isBack === undefined ? undefined : isBack ? 'backwards' : 'forwards';\n\n  return transitionDirection;\n};\n"]},"metadata":{},"sourceType":"module"}