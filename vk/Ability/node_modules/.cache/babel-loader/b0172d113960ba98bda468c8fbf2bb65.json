{"ast":null,"code":"import { _ as _sliced_to_array } from \"@swc/helpers/_/_sliced_to_array\";\nimport * as React from \"react\";\nexport var useChipsInput = function (props) {\n  var value = props.value,\n      getOptionValue = props.getOptionValue,\n      onChange = props.onChange,\n      onInputChange = props.onInputChange,\n      getNewOptionData = props.getNewOptionData;\n\n  var _React_useState = _sliced_to_array(React.useState(props.inputValue), 2),\n      fieldValue = _React_useState[0],\n      setFieldValue = _React_useState[1];\n\n  var _React_useState1 = _sliced_to_array(React.useState(value !== null && value !== void 0 ? value : []), 2),\n      selectedOptions = _React_useState1[0],\n      setSelectedOptions = _React_useState1[1];\n\n  var clearInput = React.useCallback(function () {\n    setFieldValue(\"\");\n    onInputChange({\n      target: {\n        value: \"\"\n      }\n    });\n  }, [onInputChange]);\n  var handleInputChange = React.useCallback(function (e) {\n    setFieldValue(e.target.value);\n    onInputChange(e);\n  }, [onInputChange]);\n  var toggleOption = React.useCallback(function (newOption, value) {\n    var newSelectedOptions = selectedOptions.filter(function (option) {\n      return getOptionValue(newOption) !== getOptionValue(option);\n    });\n\n    if (value === true) {\n      newSelectedOptions.push(newOption);\n    }\n\n    setSelectedOptions(newSelectedOptions);\n    onChange(newSelectedOptions);\n  }, [selectedOptions, getOptionValue, onChange]);\n  var addOption = React.useCallback(function (newOption) {\n    return toggleOption(newOption, true);\n  }, [toggleOption]);\n  var addOptionFromInput = React.useCallback(function () {\n    var trimmedValue = fieldValue === null || fieldValue === void 0 ? void 0 : fieldValue.trim();\n\n    if (trimmedValue) {\n      addOption(getNewOptionData(undefined, trimmedValue));\n      clearInput();\n    }\n  }, [addOption, clearInput, getNewOptionData, fieldValue]);\n  var removeOption = React.useCallback(function (value) {\n    toggleOption(getNewOptionData(undefined, value), false);\n  }, [toggleOption, getNewOptionData]);\n  React.useEffect(function () {\n    setSelectedOptions(value);\n    return function () {\n      return setSelectedOptions([]);\n    };\n  }, [props.value, value]);\n  React.useEffect(function () {\n    setFieldValue(props.inputValue);\n    return function () {\n      return setFieldValue(\"\");\n    };\n  }, [props.inputValue]);\n  return {\n    fieldValue: fieldValue,\n    setFieldValue: setFieldValue,\n    selectedOptions: selectedOptions,\n    setSelectedOptions: setSelectedOptions,\n    clearInput: clearInput,\n    toggleOption: toggleOption,\n    addOption: addOption,\n    addOptionFromInput: addOptionFromInput,\n    removeOption: removeOption,\n    handleInputChange: handleInputChange\n  };\n};","map":{"version":3,"mappings":"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","names":["React","useChipsInput","props","value","getOptionValue","onChange","onInputChange","getNewOptionData","useState","inputValue","fieldValue","setFieldValue","selectedOptions","setSelectedOptions","clearInput","useCallback","target","handleInputChange","e","toggleOption","newOption","newSelectedOptions","filter","option","push","addOption","addOptionFromInput","trimmedValue","trim","undefined","removeOption","useEffect"],"sources":["C:\\Users\\kulag\\vk\\Ability\\node_modules\\@vkontakte\\vkui\\src\\hooks\\useChipsInput.ts"],"sourcesContent":["import * as React from 'react';\nimport { ChipOption } from '../components/Chip/Chip';\nimport { ChipsInputBaseProps } from '../components/ChipsInputBase/ChipsInputBase';\n\nexport const useChipsInput = <Option extends ChipOption>(\n  props: Partial<ChipsInputBaseProps<Option>>,\n) => {\n  const { value, getOptionValue, onChange, onInputChange, getNewOptionData } = props;\n\n  const [fieldValue, setFieldValue] = React.useState(props.inputValue);\n  const [selectedOptions, setSelectedOptions] = React.useState(value ?? []);\n\n  const clearInput = React.useCallback(() => {\n    setFieldValue('');\n    onInputChange!({ target: { value: '' } } as any);\n  }, [onInputChange]);\n\n  const handleInputChange = React.useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      setFieldValue(e.target.value);\n      onInputChange!(e);\n    },\n    [onInputChange],\n  );\n\n  const toggleOption = React.useCallback(\n    (newOption: Option, value?: boolean) => {\n      const newSelectedOptions = selectedOptions.filter(\n        (option: Option) => getOptionValue!(newOption) !== getOptionValue!(option),\n      );\n\n      if (value === true) {\n        newSelectedOptions.push(newOption);\n      }\n\n      setSelectedOptions(newSelectedOptions);\n      onChange!(newSelectedOptions);\n    },\n    [selectedOptions, getOptionValue, onChange],\n  );\n\n  const addOption = React.useCallback(\n    (newOption: Option) => toggleOption(newOption, true),\n    [toggleOption],\n  );\n  const addOptionFromInput = React.useCallback(() => {\n    const trimmedValue = fieldValue?.trim();\n\n    if (trimmedValue) {\n      addOption(getNewOptionData!(undefined, trimmedValue));\n      clearInput();\n    }\n  }, [addOption, clearInput, getNewOptionData, fieldValue]);\n  const removeOption = React.useCallback(\n    (value) => {\n      toggleOption(getNewOptionData!(undefined, value as string), false);\n    },\n    [toggleOption, getNewOptionData],\n  );\n\n  React.useEffect(() => {\n    setSelectedOptions(value as Option[]);\n\n    return () => setSelectedOptions([]);\n  }, [props.value, value]);\n\n  React.useEffect(() => {\n    setFieldValue(props.inputValue);\n\n    return () => setFieldValue('');\n  }, [props.inputValue]);\n\n  return {\n    fieldValue,\n    setFieldValue,\n    selectedOptions,\n    setSelectedOptions,\n    clearInput,\n    toggleOption,\n    addOption,\n    addOptionFromInput,\n    removeOption,\n    handleInputChange,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}