{"ast":null,"code":"/**\n * Генерирует массив с диапазоном чисел.\n */\nexport function range(from, to) {\n  var step = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;\n  var direction = from < to ? 1 : -1;\n  var distance = Math.abs(from - to) + 1;\n  var arrayLength = Math.ceil(distance / step);\n  var arr = Array(arrayLength);\n\n  for (var index = 0; index < arr.length; index++) {\n    arr[index] = from + index * step * direction;\n  }\n\n  return arr;\n}\n/**\n * Генерирует массив с диапазоном чисел в порядке возрастания.\n * Если `from` меньше `to`, вернется пустой массив.\n */\n\nexport function rangeIncrement(from, to) {\n  var step = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;\n\n  if (from > to) {\n    return [];\n  }\n\n  return range(from, to, step);\n}","map":{"version":3,"mappings":"AAAA;;;AAGA,OAAO,SAASA,KAAT,CAAeC,IAAf,EAA6BC,EAA7B,EAAuC;MAAEC,wEAAO;EACrD,IAAMC,YAAYH,OAAOC,EAAPD,GAAY,CAAZA,GAAgB,CAAC,CAAnC;EACA,IAAMI,WAAWC,KAAKC,GAALD,CAASL,OAAOC,EAAhBI,IAAsB,CAAvC;EACA,IAAME,cAAcF,KAAKG,IAALH,CAAUD,WAAWF,IAArBG,CAApB;EAEA,IAAMI,MAAMC,MAAcH,WAAdG,CAAZ;;EACA,KAAK,IAAIC,QAAQ,CAAjB,EAAoBA,QAAQF,IAAIG,MAAhC,EAAwCD,OAAxC,EAAiD;IAC/CF,GAAG,CAACE,KAAD,CAAHF,GAAaT,OAAOW,QAAQT,IAARS,GAAeR,SAAnCM;EACF;;EAEA,OAAOA,GAAP;AACF;AACA;;;;;AAIA,OAAO,SAASI,cAAT,CAAwBb,IAAxB,EAAsCC,EAAtC,EAAgD;MAAEC,wEAAO;;EAC9D,IAAIF,OAAOC,EAAX,EAAe;IACb,OAAO,EAAP;EACF;;EAEA,OAAOF,MAAMC,IAAND,EAAYE,EAAZF,EAAgBG,IAAhBH,CAAP;AACF","names":["range","from","to","step","direction","distance","Math","abs","arrayLength","ceil","arr","Array","index","length","rangeIncrement"],"sources":["C:\\Users\\kulag\\vk\\Ability\\node_modules\\@vkontakte\\vkui\\src\\helpers\\range.ts"],"sourcesContent":["/**\n * Генерирует массив с диапазоном чисел.\n */\nexport function range(from: number, to: number, step = 1) {\n  const direction = from < to ? 1 : -1;\n  const distance = Math.abs(from - to) + 1;\n  const arrayLength = Math.ceil(distance / step);\n\n  const arr = Array<number>(arrayLength);\n  for (let index = 0; index < arr.length; index++) {\n    arr[index] = from + index * step * direction;\n  }\n\n  return arr;\n}\n/**\n * Генерирует массив с диапазоном чисел в порядке возрастания.\n * Если `from` меньше `to`, вернется пустой массив.\n */\nexport function rangeIncrement(from: number, to: number, step = 1) {\n  if (from > to) {\n    return [];\n  }\n\n  return range(from, to, step);\n}\n"]},"metadata":{},"sourceType":"module"}