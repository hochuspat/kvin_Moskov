{"ast":null,"code":"import { warnOnce } from \"../../lib/warnOnce\";\nimport { getBadgeIconSizeByImageBaseSize, getFallbackIconSizeByImageBaseSize, getOverlayIconSizeByImageBaseSize } from \"./helpers\";\nimport { imageBaseSizes } from \"./types\";\n/**\n * Пример,\n *\n * Icon28User -> 28\n * Icon12Circle1 -> 12\n * Icon12Circle2 -> 12\n * Icon20TextHeading1Outline -> 20\n */\n\nfunction parseIconSizeByDisplayName(displayName) {\n  if (typeof displayName !== \"string\") {\n    return null;\n  }\n\n  var match = /Icon(\\d+)/.exec(displayName);\n  return match ? Number(match[1]) : null;\n}\n\nfunction parseIconSizeByWidthProp(width) {\n  if (typeof width !== \"string\" && typeof width !== \"number\") {\n    return null;\n  }\n\n  var size = Number(width);\n  return size > 0 ? size : null;\n}\n\nfunction getElementDisplayName(element) {\n  var _element_type_displayName;\n\n  return (_element_type_displayName = element.type.displayName) !== null && _element_type_displayName !== void 0 ? _element_type_displayName : null;\n}\n\nfunction getElementWidthProp(element) {\n  var _element_props_width;\n\n  return (_element_props_width = element.props.width) !== null && _element_props_width !== void 0 ? _element_props_width : null;\n}\n\nfunction getIconSizeByElement(element) {\n  var sizeByDisplayName = parseIconSizeByDisplayName(getElementDisplayName(element));\n  var sizeByWidth = parseIconSizeByWidthProp(getElementWidthProp(element));\n  return sizeByWidth ? sizeByWidth : sizeByDisplayName;\n}\n\nfunction validateIconComponentSizeByImageSize(imageSize, iconProp, selectorFn, logger) {\n  var iconSize = getIconSizeByElement(iconProp.value);\n\n  if (iconSize === null) {\n    return;\n  }\n\n  var result = selectorFn(imageSize);\n\n  if (result === iconSize || result === selectorFn.MAX_SIZE && iconSize >= result) {\n    return;\n  }\n\n  var iconName = getElementDisplayName(iconProp.value);\n  var propMessage = iconName ? \"\".concat(iconProp.name, \"={<\").concat(iconName, \" />}\") : iconProp.name;\n  logger(\"Размер `\".concat(propMessage, \"` не соответствует дизайн-системе. Для `size={\").concat(imageSize, \"}` размер иконки для `\").concat(iconProp.name, \"` должен соответствовать <Icon\").concat(result, \"<name> />. Если такого размера нет, то используйте <\").concat(iconName, \" width={\").concat(result, \"} height={\").concat(result, \"} />\"), \"log\");\n}\n\nvar warnImageBase = warnOnce(\"ImageBase\");\nexport function validateFallbackIcon(imageSize, iconProp) {\n  return validateIconComponentSizeByImageSize(imageSize, iconProp, getFallbackIconSizeByImageBaseSize, warnImageBase);\n}\nvar mapOfExpectedSize = new Set(imageBaseSizes);\nvar arrayOfSizes = Object.keys(mapOfExpectedSize).map(function (str) {\n  return Number(str);\n});\nvar maxSize = arrayOfSizes.reduce(function (maxSize, size) {\n  return size > maxSize ? size : maxSize;\n}, 0);\nexport function validateSize(imageSize) {\n  if (imageSize > maxSize || mapOfExpectedSize.has(imageSize)) {\n    return;\n  }\n\n  warnImageBase(\"`size={\".concat(imageSize, \"}` не соответствует дизайн-системе. Пожалуйста, используйте один из следующих вариантов: \").concat(arrayOfSizes.join(\" | \")), \"log\");\n}\nvar warnImageBaseBadge = warnOnce(\"ImageBase.Badge\");\nexport function validateBadgeIcon(imageSize, iconProp) {\n  if (imageSize < 24 && iconProp) {\n    return warnImageBaseBadge(\"Не используйте бейдж при `size < 24`.\", \"log\");\n  }\n\n  validateIconComponentSizeByImageSize(imageSize, iconProp, getBadgeIconSizeByImageBaseSize, warnImageBaseBadge);\n}\nvar warnImageBaseOverlay = warnOnce(\"ImageBase.Overlay\");\nexport function validateOverlayIcon(imageSize, iconProp) {\n  validateIconComponentSizeByImageSize(imageSize, iconProp, getOverlayIconSizeByImageBaseSize, warnImageBaseOverlay);\n}","map":{"version":3,"mappings":"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","names":["warnOnce","getBadgeIconSizeByImageBaseSize","getFallbackIconSizeByImageBaseSize","getOverlayIconSizeByImageBaseSize","imageBaseSizes","parseIconSizeByDisplayName","displayName","match","exec","Number","parseIconSizeByWidthProp","width","size","getElementDisplayName","element","type","getElementWidthProp","props","getIconSizeByElement","sizeByDisplayName","sizeByWidth","validateIconComponentSizeByImageSize","imageSize","iconProp","selectorFn","logger","iconSize","value","result","MAX_SIZE","iconName","propMessage","name","concat","warnImageBase","validateFallbackIcon","mapOfExpectedSize","Set","arrayOfSizes","Object","keys","map","str","maxSize","reduce","validateSize","has","join","warnImageBaseBadge","validateBadgeIcon","warnImageBaseOverlay","validateOverlayIcon"],"sources":["C:\\Users\\kulag\\vk\\Ability\\node_modules\\@vkontakte\\vkui\\src\\components\\ImageBase\\validators.ts"],"sourcesContent":["import { warnOnce } from '../../lib/warnOnce';\nimport {\n  getBadgeIconSizeByImageBaseSize,\n  getFallbackIconSizeByImageBaseSize,\n  getOverlayIconSizeByImageBaseSize,\n} from './helpers';\nimport { imageBaseSizes } from './types';\n\n/**\n * Пример,\n *\n * Icon28User -> 28\n * Icon12Circle1 -> 12\n * Icon12Circle2 -> 12\n * Icon20TextHeading1Outline -> 20\n */\nfunction parseIconSizeByDisplayName(displayName: unknown): number | null {\n  if (typeof displayName !== 'string') {\n    return null;\n  }\n\n  const match = /Icon(\\d+)/.exec(displayName);\n\n  return match ? Number(match[1]) : null;\n}\n\nfunction parseIconSizeByWidthProp(width: unknown): number | null {\n  if (typeof width !== 'string' && typeof width !== 'number') {\n    return null;\n  }\n  const size = Number(width);\n  return size > 0 ? size : null;\n}\n\nfunction getElementDisplayName(element: JSX.Element): string | null {\n  return element.type.displayName ?? null;\n}\n\nfunction getElementWidthProp(element: JSX.Element): number | string | null {\n  return element.props.width ?? null;\n}\n\nfunction getIconSizeByElement(element: JSX.Element): number | null {\n  const sizeByDisplayName = parseIconSizeByDisplayName(getElementDisplayName(element));\n  const sizeByWidth = parseIconSizeByWidthProp(getElementWidthProp(element));\n  return sizeByWidth ? sizeByWidth : sizeByDisplayName;\n}\n\ninterface IconProp {\n  name: string;\n  value: JSX.Element;\n}\n\ninterface SelectorFn {\n  (imageSize: number): number;\n  MAX_SIZE: number;\n}\n\nfunction validateIconComponentSizeByImageSize(\n  imageSize: number,\n  iconProp: IconProp,\n  selectorFn: SelectorFn,\n  logger: ReturnType<typeof warnOnce>,\n) {\n  const iconSize = getIconSizeByElement(iconProp.value);\n\n  if (iconSize === null) {\n    return;\n  }\n\n  const result = selectorFn(imageSize);\n\n  if (result === iconSize || (result === selectorFn.MAX_SIZE && iconSize >= result)) {\n    return;\n  }\n\n  const iconName = getElementDisplayName(iconProp.value);\n  const propMessage = iconName ? `${iconProp.name}={<${iconName} />}` : iconProp.name;\n\n  logger(\n    `Размер \\`${propMessage}\\` не соответствует дизайн-системе. Для \\`size={${imageSize}}\\` размер иконки для \\`${iconProp.name}\\` должен соответствовать <Icon${result}<name> />. Если такого размера нет, то используйте <${iconName} width={${result}} height={${result}} />`,\n    'log',\n  );\n}\n\nconst warnImageBase = warnOnce('ImageBase');\n\nexport function validateFallbackIcon(imageSize: number, iconProp: IconProp) {\n  return validateIconComponentSizeByImageSize(\n    imageSize,\n    iconProp,\n    getFallbackIconSizeByImageBaseSize,\n    warnImageBase,\n  );\n}\n\nconst mapOfExpectedSize = new Set<number>(imageBaseSizes);\n\nconst arrayOfSizes = Object.keys(mapOfExpectedSize).map((str) => Number(str));\nconst maxSize = arrayOfSizes.reduce((maxSize, size) => (size > maxSize ? size : maxSize), 0);\n\nexport function validateSize(imageSize: number): void {\n  if (imageSize > maxSize || mapOfExpectedSize.has(imageSize)) {\n    return;\n  }\n  warnImageBase(\n    `\\`size={${imageSize}}\\` не соответствует дизайн-системе. Пожалуйста, используйте один из следующих вариантов: ${arrayOfSizes.join(\n      ' | ',\n    )}`,\n    'log',\n  );\n}\n\nconst warnImageBaseBadge = warnOnce('ImageBase.Badge');\n\nexport function validateBadgeIcon(imageSize: number, iconProp: IconProp): void {\n  if (imageSize < 24 && iconProp) {\n    return warnImageBaseBadge('Не используйте бейдж при `size < 24`.', 'log');\n  }\n  validateIconComponentSizeByImageSize(\n    imageSize,\n    iconProp,\n    getBadgeIconSizeByImageBaseSize,\n    warnImageBaseBadge,\n  );\n}\n\nconst warnImageBaseOverlay = warnOnce('ImageBase.Overlay');\n\nexport function validateOverlayIcon(imageSize: number, iconProp: IconProp): void {\n  validateIconComponentSizeByImageSize(\n    imageSize,\n    iconProp,\n    getOverlayIconSizeByImageBaseSize,\n    warnImageBaseOverlay,\n  );\n}\n"]},"metadata":{},"sourceType":"module"}