{"ast":null,"code":"import { _ as _sliced_to_array } from \"@swc/helpers/_/_sliced_to_array\";\nimport { _ as _type_of } from \"@swc/helpers/_/_type_of\";\nimport dayjs from \"dayjs\";\nexport function startOfDay(date) {\n  return dayjs(date).startOf(\"day\").toDate();\n}\nexport function endOfDay(date) {\n  return dayjs(date).endOf(\"day\").toDate();\n}\nexport function startOfWeek(date) {\n  var weekStart = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n  weekStart = weekStart % 7;\n  var day = dayjs(date);\n  var weekDay = day.day();\n  var diff = (weekDay < weekStart ? 7 : 0) + weekDay - weekStart;\n  return day.date(day.date() - diff).toDate();\n}\nexport function endOfWeek(date) {\n  var weekStart = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n  var day = dayjs(startOfWeek(date, weekStart));\n  return day.date(day.date() + 6).toDate();\n}\nexport function startOfMonth(date) {\n  return dayjs(date).startOf(\"month\").toDate();\n}\nexport function endOfMonth(date) {\n  return dayjs(date).endOf(\"month\").toDate();\n}\nexport function isFirstDayOfMonth(date) {\n  return dayjs(date).date() === 1;\n}\nexport function isLastDayOfMonth(date) {\n  // isSameDay -- shorter, but not exact with date-fns behavior\n  // return isSameDay(date, dayjs(date).endOf(\"month\"));\n  return dayjs(date).endOf(\"day\").isSame(dayjs(date).endOf(\"month\"));\n}\nexport function format(date, format) {\n  return dayjs(date).format(format);\n}\nexport function isBefore(date1, date2) {\n  // Exactly as date-fns does\n  // dayjs().isBefore() for slightly different approach\n  return dayjs(date1) < dayjs(date2);\n}\nexport function isAfter(date1, date2) {\n  return dayjs(date1) > dayjs(date2);\n}\nexport function isSameDay(date1, date2) {\n  return dayjs(date1).isSame(date2, \"day\");\n}\nexport function isSameMonth(date1, date2) {\n  return dayjs(date1).isSame(date2, \"month\");\n}\nexport function isWithinInterval(date, start, end) {\n  var day = dayjs(date);\n  return day >= dayjs(start) && day <= dayjs(end);\n}\nexport function setMinutes(date, minute) {\n  return dayjs(date).set(\"minute\", minute).toDate();\n}\nexport function setHours(date, hour) {\n  return dayjs(date).set(\"hour\", hour).toDate();\n}\nexport function setMonth(date, month) {\n  return dayjs(date).set(\"month\", month).toDate();\n}\nexport function setYear(date, year) {\n  return dayjs(date).set(\"year\", year).toDate();\n}\nexport function addDays(date, day) {\n  return dayjs(date).add(day, \"day\").toDate();\n}\nexport function subDays(date, day) {\n  return dayjs(date).subtract(day, \"day\").toDate();\n}\nexport function addWeeks(date, week) {\n  return dayjs(date).add(week, \"week\").toDate();\n}\nexport function subWeeks(date, week) {\n  return dayjs(date).subtract(week, \"week\").toDate();\n}\nexport function addMonths(date, month) {\n  return dayjs(date).add(month, \"month\").toDate();\n}\nexport function subMonths(date, month) {\n  return dayjs(date).subtract(month, \"month\").toDate();\n} // Rip off date-fns\n\nexport function eachDayOfInterval(start, end) {\n  var dates = [];\n  var startDate = dayjs(start).toDate();\n  var endDate = dayjs(end).toDate();\n  var endTime = endDate.getTime();\n  var currentDate = startDate;\n  currentDate.setHours(0, 0, 0, 0);\n\n  while (currentDate.getTime() <= endTime) {\n    dates.push(new Date(currentDate.getTime()));\n    currentDate.setDate(currentDate.getDate() + 1);\n    currentDate.setHours(0, 0, 0, 0);\n  }\n\n  return dates;\n}\nexport function parse(input, format) {\n  var _loop = function () {\n    var match = superRegExp.exec(format);\n\n    if (!match) {\n      return \"break\";\n    }\n\n    var length = match[0].length;\n    var atIndex = superRegExp.lastIndex - length;\n    var item = entries.find(function (item) {\n      return item[0] === match[0];\n    });\n    lastNonFormatting = format.slice(lastFormatIndex, atIndex);\n    lastFormatIndex = superRegExp.lastIndex;\n\n    if (input.slice(prevInputIndex, prevInputIndex + lastNonFormatting.length) !== lastNonFormatting) {\n      return {\n        v: new Date(\"\")\n      };\n    }\n\n    var value = input.slice(prevInputIndex + lastNonFormatting.length).match(item[1]);\n\n    if (!value) {\n      return {\n        v: new Date(\"\")\n      };\n    }\n\n    prevInputIndex = prevInputIndex + lastNonFormatting.length + value[0].length;\n\n    var _item_ = _sliced_to_array(item[2](value[0]), 3),\n        key = _item_[0],\n        newValue = _item_[1],\n        okay = _item_[2];\n\n    if (!okay) {\n      return {\n        v: new Date(\"\")\n      };\n    }\n\n    store[key] = newValue;\n    found = true;\n  };\n\n  var referenceDate = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : new Date();\n  var match2 = /^\\d\\d/; // 00 - 99\n\n  var match4 = /^\\d{4}/; // 0000 - 9999\n\n  var entries = [[\"YYYY\", match4, function (val) {\n    return [\"Y\", +val, true];\n  }], [\"MM\", match2, function (val) {\n    var numVal = +val;\n    var okay = numVal > 0 && numVal <= 12;\n    return [\"M\", numVal - 1, okay];\n  }], [\"DD\", match2, function (val) {\n    return [\"D\", +val, true];\n  }], [\"HH\", match2, function (val) {\n    var numVal = parseInt(val, 10);\n    var okay = numVal >= 0 && numVal < 24;\n    return [\"h\", numVal, okay];\n  }], [\"mm\", match2, function (val) {\n    var numVal = parseInt(val, 10);\n    var okay = numVal >= 0 && numVal < 60;\n    return [\"m\", numVal, okay];\n  }]];\n  var superRegExp = new RegExp(entries.map(function (item) {\n    return item[0];\n  }).join(\"|\"), \"g\");\n  var store = {\n    Y: referenceDate.getFullYear(),\n    M: referenceDate.getMonth(),\n    D: referenceDate.getDate(),\n    h: referenceDate.getHours(),\n    m: referenceDate.getMinutes(),\n    s: referenceDate.getSeconds(),\n    ms: referenceDate.getMilliseconds()\n  };\n  var prevInputIndex = 0;\n  var lastNonFormatting = \"\";\n  var lastFormatIndex = 0;\n  var found = false;\n\n  while (true) {\n    var _ret = _loop();\n\n    if (_type_of(_ret) === \"object\") return _ret.v;\n    if (_ret === \"break\") break;\n  }\n\n  if (!found) {\n    return new Date(\"\");\n  }\n\n  var date = new Date(store.Y, store.M, store.D, store.h, store.m, store.s, store.ms); // Since days of months are dynamic, they can't be validated in entries,\n  // so we check it here, in the finalized date\n\n  if (date.getMonth() !== store.M || date.getDate() !== store.D) {\n    return new Date(\"\");\n  }\n\n  return date;\n}\nexport function isMatch(input, format) {\n  return !isNaN(+parse(input, format));\n}\nexport function getMillisecondsToTomorrow(date) {\n  return dayjs(endOfDay(date)).diff(dayjs(date), \"ms\");\n}","map":{"version":3,"mappings":"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","names":["dayjs","startOfDay","date","startOf","toDate","endOfDay","endOf","startOfWeek","weekStart","day","weekDay","diff","endOfWeek","startOfMonth","endOfMonth","isFirstDayOfMonth","isLastDayOfMonth","isSame","format","isBefore","date1","date2","isAfter","isSameDay","isSameMonth","isWithinInterval","start","end","setMinutes","minute","set","setHours","hour","setMonth","month","setYear","year","addDays","add","subDays","subtract","addWeeks","week","subWeeks","addMonths","subMonths","eachDayOfInterval","dates","startDate","endDate","endTime","getTime","currentDate","push","Date","setDate","getDate","parse","input","match","superRegExp","exec","length","atIndex","lastIndex","item","entries","find","lastNonFormatting","slice","lastFormatIndex","prevInputIndex","value","key","newValue","okay","store","found","referenceDate","match2","match4","val","numVal","parseInt","RegExp","map","join","Y","getFullYear","M","getMonth","D","h","getHours","m","getMinutes","s","getSeconds","ms","getMilliseconds","isMatch","isNaN","getMillisecondsToTomorrow"],"sources":["C:\\Users\\kulag\\vk\\Ability\\node_modules\\@vkontakte\\vkui\\src\\lib\\date.ts"],"sourcesContent":["import dayjs from 'dayjs';\n\n// Using date-fns-like type for migration\ntype DirtyDate = Date | number;\n\nexport function startOfDay(date: DirtyDate) {\n  return dayjs(date).startOf('day').toDate();\n}\n\nexport function endOfDay(date: DirtyDate) {\n  return dayjs(date).endOf('day').toDate();\n}\n\nexport function startOfWeek(date: DirtyDate, weekStart = 0) {\n  weekStart = weekStart % 7;\n\n  const day = dayjs(date);\n  const weekDay = day.day();\n  const diff = (weekDay < weekStart ? 7 : 0) + weekDay - weekStart;\n\n  return day.date(day.date() - diff).toDate();\n}\n\nexport function endOfWeek(date: DirtyDate, weekStart = 0) {\n  const day = dayjs(startOfWeek(date, weekStart));\n\n  return day.date(day.date() + 6).toDate();\n}\n\nexport function startOfMonth(date: DirtyDate) {\n  return dayjs(date).startOf('month').toDate();\n}\n\nexport function endOfMonth(date: DirtyDate) {\n  return dayjs(date).endOf('month').toDate();\n}\n\nexport function isFirstDayOfMonth(date: DirtyDate) {\n  return dayjs(date).date() === 1;\n}\n\nexport function isLastDayOfMonth(date: DirtyDate) {\n  // isSameDay -- shorter, but not exact with date-fns behavior\n  // return isSameDay(date, dayjs(date).endOf(\"month\"));\n  return dayjs(date).endOf('day').isSame(dayjs(date).endOf('month'));\n}\n\nexport function format(date: DirtyDate, format: string) {\n  return dayjs(date).format(format);\n}\n\nexport function isBefore(date1: DirtyDate, date2: DirtyDate) {\n  // Exactly as date-fns does\n  // dayjs().isBefore() for slightly different approach\n  return dayjs(date1) < dayjs(date2);\n}\n\nexport function isAfter(date1: DirtyDate, date2: DirtyDate) {\n  return dayjs(date1) > dayjs(date2);\n}\n\nexport function isSameDay(date1: DirtyDate, date2: DirtyDate) {\n  return dayjs(date1).isSame(date2, 'day');\n}\n\nexport function isSameMonth(date1: DirtyDate, date2: DirtyDate) {\n  return dayjs(date1).isSame(date2, 'month');\n}\n\nexport function isWithinInterval(date: DirtyDate, start: DirtyDate, end: DirtyDate) {\n  const day = dayjs(date);\n  return day >= dayjs(start) && day <= dayjs(end);\n}\n\nexport function setMinutes(date: DirtyDate, minute: number) {\n  return dayjs(date).set('minute', minute).toDate();\n}\n\nexport function setHours(date: DirtyDate, hour: number) {\n  return dayjs(date).set('hour', hour).toDate();\n}\n\nexport function setMonth(date: DirtyDate, month: number) {\n  return dayjs(date).set('month', month).toDate();\n}\n\nexport function setYear(date: DirtyDate, year: number) {\n  return dayjs(date).set('year', year).toDate();\n}\n\nexport function addDays(date: DirtyDate, day: number) {\n  return dayjs(date).add(day, 'day').toDate();\n}\n\nexport function subDays(date: DirtyDate, day: number) {\n  return dayjs(date).subtract(day, 'day').toDate();\n}\n\nexport function addWeeks(date: DirtyDate, week: number) {\n  return dayjs(date).add(week, 'week').toDate();\n}\n\nexport function subWeeks(date: DirtyDate, week: number) {\n  return dayjs(date).subtract(week, 'week').toDate();\n}\n\nexport function addMonths(date: DirtyDate, month: number) {\n  return dayjs(date).add(month, 'month').toDate();\n}\n\nexport function subMonths(date: DirtyDate, month: number) {\n  return dayjs(date).subtract(month, 'month').toDate();\n}\n\n// Rip off date-fns\nexport function eachDayOfInterval(start: DirtyDate, end: DirtyDate) {\n  const dates: Date[] = [];\n  const startDate = dayjs(start).toDate();\n  const endDate = dayjs(end).toDate();\n\n  const endTime = endDate.getTime();\n  const currentDate = startDate;\n  currentDate.setHours(0, 0, 0, 0);\n\n  while (currentDate.getTime() <= endTime) {\n    dates.push(new Date(currentDate.getTime()));\n    currentDate.setDate(currentDate.getDate() + 1);\n    currentDate.setHours(0, 0, 0, 0);\n  }\n\n  return dates;\n}\n\nexport function parse(input: string, format: string, referenceDate: Date = new Date()) {\n  const match2 = /^\\d\\d/; // 00 - 99\n  const match4 = /^\\d{4}/; // 0000 - 9999\n\n  const entries: Array<[string, RegExp, (val: string) => [string, number, boolean]]> = [\n    ['YYYY', match4, (val) => ['Y', +val, true]],\n    [\n      'MM',\n      match2,\n      (val) => {\n        const numVal = +val;\n        const okay = numVal > 0 && numVal <= 12;\n\n        return ['M', numVal - 1, okay];\n      },\n    ],\n    ['DD', match2, (val) => ['D', +val, true]],\n    [\n      'HH',\n      match2,\n      (val) => {\n        const numVal = parseInt(val, 10);\n        const okay = numVal >= 0 && numVal < 24;\n\n        return ['h', numVal, okay];\n      },\n    ],\n    [\n      'mm',\n      match2,\n      (val) => {\n        const numVal = parseInt(val, 10);\n        const okay = numVal >= 0 && numVal < 60;\n\n        return ['m', numVal, okay];\n      },\n    ],\n  ];\n\n  const superRegExp = new RegExp(entries.map((item) => item[0]).join('|'), 'g');\n\n  const store: {\n    [key: string]: number;\n  } = {\n    Y: referenceDate.getFullYear(),\n    M: referenceDate.getMonth(),\n    D: referenceDate.getDate(),\n    h: referenceDate.getHours(),\n    m: referenceDate.getMinutes(),\n    s: referenceDate.getSeconds(),\n    ms: referenceDate.getMilliseconds(),\n  };\n\n  let prevInputIndex = 0;\n  let lastNonFormatting = '';\n  let lastFormatIndex = 0;\n  let found = false;\n\n  while (true) {\n    const match = superRegExp.exec(format);\n\n    if (!match) {\n      break;\n    }\n\n    const length = match[0].length;\n    const atIndex = superRegExp.lastIndex - length;\n\n    const item = entries.find((item) => item[0] === match[0])!;\n\n    lastNonFormatting = format.slice(lastFormatIndex, atIndex);\n    lastFormatIndex = superRegExp.lastIndex;\n\n    if (\n      input.slice(prevInputIndex, prevInputIndex + lastNonFormatting.length) !== lastNonFormatting\n    ) {\n      return new Date('');\n    }\n\n    const value = input.slice(prevInputIndex + lastNonFormatting.length).match(item[1]);\n\n    if (!value) {\n      return new Date('');\n    }\n\n    prevInputIndex = prevInputIndex + lastNonFormatting.length + value[0].length;\n\n    const [key, newValue, okay] = item[2](value[0]);\n\n    if (!okay) {\n      return new Date('');\n    }\n\n    store[key] = newValue;\n    found = true;\n  }\n\n  if (!found) {\n    return new Date('');\n  }\n\n  const date = new Date(store.Y, store.M, store.D, store.h, store.m, store.s, store.ms);\n\n  // Since days of months are dynamic, they can't be validated in entries,\n  // so we check it here, in the finalized date\n  if (date.getMonth() !== store.M || date.getDate() !== store.D) {\n    return new Date('');\n  }\n\n  return date;\n}\n\nexport function isMatch(input: string, format: string) {\n  return !isNaN(+parse(input, format));\n}\n\nexport function getMillisecondsToTomorrow(date: DirtyDate) {\n  return dayjs(endOfDay(date)).diff(dayjs(date), 'ms');\n}\n"]},"metadata":{},"sourceType":"module"}