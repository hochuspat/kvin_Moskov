{"ast":null,"code":"import { _ as _sliced_to_array } from \"@swc/helpers/_/_sliced_to_array\";\nimport * as React from \"react\";\nimport { useDOM } from \"../lib/dom\";\nimport { useGlobalEventListener } from \"./useGlobalEventListener\";\n/**\n Проверяет, закрыла ли клавиатура часть экрана, 24% подошло к большинству устройств\n Работает на iOS и Android, где софт-клавиатура ресайзит viewport в браузерах\n */\n\nexport function getPreciseKeyboardState(window) {\n  var innerHeight = window.innerHeight,\n      availHeight = window.screen.availHeight;\n  var coveredViewportPercentage = Math.round((1 - innerHeight / availHeight) * 100);\n  return coveredViewportPercentage > 24;\n}\nvar eventOptions = {\n  passive: true,\n  capture: false\n};\nexport function useKeyboard() {\n  var _document_activeElement;\n\n  var document = useDOM().document;\n\n  var _React_useState = _sliced_to_array(React.useState(false), 2),\n      isOpened = _React_useState[0],\n      setIsOpened = _React_useState[1];\n\n  var onFocus = React.useCallback(function (event) {\n    var _document_activeElement, _document_activeElement1;\n\n    var isOpened = (event === true || event.type === \"focusin\") && ((document === null || document === void 0 ? void 0 : (_document_activeElement = document.activeElement) === null || _document_activeElement === void 0 ? void 0 : _document_activeElement.tagName) === \"INPUT\" || (document === null || document === void 0 ? void 0 : (_document_activeElement1 = document.activeElement) === null || _document_activeElement1 === void 0 ? void 0 : _document_activeElement1.tagName) === \"TEXTAREA\");\n    setIsOpened(isOpened);\n  }, [document === null || document === void 0 ? void 0 : (_document_activeElement = document.activeElement) === null || _document_activeElement === void 0 ? void 0 : _document_activeElement.tagName]);\n  /**\n  У полей с autoFocus не отлавливаются события focus, для этого вызываем вручную,\n  чтобы иметь хоть какое-то понимание происходящего.\n  */\n\n  React.useEffect(function () {\n    onFocus(true);\n  }, [onFocus]);\n  useGlobalEventListener(document, \"focusout\", onFocus, eventOptions);\n  useGlobalEventListener(document, \"focusin\", onFocus, eventOptions);\n  return {\n    isOpened: isOpened\n  };\n}","map":{"version":3,"mappings":";AAAA,YAAYA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,QAAuB,YAAvB;AACA,SAASC,sBAAT,QAAuC,0BAAvC;AAMA;;;;;AAIA,OAAO,SAASC,uBAAT,CAAiCC,MAAjC,EAA4C;EACjD,IACEC,cAEED,OAFFC,WADF;EAAA,IAEEC,WAAUC,GACRH,OADFE,MACEF,CADQG,WAFZ;EAKA,IAAMC,4BAA4BC,KAAKC,KAALD,CAAW,CAAC,IAAIJ,cAAcE,WAAnB,IAAkC,GAA7CE,CAAlC;EACA,OAAOD,4BAA4B,EAAnC;AACF;AAEA,IAAMG,eAAe;EACnBC,SAAS,IADU;EAEnBC,SAAS;AAFU,CAArB;AAKA,OAAO,SAASC,WAAT,GAASA;MAaXC;;EAZH,IAAMA,QAAEA,GAAad,SAAbc,QAAR;;EAEA,IAAgCf,yCAAMgB,QAANhB,CAAe,KAAfA,GAAe,CAAfA,CAAhC;EAAA,IAAOiB,WAAyBjB,kBAAhC;EAAA,IAAiBkB,cAAelB,kBAAhC;;EAEA,IAAMmB,UAAUnB,MAAMoB,WAANpB,CACd,UAACqB,KAAD,EAACA;QAGIN,yBACCA;;IAHJ,IAAME,WACJ,CAACI,UAAU,IAAVA,IAAkBA,MAAMC,IAAND,KAAe,SAAlC,MACCN,yFAAUQ,aAAVR,MAAuB,IAAvBA,0EAAyBS,OAAzBT,MAAqC,OAArCA,IACCA,0FAAUQ,aAAVR,MAAuB,IAAvBA,4EAAyBS,OAAzBT,MAAqC,UAFvC,CADF;IAIAG,YAAYD,QAAZC;EACF,CAPclB,EAQd,CAACe,wFAAUQ,aAAVR,MAAuB,IAAvBA,0EAAyBS,OAA1B,CARcxB,CAAhB;EAWA;;;;;EAIAA,MAAMyB,SAANzB,CAAgB;IACdmB,QAAQ,IAARA;EACF,CAFAnB,EAEG,CAACmB,OAAD,CAFHnB;EAIAE,uBAAuBa,QAAvBb,EAAiC,UAAjCA,EAA6CiB,OAA7CjB,EAAsDS,YAAtDT;EACAA,uBAAuBa,QAAvBb,EAAiC,SAAjCA,EAA4CiB,OAA5CjB,EAAqDS,YAArDT;EAEA,OAAO;IAAEe;EAAF,CAAP;AACF","names":["React","useDOM","useGlobalEventListener","getPreciseKeyboardState","window","innerHeight","screen","availHeight","coveredViewportPercentage","Math","round","eventOptions","passive","capture","useKeyboard","document","useState","isOpened","setIsOpened","onFocus","useCallback","event","type","activeElement","tagName","useEffect"],"sources":["C:\\Users\\kulag\\vk\\Ability\\node_modules\\@vkontakte\\vkui\\src\\hooks\\useKeyboard.ts"],"sourcesContent":["import * as React from 'react';\nimport { useDOM } from '../lib/dom';\nimport { useGlobalEventListener } from './useGlobalEventListener';\n\ninterface SoftwareKeyboardState {\n  isOpened: boolean;\n}\n\n/**\n Проверяет, закрыла ли клавиатура часть экрана, 24% подошло к большинству устройств\n Работает на iOS и Android, где софт-клавиатура ресайзит viewport в браузерах\n */\nexport function getPreciseKeyboardState(window: any): boolean {\n  const {\n    innerHeight,\n    screen: { availHeight },\n  } = window;\n\n  const coveredViewportPercentage = Math.round((1 - innerHeight / availHeight) * 100);\n  return coveredViewportPercentage > 24;\n}\n\nconst eventOptions = {\n  passive: true,\n  capture: false,\n};\n\nexport function useKeyboard(): SoftwareKeyboardState {\n  const { document } = useDOM();\n\n  const [isOpened, setIsOpened] = React.useState(false);\n\n  const onFocus = React.useCallback(\n    (event: FocusEvent | true) => {\n      const isOpened =\n        (event === true || event.type === 'focusin') &&\n        (document?.activeElement?.tagName === 'INPUT' ||\n          document?.activeElement?.tagName === 'TEXTAREA');\n      setIsOpened(isOpened);\n    },\n    [document?.activeElement?.tagName],\n  );\n\n  /**\n   У полей с autoFocus не отлавливаются события focus, для этого вызываем вручную,\n   чтобы иметь хоть какое-то понимание происходящего.\n   */\n  React.useEffect(() => {\n    onFocus(true);\n  }, [onFocus]);\n\n  useGlobalEventListener(document, 'focusout', onFocus, eventOptions);\n  useGlobalEventListener(document, 'focusin', onFocus, eventOptions);\n\n  return { isOpened };\n}\n"]},"metadata":{},"sourceType":"module"}