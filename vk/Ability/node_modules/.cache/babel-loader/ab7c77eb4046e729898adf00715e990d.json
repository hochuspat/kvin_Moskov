{"ast":null,"code":"import { _ as _sliced_to_array } from \"@swc/helpers/_/_sliced_to_array\";\nimport * as React from \"react\";\nimport { canUseDOM, hasHover as hasHoverLib, hasMouse as hasPointerLib } from \"@vkontakte/vkjs\";\nimport { AdaptivityContext } from \"../components/AdaptivityProvider/AdaptivityContext\";\nimport { getOrDefault } from \"../helpers/getOrDefault\";\nimport { getSizeX, getSizeY, getViewHeightByMediaQueries, getViewWidthByMediaQueries, tryToCheckIsDesktop } from \"../lib/adaptivity\";\nimport { matchMediaListAddListener, matchMediaListRemoveListener } from \"../lib/matchMedia\";\nimport { useMediaQueries } from \"./useMediaQueries\";\nimport { usePlatform } from \"./usePlatform\";\n/**\n * Высчитывает и возвращает параметры адаптивности при изменении вьюпорта.\n *\n * Берёт в приоритет значения из `AdaptivityContext`.\n *\n * > ⚠ SSR\n * >\n * > Во избежания ошибок при гидратации, не используйте данный хук, если есть вероятность, что компонент будет отрендерен\n * > на стороне сервера.\n * >\n * > Лучше всего использовать для всплывающих окон, т.к. они вызываются только после загрузки\n * > страницы либо пользователем, либо программно.\n */\n\nexport var useAdaptivityWithJSMediaQueries = function () {\n  if (!canUseDOM) {\n    console.error(\"[useAdaptivityWithJSMediaQueries] Похоже, вы пытаетесь использовать хук вне браузера.\\n\\nПостарайтесь этого избегать, чтобы не было ошибок при гидратации: при SSR нет информации о размерах экрана.\\n\\nИспользуйте CSS Media Query или библиотеку по типу https://github.com/artsy/fresnel.\");\n  }\n\n  var _React_useContext = React.useContext(AdaptivityContext),\n      viewWidthContext = _React_useContext.viewWidth,\n      viewHeightContext = _React_useContext.viewHeight,\n      sizeXContext = _React_useContext.sizeX,\n      sizeYContext = _React_useContext.sizeY,\n      hasPointerContext = _React_useContext.hasPointer,\n      hasHoverContext = _React_useContext.hasHover;\n\n  var platform = usePlatform();\n  var mediaQueries = useMediaQueries();\n\n  var _React_useState = _sliced_to_array(React.useState(function () {\n    return [getOrDefault(viewWidthContext, getViewWidthByMediaQueries(mediaQueries)), getOrDefault(viewHeightContext, getViewHeightByMediaQueries(mediaQueries))];\n  }), 2),\n      _React_useState_ = _sliced_to_array(_React_useState[0], 2),\n      viewWidthLocal = _React_useState_[0],\n      viewHeightLocal = _React_useState_[1],\n      setViewSizeLocal = _React_useState[1];\n\n  var adaptivityProps = React.useMemo(function () {\n    var hasPointer = getOrDefault(hasPointerContext, hasPointerLib);\n    var hasHover = getOrDefault(hasHoverContext, hasHoverLib);\n    var viewWidth = getOrDefault(viewWidthContext, viewWidthLocal);\n    var viewHeight = getOrDefault(viewHeightContext, viewHeightLocal);\n    var sizeX = getOrDefault(sizeXContext, getSizeX(viewWidth));\n    var sizeY = getOrDefault(sizeYContext, getSizeY(viewWidth, viewHeight, hasPointer));\n    var isDesktop = tryToCheckIsDesktop(viewWidth, viewHeight, hasPointer, platform);\n    return {\n      viewWidth: viewWidth,\n      viewHeight: viewHeight,\n      sizeX: sizeX,\n      sizeY: sizeY,\n      hasPointer: hasPointer,\n      hasHover: hasHover,\n      isDesktop: isDesktop\n    };\n  }, [viewWidthLocal, viewHeightLocal, viewWidthContext, viewHeightContext, sizeXContext, sizeYContext, hasPointerContext, hasHoverContext, platform]);\n  React.useEffect(function () {\n    var handleMediaQuery = function () {\n      setViewSizeLocal(function (prevSizeLocal) {\n        var newViewWidthLocal = getOrDefault(viewWidthContext, getViewWidthByMediaQueries(mediaQueries));\n        var newViewHeightLocal = getOrDefault(viewHeightContext, getViewHeightByMediaQueries(mediaQueries));\n\n        var _prevSizeLocal = _sliced_to_array(prevSizeLocal, 2),\n            prevViewWidthLocal = _prevSizeLocal[0],\n            prevViewHeightLocal = _prevSizeLocal[1];\n\n        if (prevViewWidthLocal !== newViewWidthLocal || prevViewHeightLocal !== newViewHeightLocal) {\n          return [newViewWidthLocal, newViewHeightLocal];\n        }\n\n        return prevSizeLocal;\n      });\n    };\n\n    if (!viewWidthContext) {\n      [mediaQueries.desktopPlus, mediaQueries.tablet, mediaQueries.smallTablet, mediaQueries.mobile].forEach(function (matchMediaListener) {\n        return matchMediaListAddListener(matchMediaListener, handleMediaQuery);\n      });\n    }\n\n    if (!viewHeightContext) {\n      [mediaQueries.mediumHeight, mediaQueries.mobileLandscapeHeight].forEach(function (matchMediaListener) {\n        return matchMediaListAddListener(matchMediaListener, handleMediaQuery);\n      });\n    }\n\n    return function () {\n      [mediaQueries.desktopPlus, mediaQueries.tablet, mediaQueries.smallTablet, mediaQueries.mobile, mediaQueries.mediumHeight, mediaQueries.mobileLandscapeHeight].forEach(function (matchMediaListener) {\n        return matchMediaListRemoveListener(matchMediaListener, handleMediaQuery);\n      });\n    };\n  }, [mediaQueries, viewWidthContext, viewHeightContext]);\n  return adaptivityProps;\n};","map":{"version":3,"mappings":"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","names":["React","canUseDOM","hasHover","hasHoverLib","hasMouse","hasPointerLib","AdaptivityContext","getOrDefault","getSizeX","getSizeY","getViewHeightByMediaQueries","getViewWidthByMediaQueries","tryToCheckIsDesktop","matchMediaListAddListener","matchMediaListRemoveListener","useMediaQueries","usePlatform","useAdaptivityWithJSMediaQueries","console","error","useContext","viewWidth","viewWidthContext","viewHeight","viewHeightContext","sizeX","sizeXContext","sizeY","sizeYContext","hasPointer","hasPointerContext","hasHoverContext","platform","mediaQueries","useState","viewWidthLocal","viewHeightLocal","setViewSizeLocal","adaptivityProps","useMemo","isDesktop","useEffect","handleMediaQuery","prevSizeLocal","newViewWidthLocal","newViewHeightLocal","prevViewWidthLocal","prevViewHeightLocal","desktopPlus","tablet","smallTablet","mobile","forEach","matchMediaListener","mediumHeight","mobileLandscapeHeight"],"sources":["C:\\Users\\kulag\\vk\\Ability\\node_modules\\@vkontakte\\vkui\\src\\hooks\\useAdaptivityWithJSMediaQueries.ts"],"sourcesContent":["import * as React from 'react';\nimport { canUseDOM, hasHover as hasHoverLib, hasMouse as hasPointerLib } from '@vkontakte/vkjs';\nimport {\n  AdaptivityContext,\n  type AdaptivityProps as BaseAdaptivityProps,\n} from '../components/AdaptivityProvider/AdaptivityContext';\nimport { getOrDefault } from '../helpers/getOrDefault';\nimport {\n  getSizeX,\n  getSizeY,\n  getViewHeightByMediaQueries,\n  getViewWidthByMediaQueries,\n  tryToCheckIsDesktop,\n} from '../lib/adaptivity';\nimport { matchMediaListAddListener, matchMediaListRemoveListener } from '../lib/matchMedia';\nimport { useMediaQueries } from './useMediaQueries';\nimport { usePlatform } from './usePlatform';\n\nexport interface UseAdaptivityWithJSMediaQueries extends Required<BaseAdaptivityProps> {\n  isDesktop: boolean;\n}\n\n/**\n * Высчитывает и возвращает параметры адаптивности при изменении вьюпорта.\n *\n * Берёт в приоритет значения из `AdaptivityContext`.\n *\n * > ⚠ SSR\n * >\n * > Во избежания ошибок при гидратации, не используйте данный хук, если есть вероятность, что компонент будет отрендерен\n * > на стороне сервера.\n * >\n * > Лучше всего использовать для всплывающих окон, т.к. они вызываются только после загрузки\n * > страницы либо пользователем, либо программно.\n */\nexport const useAdaptivityWithJSMediaQueries = (): UseAdaptivityWithJSMediaQueries => {\n  if (!canUseDOM) {\n    console.error(`[useAdaptivityWithJSMediaQueries] Похоже, вы пытаетесь использовать хук вне браузера.\n\nПостарайтесь этого избегать, чтобы не было ошибок при гидратации: при SSR нет информации о размерах экрана.\n\nИспользуйте CSS Media Query или библиотеку по типу https://github.com/artsy/fresnel.`);\n  }\n\n  const {\n    viewWidth: viewWidthContext,\n    viewHeight: viewHeightContext,\n    sizeX: sizeXContext,\n    sizeY: sizeYContext,\n    hasPointer: hasPointerContext,\n    hasHover: hasHoverContext,\n  } = React.useContext(AdaptivityContext);\n\n  const platform = usePlatform();\n  const mediaQueries = useMediaQueries();\n\n  const [[viewWidthLocal, viewHeightLocal], setViewSizeLocal] = React.useState(() => [\n    getOrDefault(viewWidthContext, getViewWidthByMediaQueries(mediaQueries)),\n    getOrDefault(viewHeightContext, getViewHeightByMediaQueries(mediaQueries)),\n  ]);\n\n  const adaptivityProps = React.useMemo(() => {\n    const hasPointer = getOrDefault(hasPointerContext, hasPointerLib);\n    const hasHover = getOrDefault(hasHoverContext, hasHoverLib);\n    const viewWidth = getOrDefault(viewWidthContext, viewWidthLocal);\n    const viewHeight = getOrDefault(viewHeightContext, viewHeightLocal);\n    const sizeX = getOrDefault(sizeXContext, getSizeX(viewWidth));\n    const sizeY = getOrDefault(sizeYContext, getSizeY(viewWidth, viewHeight, hasPointer));\n    const isDesktop = tryToCheckIsDesktop(viewWidth, viewHeight, hasPointer, platform);\n\n    return {\n      viewWidth,\n      viewHeight,\n      sizeX,\n      sizeY,\n      hasPointer,\n      hasHover,\n      isDesktop,\n    };\n  }, [\n    viewWidthLocal,\n    viewHeightLocal,\n    viewWidthContext,\n    viewHeightContext,\n    sizeXContext,\n    sizeYContext,\n    hasPointerContext,\n    hasHoverContext,\n    platform,\n  ]);\n\n  React.useEffect(() => {\n    const handleMediaQuery = () => {\n      setViewSizeLocal((prevSizeLocal) => {\n        const newViewWidthLocal = getOrDefault(\n          viewWidthContext,\n          getViewWidthByMediaQueries(mediaQueries),\n        );\n        const newViewHeightLocal = getOrDefault(\n          viewHeightContext,\n          getViewHeightByMediaQueries(mediaQueries),\n        );\n\n        const [prevViewWidthLocal, prevViewHeightLocal] = prevSizeLocal;\n\n        if (\n          prevViewWidthLocal !== newViewWidthLocal ||\n          prevViewHeightLocal !== newViewHeightLocal\n        ) {\n          return [newViewWidthLocal, newViewHeightLocal];\n        }\n\n        return prevSizeLocal;\n      });\n    };\n\n    if (!viewWidthContext) {\n      [\n        mediaQueries.desktopPlus,\n        mediaQueries.tablet,\n        mediaQueries.smallTablet,\n        mediaQueries.mobile,\n      ].forEach((matchMediaListener) =>\n        matchMediaListAddListener(matchMediaListener, handleMediaQuery),\n      );\n    }\n\n    if (!viewHeightContext) {\n      [mediaQueries.mediumHeight, mediaQueries.mobileLandscapeHeight].forEach(\n        (matchMediaListener) => matchMediaListAddListener(matchMediaListener, handleMediaQuery),\n      );\n    }\n\n    return () => {\n      [\n        mediaQueries.desktopPlus,\n        mediaQueries.tablet,\n        mediaQueries.smallTablet,\n        mediaQueries.mobile,\n        mediaQueries.mediumHeight,\n        mediaQueries.mobileLandscapeHeight,\n      ].forEach((matchMediaListener) =>\n        matchMediaListRemoveListener(matchMediaListener, handleMediaQuery),\n      );\n    };\n  }, [mediaQueries, viewWidthContext, viewHeightContext]);\n\n  return adaptivityProps;\n};\n"]},"metadata":{},"sourceType":"module"}