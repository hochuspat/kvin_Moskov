{"ast":null,"code":"import { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_spread_props } from \"@swc/helpers/_/_object_spread_props\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport { _ as _sliced_to_array } from \"@swc/helpers/_/_sliced_to_array\";\nimport { _ as _type_of } from \"@swc/helpers/_/_type_of\";\nimport * as React from \"react\";\nimport { classNames, noop } from \"@vkontakte/vkjs\";\nimport { useAdaptivity } from \"../../hooks/useAdaptivity\";\nimport { useChipsInput } from \"../../hooks/useChipsInput\";\nimport { useExternRef } from \"../../hooks/useExternRef\";\nimport { SizeType } from \"../../lib/adaptivity\";\nimport { Chip } from \"../Chip/Chip\";\nimport { Text } from \"../Typography/Text/Text\";\nexport var chipsInputDefaultProps = {\n  onChange: noop,\n  onInputChange: noop,\n  onKeyDown: noop,\n  onBlur: noop,\n  onFocus: noop,\n  value: [],\n  inputValue: \"\",\n  inputAriaLabel: \"Введите ваше значение...\",\n  getOptionValue: function (option) {\n    return option.value;\n  },\n  getOptionLabel: function (option) {\n    return option.label;\n  },\n  getNewOptionData: function (_, label) {\n    return {\n      value: label,\n      label: label\n    };\n  },\n  renderChip: function renderChip(props) {\n    if (!props) {\n      return null;\n    }\n\n    var disabled = props.disabled,\n        value = props.value,\n        label = props.label,\n        rest = _object_without_properties(props, [\"disabled\", \"value\", \"label\"]);\n\n    return /*#__PURE__*/React.createElement(Chip, _object_spread({\n      value: value,\n      removable: !disabled\n    }, rest), label);\n  },\n  addOnBlur: false\n};\nexport var ChipsInputBase = function (props) {\n  var propsWithDefault = _object_spread({}, chipsInputDefaultProps, props);\n\n  var style = propsWithDefault.style,\n      className = propsWithDefault.className,\n      getRootRef = propsWithDefault.getRootRef,\n      value = propsWithDefault.value,\n      onChange = propsWithDefault.onChange,\n      onInputChange = propsWithDefault.onInputChange,\n      onKeyDown = propsWithDefault.onKeyDown,\n      onBlur = propsWithDefault.onBlur,\n      onFocus = propsWithDefault.onFocus,\n      children = propsWithDefault.children,\n      inputValue = propsWithDefault.inputValue,\n      getRef = propsWithDefault.getRef,\n      placeholder = propsWithDefault.placeholder,\n      getOptionValue = propsWithDefault.getOptionValue,\n      getOptionLabel = propsWithDefault.getOptionLabel,\n      getNewOptionData = propsWithDefault.getNewOptionData,\n      renderChip = propsWithDefault.renderChip,\n      inputAriaLabel = propsWithDefault.inputAriaLabel,\n      addOnBlur = propsWithDefault.addOnBlur,\n      restProps = _object_without_properties(propsWithDefault, [\"style\", \"className\", \"getRootRef\", \"value\", \"onChange\", \"onInputChange\", \"onKeyDown\", \"onBlur\", \"onFocus\", \"children\", \"inputValue\", \"getRef\", \"placeholder\", \"getOptionValue\", \"getOptionLabel\", \"getNewOptionData\", \"renderChip\", \"inputAriaLabel\", \"addOnBlur\"]);\n\n  var sizeY = useAdaptivity().sizeY;\n\n  var _React_useState = _sliced_to_array(React.useState(false), 2),\n      focused = _React_useState[0],\n      setFocused = _React_useState[1];\n\n  var _useChipsInput = useChipsInput(propsWithDefault),\n      fieldValue = _useChipsInput.fieldValue,\n      addOptionFromInput = _useChipsInput.addOptionFromInput,\n      removeOption = _useChipsInput.removeOption,\n      selectedOptions = _useChipsInput.selectedOptions,\n      handleInputChange = _useChipsInput.handleInputChange;\n\n  var inputRef = useExternRef(getRef);\n  var isDisabled = restProps.disabled || restProps.readOnly;\n\n  var handleKeyDown = function (e) {\n    if (isDisabled) {\n      e.preventDefault();\n      return;\n    }\n\n    onKeyDown(e);\n\n    if (e.key === \"Backspace\" && !e.defaultPrevented && !fieldValue && selectedOptions.length) {\n      removeOption(getOptionValue(selectedOptions[selectedOptions.length - 1]));\n      e.preventDefault();\n    }\n\n    if (e.key === \"Enter\" && !e.defaultPrevented && fieldValue) {\n      addOptionFromInput();\n      e.preventDefault();\n    }\n  };\n\n  var handleBlur = function (e) {\n    if (focused) {\n      setFocused(false);\n    }\n\n    onBlur(e);\n\n    if (addOnBlur && !e.defaultPrevented) {\n      addOptionFromInput();\n    }\n  };\n\n  var handleFocus = function (e) {\n    if (!focused) {\n      setFocused(true);\n    }\n\n    onFocus(e);\n  };\n\n  var handleChipRemove = function (_, value) {\n    if (value !== undefined) {\n      removeOption(value);\n    }\n  };\n\n  var handleClick = function (e) {\n    if (isDisabled) {\n      e.preventDefault();\n      return;\n    }\n\n    if ((inputRef === null || inputRef === void 0 ? void 0 : inputRef.current) !== null && !focused) {\n      inputRef.current.focus();\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    onClick: handleClick,\n    role: \"presentation\",\n    style: style,\n    className: classNames(\"vkuiChipsInputBase\", sizeY === SizeType.COMPACT && \"vkuiChipsInputBase--sizeY-compact\", !selectedOptions.length && \"vkuiChipsInputBase--hasPlaceholder\", className),\n    ref: getRootRef\n  }, selectedOptions.map(function (option) {\n    var value = getOptionValue(option);\n    var label = getOptionLabel(option);\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      key: \"\".concat(typeof value === \"undefined\" ? \"undefined\" : _type_of(value), \"-\").concat(value)\n    }, renderChip({\n      option: option,\n      value: value,\n      label: label,\n      onRemove: handleChipRemove,\n      disabled: Boolean(restProps.disabled),\n      className: \"vkuiChipsInputBase__chip\"\n    }));\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    className: \"vkuiChipsInputBase__label\",\n    \"aria-label\": inputAriaLabel\n  }, /*#__PURE__*/React.createElement(Text, _object_spread_props(_object_spread({\n    Component: \"input\",\n    type: \"text\",\n    autoCapitalize: \"none\",\n    autoComplete: \"off\",\n    autoCorrect: \"off\",\n    spellCheck: false,\n    \"aria-autocomplete\": \"list\",\n    className: \"vkuiChipsInputBase__el\"\n  }, restProps), {\n    getRootRef: inputRef,\n    value: fieldValue,\n    onChange: handleInputChange,\n    onKeyDown: handleKeyDown,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    placeholder: selectedOptions.length ? undefined : placeholder\n  }))));\n};","map":{"version":3,"mappings":"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","names":["React","classNames","noop","useAdaptivity","useChipsInput","useExternRef","SizeType","Chip","Text","chipsInputDefaultProps","onChange","onInputChange","onKeyDown","onBlur","onFocus","value","inputValue","inputAriaLabel","getOptionValue","option","getOptionLabel","label","getNewOptionData","_","renderChip","props","disabled","rest","removable","addOnBlur","ChipsInputBase","propsWithDefault","_object_spread","style","className","getRootRef","children","getRef","placeholder","restProps","sizeY","useState","focused","setFocused","fieldValue","addOptionFromInput","removeOption","selectedOptions","handleInputChange","inputRef","isDisabled","readOnly","handleKeyDown","e","preventDefault","key","defaultPrevented","length","handleBlur","handleFocus","handleChipRemove","undefined","handleClick","current","focus","div","onClick","role","COMPACT","ref","map","Fragment","concat","onRemove","Boolean","aria-label","Component","type","autoCapitalize","autoComplete","autoCorrect","spellCheck","aria-autocomplete"],"sources":["C:\\Users\\kulag\\vk\\Ability\\node_modules\\@vkontakte\\vkui\\src\\components\\ChipsInputBase\\ChipsInputBase.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNames, noop } from '@vkontakte/vkjs';\nimport { useAdaptivity } from '../../hooks/useAdaptivity';\nimport { useChipsInput } from '../../hooks/useChipsInput';\nimport { useExternRef } from '../../hooks/useExternRef';\nimport { SizeType } from '../../lib/adaptivity';\nimport { HasAlign, HasRef, HasRootRef } from '../../types';\nimport { Chip, ChipOption, ChipValue, RenderChip } from '../Chip/Chip';\nimport { Text } from '../Typography/Text/Text';\nimport styles from './ChipsInputBase.module.css';\n\nexport interface ChipsInputBaseProps<Option extends ChipOption>\n  extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'value' | 'onChange'>,\n    HasRef<HTMLInputElement>,\n    HasRootRef<HTMLDivElement>,\n    HasAlign {\n  value: Option[];\n  inputValue?: string;\n  onChange?: (o: Option[]) => void;\n  onInputChange?: (e?: React.ChangeEvent<HTMLInputElement>) => void;\n  getOptionValue?: (o?: Option) => ChipValue;\n  getOptionLabel?: (o?: Option) => string;\n  getNewOptionData?: (v?: ChipValue, l?: string) => Option;\n  renderChip?: (props?: RenderChip<Option>) => React.ReactNode;\n  inputAriaLabel?: string;\n  /**\n   * Добавляет значение в список на событие `onBlur`\n   */\n  addOnBlur?: boolean;\n}\n\nexport const chipsInputDefaultProps: ChipsInputBaseProps<any> = {\n  onChange: noop,\n  onInputChange: noop,\n  onKeyDown: noop,\n  onBlur: noop,\n  onFocus: noop,\n  value: [],\n  inputValue: '',\n  inputAriaLabel: 'Введите ваше значение...',\n  getOptionValue: (option) => option.value,\n  getOptionLabel: (option) => option.label,\n  getNewOptionData: (_, label) => ({\n    value: label,\n    label,\n  }),\n  renderChip(props) {\n    if (!props) {\n      return null;\n    }\n\n    const { disabled, value, label, ...rest } = props;\n    return (\n      <Chip value={value} removable={!disabled} {...rest}>\n        {label}\n      </Chip>\n    );\n  },\n  addOnBlur: false,\n};\n\nexport const ChipsInputBase = <Option extends ChipOption>(props: ChipsInputBaseProps<Option>) => {\n  const propsWithDefault = { ...chipsInputDefaultProps, ...props };\n  const {\n    style,\n    className,\n    getRootRef,\n    value,\n    onChange,\n    onInputChange,\n    onKeyDown,\n    onBlur,\n    onFocus,\n    children,\n    inputValue,\n    getRef,\n    placeholder,\n    getOptionValue,\n    getOptionLabel,\n    getNewOptionData,\n    renderChip,\n    inputAriaLabel,\n    addOnBlur,\n    ...restProps\n  } = propsWithDefault;\n  const { sizeY } = useAdaptivity();\n\n  const [focused, setFocused] = React.useState(false);\n  const { fieldValue, addOptionFromInput, removeOption, selectedOptions, handleInputChange } =\n    useChipsInput(propsWithDefault);\n  const inputRef = useExternRef(getRef);\n\n  const isDisabled = restProps.disabled || restProps.readOnly;\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (isDisabled) {\n      e.preventDefault();\n      return;\n    }\n\n    onKeyDown!(e);\n\n    if (e.key === 'Backspace' && !e.defaultPrevented && !fieldValue && selectedOptions.length) {\n      removeOption(getOptionValue!(selectedOptions[selectedOptions.length - 1]));\n      e.preventDefault();\n    }\n\n    if (e.key === 'Enter' && !e.defaultPrevented && fieldValue) {\n      addOptionFromInput();\n      e.preventDefault();\n    }\n  };\n\n  const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n    if (focused) {\n      setFocused(false);\n    }\n    onBlur!(e);\n\n    if (addOnBlur && !e.defaultPrevented) {\n      addOptionFromInput();\n    }\n  };\n\n  const handleFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n    if (!focused) {\n      setFocused(true);\n    }\n    onFocus!(e);\n  };\n\n  const handleChipRemove = (_: React.MouseEvent | undefined, value: ChipValue | undefined) => {\n    if (value !== undefined) {\n      removeOption(value);\n    }\n  };\n\n  const handleClick = (e: React.MouseEvent<HTMLDivElement>) => {\n    if (isDisabled) {\n      e.preventDefault();\n      return;\n    }\n\n    if (inputRef?.current !== null && !focused) {\n      inputRef.current.focus();\n    }\n  };\n\n  return (\n    <div\n      onClick={handleClick}\n      role=\"presentation\"\n      style={style}\n      className={classNames(\n        styles['ChipsInputBase'],\n        sizeY === SizeType.COMPACT && styles['ChipsInputBase--sizeY-compact'],\n        !selectedOptions.length && styles['ChipsInputBase--hasPlaceholder'],\n        className,\n      )}\n      ref={getRootRef}\n    >\n      {selectedOptions.map((option: Option) => {\n        const value = getOptionValue!(option);\n        const label = getOptionLabel!(option);\n\n        return (\n          <React.Fragment key={`${typeof value}-${value}`}>\n            {renderChip!({\n              option,\n              value,\n              label,\n              onRemove: handleChipRemove,\n              disabled: Boolean(restProps.disabled),\n              className: styles['ChipsInputBase__chip'],\n            })}\n          </React.Fragment>\n        );\n      })}\n      <label className={styles['ChipsInputBase__label']} aria-label={inputAriaLabel}>\n        <Text\n          Component=\"input\"\n          type=\"text\"\n          autoCapitalize=\"none\"\n          autoComplete=\"off\"\n          autoCorrect=\"off\"\n          spellCheck={false}\n          aria-autocomplete=\"list\"\n          className={styles['ChipsInputBase__el']}\n          {...restProps}\n          getRootRef={inputRef}\n          value={fieldValue}\n          onChange={handleInputChange}\n          onKeyDown={handleKeyDown}\n          onFocus={handleFocus}\n          onBlur={handleBlur}\n          placeholder={selectedOptions.length ? undefined : placeholder}\n        />\n      </label>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}