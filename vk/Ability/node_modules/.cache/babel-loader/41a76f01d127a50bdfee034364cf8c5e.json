{"ast":null,"code":"import { _ as _sliced_to_array } from \"@swc/helpers/_/_sliced_to_array\";\nimport * as React from \"react\";\nexport var useDraggable = function (param) {\n  var rootElRef = param.rootElRef,\n      onDragFinish = param.onDragFinish;\n\n  var _React_useState = _sliced_to_array(React.useState(false), 2),\n      dragging = _React_useState[0],\n      setDragging = _React_useState[1];\n\n  var _React_useState1 = _sliced_to_array(React.useState([]), 2),\n      siblings = _React_useState1[0],\n      setSiblings = _React_useState1[1];\n\n  var _React_useState2 = _sliced_to_array(React.useState(0), 2),\n      dragStartIndex = _React_useState2[0],\n      setDragStartIndex = _React_useState2[1];\n\n  var _React_useState3 = _sliced_to_array(React.useState(0), 2),\n      dragEndIndex = _React_useState3[0],\n      setDragEndIndex = _React_useState3[1];\n\n  var _React_useState4 = _sliced_to_array(React.useState(0), 2),\n      dragShift = _React_useState4[0],\n      setDragShift = _React_useState4[1];\n\n  var _React_useState5 = _sliced_to_array(React.useState(undefined), 2),\n      dragDirection = _React_useState5[0],\n      setDragDirection = _React_useState5[1];\n\n  var onDragStart = function (event) {\n    var _rootEl_parentElement;\n\n    var rootEl = rootElRef.current;\n\n    if (!rootEl) {\n      return;\n    }\n\n    event.originalEvent.stopPropagation();\n    event.originalEvent.preventDefault();\n    setDragging(true);\n    var _siblings = [];\n\n    if ((_rootEl_parentElement = rootEl.parentElement) === null || _rootEl_parentElement === void 0 ? void 0 : _rootEl_parentElement.childNodes) {\n      _siblings = Array.from(rootEl.parentElement.children);\n    }\n\n    var idx = _siblings.indexOf(rootEl);\n\n    setDragStartIndex(idx);\n    setDragEndIndex(idx);\n    setSiblings(_siblings);\n    setDragShift(0);\n  };\n\n  var onDragMove = function (event) {\n    event.originalEvent.stopPropagation();\n    event.originalEvent.preventDefault();\n    var rootEl = rootElRef.current;\n\n    if (rootEl) {\n      rootEl.style.transform = \"translateY(\".concat(event.shiftY, \"px)\");\n      var rootGesture = rootEl.getBoundingClientRect();\n      setDragDirection(dragShift - event.shiftY < 0 ? \"down\" : \"up\");\n      setDragShift(event.shiftY);\n      setDragEndIndex(dragStartIndex);\n      siblings.forEach(function (sibling, siblingIndex) {\n        var siblingGesture = sibling.getBoundingClientRect();\n        var siblingHalfHeight = siblingGesture.height / 2;\n        var rootOverSibling = rootGesture.bottom > siblingGesture.top + siblingHalfHeight;\n        var rootUnderSibling = rootGesture.top < siblingGesture.bottom - siblingHalfHeight;\n\n        if (dragStartIndex < siblingIndex) {\n          if (rootOverSibling) {\n            if (dragDirection === \"down\") {\n              sibling.style.transform = \"translateY(-100%)\";\n            }\n\n            setDragEndIndex(function (dragEndIndex) {\n              return dragEndIndex + 1;\n            });\n          }\n\n          if (rootUnderSibling && dragDirection === \"up\") {\n            sibling.style.transform = \"translateY(0)\";\n          }\n        } else if (dragStartIndex > siblingIndex) {\n          if (rootUnderSibling) {\n            if (dragDirection === \"up\") {\n              sibling.style.transform = \"translateY(100%)\";\n            }\n\n            setDragEndIndex(function (dragEndIndex) {\n              return dragEndIndex - 1;\n            });\n          }\n\n          if (rootOverSibling && dragDirection === \"down\") {\n            sibling.style.transform = \"translateY(0)\";\n          }\n        }\n      });\n    }\n  };\n\n  var onDragEnd = function (event) {\n    event.originalEvent.stopPropagation();\n    event.originalEvent.preventDefault();\n    var _ref = [dragStartIndex, dragEndIndex],\n        from = _ref[0],\n        to = _ref[1];\n    siblings.forEach(function (sibling) {\n      sibling.style.transform = \"\";\n    });\n    setSiblings([]);\n    setDragEndIndex(0);\n    setDragStartIndex(0);\n    setDragDirection(undefined);\n    setDragShift(0);\n    setDragging(false);\n    onDragFinish && onDragFinish({\n      from: from,\n      to: to\n    });\n  };\n\n  var useDraggableProps = {\n    onDragStart: onDragStart,\n    onDragMove: onDragMove,\n    onDragEnd: onDragEnd,\n    dragging: dragging\n  };\n  return useDraggableProps;\n};","map":{"version":3,"mappings":"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","names":["React","useDraggable","rootElRef","onDragFinish","useState","dragging","setDragging","siblings","setSiblings","dragStartIndex","setDragStartIndex","dragEndIndex","setDragEndIndex","dragShift","setDragShift","undefined","dragDirection","setDragDirection","onDragStart","event","rootEl","current","originalEvent","stopPropagation","preventDefault","_siblings","parentElement","childNodes","Array","from","children","idx","indexOf","onDragMove","style","transform","concat","shiftY","rootGesture","getBoundingClientRect","forEach","sibling","siblingIndex","siblingGesture","siblingHalfHeight","height","rootOverSibling","bottom","top","rootUnderSibling","onDragEnd","_ref","to","useDraggableProps"],"sources":["C:\\Users\\kulag\\vk\\Ability\\node_modules\\@vkontakte\\vkui\\src\\components\\Cell\\useDraggable.tsx"],"sourcesContent":["import * as React from 'react';\nimport { TouchEvent } from '../Touch/Touch';\nimport { CellProps } from './Cell';\n\nexport interface DraggableProps {\n  onDragStart(event: TouchEvent): void;\n  onDragEnd(event: TouchEvent): void;\n  onDragMove(event: TouchEvent): void;\n}\n\ninterface UseDraggableProps extends DraggableProps {\n  dragging: boolean;\n}\n\nexport const useDraggable = <T extends HTMLElement>({\n  rootElRef,\n  onDragFinish,\n}: Pick<CellProps, 'onDragFinish'> & {\n  rootElRef: React.MutableRefObject<T | null>;\n}) => {\n  const [dragging, setDragging] = React.useState<boolean>(false);\n\n  const [siblings, setSiblings] = React.useState<HTMLElement[]>([]);\n  const [dragStartIndex, setDragStartIndex] = React.useState<number>(0);\n  const [dragEndIndex, setDragEndIndex] = React.useState<number>(0);\n  const [dragShift, setDragShift] = React.useState<number>(0);\n  const [dragDirection, setDragDirection] = React.useState<'down' | 'up' | undefined>(undefined);\n\n  const onDragStart = (event: TouchEvent) => {\n    const rootEl = rootElRef.current;\n    if (!rootEl) {\n      return;\n    }\n    event.originalEvent.stopPropagation();\n    event.originalEvent.preventDefault();\n\n    setDragging(true);\n\n    let _siblings: HTMLElement[] = [];\n    if (rootEl.parentElement?.childNodes) {\n      _siblings = Array.from(rootEl.parentElement.children) as HTMLElement[];\n    }\n    const idx = _siblings.indexOf(rootEl);\n\n    setDragStartIndex(idx);\n    setDragEndIndex(idx);\n    setSiblings(_siblings);\n    setDragShift(0);\n  };\n\n  const onDragMove = (event: TouchEvent) => {\n    event.originalEvent.stopPropagation();\n    event.originalEvent.preventDefault();\n\n    const rootEl = rootElRef.current;\n\n    if (rootEl) {\n      rootEl.style.transform = `translateY(${event.shiftY}px)`;\n      const rootGesture = rootEl.getBoundingClientRect();\n\n      setDragDirection(dragShift - event.shiftY < 0 ? 'down' : 'up');\n      setDragShift(event.shiftY);\n      setDragEndIndex(dragStartIndex);\n\n      siblings.forEach((sibling: HTMLElement, siblingIndex: number) => {\n        const siblingGesture = sibling.getBoundingClientRect();\n        const siblingHalfHeight = siblingGesture.height / 2;\n\n        const rootOverSibling = rootGesture.bottom > siblingGesture.top + siblingHalfHeight;\n        const rootUnderSibling = rootGesture.top < siblingGesture.bottom - siblingHalfHeight;\n\n        if (dragStartIndex < siblingIndex) {\n          if (rootOverSibling) {\n            if (dragDirection === 'down') {\n              sibling.style.transform = 'translateY(-100%)';\n            }\n\n            setDragEndIndex((dragEndIndex) => dragEndIndex + 1);\n          }\n          if (rootUnderSibling && dragDirection === 'up') {\n            sibling.style.transform = 'translateY(0)';\n          }\n        } else if (dragStartIndex > siblingIndex) {\n          if (rootUnderSibling) {\n            if (dragDirection === 'up') {\n              sibling.style.transform = 'translateY(100%)';\n            }\n\n            setDragEndIndex((dragEndIndex) => dragEndIndex - 1);\n          }\n          if (rootOverSibling && dragDirection === 'down') {\n            sibling.style.transform = 'translateY(0)';\n          }\n        }\n      });\n    }\n  };\n\n  const onDragEnd = (event: TouchEvent) => {\n    event.originalEvent.stopPropagation();\n    event.originalEvent.preventDefault();\n\n    const [from, to] = [dragStartIndex, dragEndIndex];\n\n    siblings.forEach((sibling: HTMLElement) => {\n      sibling.style.transform = '';\n    });\n\n    setSiblings([]);\n    setDragEndIndex(0);\n    setDragStartIndex(0);\n    setDragDirection(undefined);\n    setDragShift(0);\n\n    setDragging(false);\n\n    onDragFinish && onDragFinish({ from, to });\n  };\n\n  const useDraggableProps: UseDraggableProps = {\n    onDragStart,\n    onDragMove,\n    onDragEnd,\n    dragging,\n  };\n\n  return useDraggableProps;\n};\n"]},"metadata":{},"sourceType":"module"}