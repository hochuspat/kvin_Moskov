{"ast":null,"code":"import * as React from \"react\";\nimport { AdaptivityContext } from \"../../components/AdaptivityProvider/AdaptivityContext\";\nimport { usePlatform } from \"../usePlatform\";\nimport { deviceTypeClassNames, sizeXCompactClassNames, sizeXRegularClassNames, sizeYCompactClassNames, sizeYRegularClassNames, viewWidthClassNames } from \"./constants\";\nimport { getAdaptiveDeviceType, getAdaptiveSizeType, getAdaptiveViewWidth } from \"./helpers\";\nexport var useAdaptivityConditionalRender = function () {\n  var _React_useContext = React.useContext(AdaptivityContext),\n      sizeXContext = _React_useContext.sizeX,\n      sizeYContext = _React_useContext.sizeY,\n      viewWidthContext = _React_useContext.viewWidth,\n      viewHeightContext = _React_useContext.viewHeight,\n      hasPointerContext = _React_useContext.hasPointer;\n\n  var platform = usePlatform();\n  return React.useMemo(function () {\n    var sizeX = getAdaptiveSizeType(sizeXContext, sizeXCompactClassNames, sizeXRegularClassNames);\n    var sizeY = getAdaptiveSizeType(sizeYContext, sizeYCompactClassNames, sizeYRegularClassNames);\n    var viewWidth = getAdaptiveViewWidth(viewWidthContext, viewWidthClassNames);\n    var deviceType = getAdaptiveDeviceType(viewWidthContext, viewHeightContext, hasPointerContext, platform, deviceTypeClassNames);\n    return {\n      sizeX: sizeX,\n      sizeY: sizeY,\n      viewWidth: viewWidth,\n      deviceType: deviceType\n    };\n  }, [sizeXContext, sizeYContext, viewWidthContext, viewHeightContext, hasPointerContext, platform]);\n};","map":{"version":3,"mappings":"AAAA,YAAYA,KAAZ,MAAuB,OAAvB;AACA,SAASC,iBAAT,QAAkC,uDAAlC;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SACEC,oBADF,EAEEC,sBAFF,EAGEC,sBAHF,EAIEC,sBAJF,EAKEC,sBALF,EAMEC,mBANF,QAOO,aAPP;AAQA,SAASC,qBAAT,EAAgCC,mBAAhC,EAAqDC,oBAArD,QAAiF,WAAjF;AAGA,OAAO,IAAMC,iCAAiC;EAC5C,IAMIZ,0BAAMa,UAANb,CAAiBC,iBAAjBD,CANJ;EAAA,IACEc,YAAOC,GAKLf,kBALFc,KADF;EAAA,IAEEE,YAAOC,GAILjB,kBAJFgB,KAFF;EAAA,IAGEE,gBAAWC,GAGTnB,kBAHFkB,SAHF;EAAA,IAIEE,iBAAYC,GAEVrB,kBAFFoB,UAJF;EAAA,IAKEE,iBAAYC,GACVvB,kBADFsB,UALF;;EAOA,IAAME,WAAWtB,aAAjB;EAEA,OAAOF,MAAMyB,OAANzB,CAAc;IACnB,IAAMc,QAAQJ,oBAAoBK,YAApBL,EAAkCN,sBAAlCM,EAA0DL,sBAA1DK,CAAd;IACA,IAAMM,QAAQN,oBAAoBO,YAApBP,EAAkCJ,sBAAlCI,EAA0DH,sBAA1DG,CAAd;IACA,IAAMQ,YAAYP,qBAAqBQ,gBAArBR,EAAuCH,mBAAvCG,CAAlB;IACA,IAAMe,aAAajB,sBACjBU,gBADiBV,EAEjBY,iBAFiBZ,EAGjBc,iBAHiBd,EAIjBe,QAJiBf,EAKjBN,oBALiBM,CAAnB;IAOA,OAAO;MACLK,YADK;MAELE,YAFK;MAGLE,oBAHK;MAILQ;IAJK,CAAP;EAMF,CAjBO1B,EAiBJ,CACDe,YADC,EAEDE,YAFC,EAGDE,gBAHC,EAIDE,iBAJC,EAKDE,iBALC,EAMDC,QANC,CAjBIxB,CAAP;AAyBF,CAnCO","names":["React","AdaptivityContext","usePlatform","deviceTypeClassNames","sizeXCompactClassNames","sizeXRegularClassNames","sizeYCompactClassNames","sizeYRegularClassNames","viewWidthClassNames","getAdaptiveDeviceType","getAdaptiveSizeType","getAdaptiveViewWidth","useAdaptivityConditionalRender","useContext","sizeX","sizeXContext","sizeY","sizeYContext","viewWidth","viewWidthContext","viewHeight","viewHeightContext","hasPointer","hasPointerContext","platform","useMemo","deviceType"],"sources":["C:\\Users\\kulag\\vk\\Ability\\node_modules\\@vkontakte\\vkui\\src\\hooks\\useAdaptivityConditionalRender\\useAdaptivityConditionalRender.tsx"],"sourcesContent":["import * as React from 'react';\nimport { AdaptivityContext } from '../../components/AdaptivityProvider/AdaptivityContext';\nimport { usePlatform } from '../usePlatform';\nimport {\n  deviceTypeClassNames,\n  sizeXCompactClassNames,\n  sizeXRegularClassNames,\n  sizeYCompactClassNames,\n  sizeYRegularClassNames,\n  viewWidthClassNames,\n} from './constants';\nimport { getAdaptiveDeviceType, getAdaptiveSizeType, getAdaptiveViewWidth } from './helpers';\nimport type { UseAdaptivityConditionalRender } from './types';\n\nexport const useAdaptivityConditionalRender = (): UseAdaptivityConditionalRender => {\n  const {\n    sizeX: sizeXContext,\n    sizeY: sizeYContext,\n    viewWidth: viewWidthContext,\n    viewHeight: viewHeightContext,\n    hasPointer: hasPointerContext,\n  } = React.useContext(AdaptivityContext);\n  const platform = usePlatform();\n\n  return React.useMemo(() => {\n    const sizeX = getAdaptiveSizeType(sizeXContext, sizeXCompactClassNames, sizeXRegularClassNames);\n    const sizeY = getAdaptiveSizeType(sizeYContext, sizeYCompactClassNames, sizeYRegularClassNames);\n    const viewWidth = getAdaptiveViewWidth(viewWidthContext, viewWidthClassNames);\n    const deviceType = getAdaptiveDeviceType(\n      viewWidthContext,\n      viewHeightContext,\n      hasPointerContext,\n      platform,\n      deviceTypeClassNames,\n    );\n    return {\n      sizeX,\n      sizeY,\n      viewWidth,\n      deviceType,\n    };\n  }, [\n    sizeXContext,\n    sizeYContext,\n    viewWidthContext,\n    viewHeightContext,\n    hasPointerContext,\n    platform,\n  ]);\n};\n"]},"metadata":{},"sourceType":"module"}