{"ast":null,"code":"import { _ as _sliced_to_array } from \"@swc/helpers/_/_sliced_to_array\";\nimport * as React from \"react\";\nimport { useTimeout } from \"../../hooks/useTimeout\";\n/**\n * Хук, который позволяет управлять видимостью ползунка скроллбара.\n * @param autoHideScrollbar - скрывать ли ползунок скроллбара\n * @param autoHideScrollbarDelay - через какое кол-во миллисекунд ползунок скроллбара скрывается\n * @returns Объект, содержащий параметры, которые позволяют управлять видимостью ползунка\n */\n\nexport var useTrackerVisibility = function () {\n  var autoHideScrollbar = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false,\n      autoHideScrollbarDelay = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 500;\n\n  var _React_useState = _sliced_to_array(React.useState(!autoHideScrollbar), 2),\n      trackerVisible = _React_useState[0],\n      setTrackerVisible = _React_useState[1];\n\n  var isMouseOver = React.useRef(false);\n  var isTrackerDragging = React.useRef(false);\n\n  var _useTimeout = useTimeout(function () {\n    return setTrackerVisible(false);\n  }, autoHideScrollbarDelay),\n      setVisibilityTimeout = _useTimeout.set,\n      clearVisibilityTimeout = _useTimeout.clear;\n\n  var onTrackerDragStart = React.useCallback(function () {\n    clearVisibilityTimeout();\n    setTrackerVisible(true);\n    isTrackerDragging.current = true;\n  }, [clearVisibilityTimeout]);\n  var onTrackerDragStop = React.useCallback(function () {\n    isTrackerDragging.current = false;\n\n    if (!isMouseOver.current) {\n      setVisibilityTimeout();\n    }\n  }, [setVisibilityTimeout, isMouseOver]);\n  /**\n  * Позволяет \"запланировать\" скрытие ползунка через delay миллисекунд. Если тайм-аут не успевает сработать, то каждый\n  * последующий вызов функции откладывает скрытие ползунка на delay миллисекунд\n  */\n\n  var queueTrackerVisibility = React.useCallback(function () {\n    if (isTrackerDragging.current) {\n      return;\n    }\n\n    setTrackerVisible(true);\n    setVisibilityTimeout();\n  }, [setVisibilityTimeout]);\n  var onTrackerMouseEnter = React.useCallback(function () {\n    clearVisibilityTimeout();\n    isMouseOver.current = true;\n    setTrackerVisible(true);\n  }, [clearVisibilityTimeout]);\n  var onTrackerMouseLeave = React.useCallback(function () {\n    queueTrackerVisibility();\n    isMouseOver.current = false;\n  }, [queueTrackerVisibility]);\n  var onTargetScroll = React.useCallback(function () {\n    queueTrackerVisibility();\n  }, [queueTrackerVisibility]);\n  return {\n    trackerVisible: trackerVisible,\n    onTrackerDragStart: onTrackerDragStart,\n    onTrackerDragStop: onTrackerDragStop,\n    onTrackerMouseEnter: onTrackerMouseEnter,\n    onTrackerMouseLeave: onTrackerMouseLeave,\n    onTargetScroll: onTargetScroll\n  };\n};","map":{"version":3,"mappings":";AAAA,YAAYA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,wBAA3B;AAEA;;;;;;;AAMA,OAAO,IAAMC,uBAAuB;MAClCC,qFAAoB;MACpBC,0FAAyB;;EAEzB,IAA4CJ,yCAAMK,QAANL,CAAe,CAACG,iBAAhBH,GAAgBG,CAAhBH,CAA5C;EAAA,IAAOM,iBAAqCN,kBAA5C;EAAA,IAAuBO,oBAAqBP,kBAA5C;;EACA,IAAMQ,cAAcR,MAAMS,MAANT,CAAa,KAAbA,CAApB;EACA,IAAMU,oBAAoBV,MAAMS,MAANT,CAAa,KAAbA,CAA1B;;EAEA,IAAqEC,yBACnE;WAAMM,kBAAkB,KAAlBA;GAD6DN,EAEnEG,sBAFmEH,CAArE;EAAA,IAAQU,oBAAKC,GAAwDX,YAA7DU,GAAR;EAAA,IAAmCE,sBAAOC,GAA2Bb,YAAlCY,KAAnC;;EAKA,IAAME,qBAAqBf,MAAMgB,WAANhB,CAAkB;IAC3Cc;IACAP,kBAAkB,IAAlBA;IACAG,kBAAkBO,OAAlBP,GAA4B,IAA5BA;EACF,CAJ2BV,EAIxB,CAACc,sBAAD,CAJwBd,CAA3B;EAMA,IAAMkB,oBAAoBlB,MAAMgB,WAANhB,CAAkB;IAC1CU,kBAAkBO,OAAlBP,GAA4B,KAA5BA;;IACA,IAAI,CAACF,YAAYS,OAAjB,EAA0B;MACxBL;IACF;EACF,CAL0BZ,EAKvB,CAACY,oBAAD,EAAuBJ,WAAvB,CALuBR,CAA1B;EAOA;;;;;EAIA,IAAMmB,yBAAyBnB,MAAMgB,WAANhB,CAAkB;IAC/C,IAAIU,kBAAkBO,OAAtB,EAA+B;MAC7B;IACF;;IACAV,kBAAkB,IAAlBA;IACAK;EACF,CAN+BZ,EAM5B,CAACY,oBAAD,CAN4BZ,CAA/B;EAQA,IAAMoB,sBAAsBpB,MAAMgB,WAANhB,CAAkB;IAC5Cc;IACAN,YAAYS,OAAZT,GAAsB,IAAtBA;IACAD,kBAAkB,IAAlBA;EACF,CAJ4BP,EAIzB,CAACc,sBAAD,CAJyBd,CAA5B;EAMA,IAAMqB,sBAAsBrB,MAAMgB,WAANhB,CAAkB;IAC5CmB;IACAX,YAAYS,OAAZT,GAAsB,KAAtBA;EACF,CAH4BR,EAGzB,CAACmB,sBAAD,CAHyBnB,CAA5B;EAKA,IAAMsB,iBAAiBtB,MAAMgB,WAANhB,CAAkB;IACvCmB;EACF,CAFuBnB,EAEpB,CAACmB,sBAAD,CAFoBnB,CAAvB;EAIA,OAAO;IACLM,8BADK;IAELS,sCAFK;IAGLG,oCAHK;IAILE,wCAJK;IAKLC,wCALK;IAMLC;EANK,CAAP;AAQF,CA7DO","names":["React","useTimeout","useTrackerVisibility","autoHideScrollbar","autoHideScrollbarDelay","useState","trackerVisible","setTrackerVisible","isMouseOver","useRef","isTrackerDragging","set","setVisibilityTimeout","clear","clearVisibilityTimeout","onTrackerDragStart","useCallback","current","onTrackerDragStop","queueTrackerVisibility","onTrackerMouseEnter","onTrackerMouseLeave","onTargetScroll"],"sources":["C:\\Users\\kulag\\vk\\Ability\\node_modules\\@vkontakte\\vkui\\src\\components\\CustomScrollView\\useTrackerVisibility.ts"],"sourcesContent":["import * as React from 'react';\nimport { useTimeout } from '../../hooks/useTimeout';\n\n/**\n * Хук, который позволяет управлять видимостью ползунка скроллбара.\n * @param autoHideScrollbar - скрывать ли ползунок скроллбара\n * @param autoHideScrollbarDelay - через какое кол-во миллисекунд ползунок скроллбара скрывается\n * @returns Объект, содержащий параметры, которые позволяют управлять видимостью ползунка\n */\nexport const useTrackerVisibility = (\n  autoHideScrollbar = false,\n  autoHideScrollbarDelay = 500,\n): TrackerVisibilityProps => {\n  const [trackerVisible, setTrackerVisible] = React.useState(!autoHideScrollbar);\n  const isMouseOver = React.useRef(false);\n  const isTrackerDragging = React.useRef(false);\n\n  const { set: setVisibilityTimeout, clear: clearVisibilityTimeout } = useTimeout(\n    () => setTrackerVisible(false),\n    autoHideScrollbarDelay,\n  );\n\n  const onTrackerDragStart = React.useCallback(() => {\n    clearVisibilityTimeout();\n    setTrackerVisible(true);\n    isTrackerDragging.current = true;\n  }, [clearVisibilityTimeout]);\n\n  const onTrackerDragStop = React.useCallback(() => {\n    isTrackerDragging.current = false;\n    if (!isMouseOver.current) {\n      setVisibilityTimeout();\n    }\n  }, [setVisibilityTimeout, isMouseOver]);\n\n  /**\n   * Позволяет \"запланировать\" скрытие ползунка через delay миллисекунд. Если тайм-аут не успевает сработать, то каждый\n   * последующий вызов функции откладывает скрытие ползунка на delay миллисекунд\n   */\n  const queueTrackerVisibility = React.useCallback(() => {\n    if (isTrackerDragging.current) {\n      return;\n    }\n    setTrackerVisible(true);\n    setVisibilityTimeout();\n  }, [setVisibilityTimeout]);\n\n  const onTrackerMouseEnter = React.useCallback(() => {\n    clearVisibilityTimeout();\n    isMouseOver.current = true;\n    setTrackerVisible(true);\n  }, [clearVisibilityTimeout]);\n\n  const onTrackerMouseLeave = React.useCallback(() => {\n    queueTrackerVisibility();\n    isMouseOver.current = false;\n  }, [queueTrackerVisibility]);\n\n  const onTargetScroll = React.useCallback(() => {\n    queueTrackerVisibility();\n  }, [queueTrackerVisibility]);\n\n  return {\n    trackerVisible,\n    onTrackerDragStart,\n    onTrackerDragStop,\n    onTrackerMouseEnter,\n    onTrackerMouseLeave,\n    onTargetScroll,\n  };\n};\n\nexport interface TrackerOptionsProps {\n  /**\n   * Скрывать ли ползунок скроллбара\n   */\n  autoHideScrollbar?: boolean;\n  /**\n   * Через какое кол-во миллисекунд ползунок скроллбара скрывается\n   */\n  autoHideScrollbarDelay?: number;\n}\n\nexport interface TrackerVisibilityProps {\n  /**\n   * Отвечает за видимость ползунка\n   */\n  trackerVisible: boolean;\n  /**\n   * Функция для обработки события у блока со скроллом\n   */\n  onTargetScroll(this: void): void;\n  /**\n   * Функция для обработки начала drag event ползунка\n   */\n  onTrackerDragStart(this: void): void;\n  /**\n   * Функция для обработки окончания drag event ползунка\n   */\n  onTrackerDragStop(this: void): void;\n  /**\n   * Функция для обработки mouseLeave event ползунка\n   */\n  onTrackerMouseEnter(this: void): void;\n  /**\n   * Функция для обработки mouseEnter event ползунка\n   */\n  onTrackerMouseLeave(this: void): void;\n}\n"]},"metadata":{},"sourceType":"module"}