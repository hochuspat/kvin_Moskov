{"ast":null,"code":"import { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport * as React from \"react\";\nimport { classNames } from \"@vkontakte/vkjs\";\nimport { RootComponent } from \"../RootComponent/RootComponent\";\n\nfunction calcStrokeDashOffset(value, radius) {\n  var progress = value / 100;\n  return 2 * Math.PI * radius * (1 - progress);\n}\n\nexport var PullToRefreshSpinner = function (_param) {\n  var _param_on = _param.on,\n      on = _param_on === void 0 ? true : _param_on,\n      _param_size = _param.size,\n      size = _param_size === void 0 ? 24 : _param_size,\n      _param_strokeWidth = _param.strokeWidth,\n      strokeWidth = _param_strokeWidth === void 0 ? 2.5 : _param_strokeWidth,\n      _param_progress = _param.progress,\n      progress = _param_progress === void 0 ? 0 : _param_progress,\n      tmp = _param[\"aria-label\"],\n      ariaLabel = tmp === void 0 ? \"Пожалуйста, подождите...\" : tmp,\n      restProps = _object_without_properties(_param, [\"on\", \"size\", \"strokeWidth\", \"progress\", \"aria-label\"]);\n\n  var radius = 0.5 * size - 0.5 * strokeWidth;\n  var dasharray = 2 * Math.PI * radius;\n  var circleCenter = 0.5 * size;\n  var dashoffset = calcStrokeDashOffset(on ? 80 : progress, radius);\n  return /*#__PURE__*/React.createElement(RootComponent, _object_spread({\n    baseClassName: classNames(\"vkuiPullToRefresh__spinner\", on && \"vkuiPullToRefresh__spinner--on\"),\n    \"aria-label\": on ? ariaLabel : undefined\n  }, restProps), /*#__PURE__*/React.createElement(\"svg\", {\n    role: \"presentation\",\n    className: \"vkuiPullToRefresh__spinner-self\",\n    style: {\n      width: size,\n      height: size\n    },\n    viewBox: \"0 0 \".concat(size, \" \").concat(size),\n    xmlns: \"http://www.w3.org/2000/svg\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    style: {\n      width: size,\n      height: size,\n      transformOrigin: \"\".concat(circleCenter, \"px \").concat(circleCenter, \"px\")\n    }\n  }, /*#__PURE__*/React.createElement(\"circle\", {\n    className: \"vkuiPullToRefresh__spinner-path\",\n    fill: \"none\",\n    strokeDasharray: dasharray,\n    strokeDashoffset: dashoffset,\n    strokeWidth: strokeWidth,\n    strokeLinecap: \"round\",\n    cx: circleCenter,\n    cy: circleCenter,\n    r: radius\n  }))));\n};","map":{"version":3,"mappings":";;AAAA,YAAYA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,iBAA3B;AAEA,SAASC,aAAT,QAA8B,gCAA9B;;AAGA,SAASC,oBAAT,CAA8BC,KAA9B,EAA6CC,MAA7C,EAA2D;EACzD,IAAMC,WAAWF,QAAQ,GAAzB;EACA,OAAO,IAAIG,KAAKC,EAAT,GAAcH,MAAd,IAAwB,IAAIC,QAA5B,CAAP;AACF;;AASA,OAAO,IAAMG,uBAAuB;yBAClCC;MAAAA,4BAAK,IAALA,GAAKC;MAAAC,qBACLC;MAAAA,gCAAO,EAAPA,GAAOD;MAAAE,4BACPC;MAAAA,8CAAc,GAAdA,GAAcD;MAAAE,yBACdV;MAAAA,wCAAW,CAAXA,GAAWU;MACGC,aAAd,YAAcA;MAAAA,6BAAY,0BAAZA;MACXC,gDALHR,IAKGQ,EAJHL,MAIGK,EAHHH,aAGGG,EAFHZ,UAEGY,EADH,YACGA;;EAEH,IAAMb,SAAS,MAAMQ,IAAN,GAAa,MAAME,WAAlC;EACA,IAAMI,YAAY,IAAIZ,KAAKC,EAAT,GAAcH,MAAhC;EACA,IAAMe,eAAe,MAAMP,IAA3B;EAEA,IAAMQ,aAAalB,qBAAqBO,KAAK,EAALA,GAAUJ,QAA/BH,EAAyCE,MAAzCF,CAAnB;EAEA,oBACEH,oBAACE,aAAD,EAACA;IACCoB,eAAerB,yCAEbS,sCAFaT,CADhBC;IAKCqB,cAAYb,KAAKO,SAALP,GAAiBc;EAL9BtB,GAMKgB,SANLhB,CAAD,EAMMgB,aAEJlB,oBAACyB,KAAD,EAACA;IACCC,MAAK,cADND;IAECE,SAAS,mCAFVF;IAGCG,OAAO;MACLC,OAAOhB,IADF;MAELiB,QAAQjB;IAFH,CAHRY;IAOCM,SAAS,OAAelB,MAAf,CAAOA,IAAP,EAAY,GAAZ,EAAoBmB,MAApB,CAAenB,IAAf,CAPVY;IAQCQ,OAAM;EARPR,CAAD,eAUEzB,oBAACkC,GAAD,EAACA;IACCN,OAAO;MACLC,OAAOhB,IADF;MAELiB,QAAQjB,IAFH;MAGLsB,iBAAiB,GAAqBf,MAArB,CAAGA,YAAH,EAAgB,KAAhB,EAAkCY,MAAlC,CAAqBZ,YAArB,EAAkC,IAAlC;IAHZ;EADRc,CAAD,eAOElC,oBAACoC,QAAD,EAACA;IACCT,SAAS,mCADVS;IAECC,MAAK,MAFND;IAGCE,iBAAiBnB,SAHlBiB;IAICG,kBAAkBlB,UAJnBe;IAKCrB,aAAaA,WALdqB;IAMCI,eAAc,OANfJ;IAOCK,IAAIrB,YAPLgB;IAQCM,IAAItB,YARLgB;IASCO,GAAGtC;EATJ+B,CAAD,CAPF,CAVF,CARF,CADF;AAyCF,CAvDO","names":["React","classNames","RootComponent","calcStrokeDashOffset","value","radius","progress","Math","PI","PullToRefreshSpinner","on","_param_on","_param_size","size","_param_strokeWidth","strokeWidth","_param_progress","ariaLabel","restProps","dasharray","circleCenter","dashoffset","baseClassName","aria-label","undefined","svg","role","className","style","width","height","viewBox","concat","xmlns","g","transformOrigin","circle","fill","strokeDasharray","strokeDashoffset","strokeLinecap","cx","cy","r"],"sources":["C:\\Users\\kulag\\vk\\Ability\\node_modules\\@vkontakte\\vkui\\src\\components\\PullToRefresh\\PullToRefreshSpinner.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNames } from '@vkontakte/vkjs';\nimport { HTMLAttributesWithRootRef } from '../../types';\nimport { RootComponent } from '../RootComponent/RootComponent';\nimport styles from './PullToRefresh.module.css';\n\nfunction calcStrokeDashOffset(value: number, radius: number) {\n  const progress = value / 100;\n  return 2 * Math.PI * radius * (1 - progress);\n}\n\nexport interface PullToRefreshSpinnerProps extends HTMLAttributesWithRootRef<HTMLDivElement> {\n  size?: number;\n  strokeWidth?: number;\n  on?: boolean;\n  progress?: number;\n}\n\nexport const PullToRefreshSpinner = ({\n  on = true,\n  size = 24,\n  strokeWidth = 2.5,\n  progress = 0,\n  'aria-label': ariaLabel = 'Пожалуйста, подождите...',\n  ...restProps\n}: PullToRefreshSpinnerProps) => {\n  const radius = 0.5 * size - 0.5 * strokeWidth;\n  const dasharray = 2 * Math.PI * radius;\n  const circleCenter = 0.5 * size;\n\n  const dashoffset = calcStrokeDashOffset(on ? 80 : progress, radius);\n\n  return (\n    <RootComponent\n      baseClassName={classNames(\n        styles['PullToRefresh__spinner'],\n        on && styles['PullToRefresh__spinner--on'],\n      )}\n      aria-label={on ? ariaLabel : undefined}\n      {...restProps}\n    >\n      <svg\n        role=\"presentation\"\n        className={styles['PullToRefresh__spinner-self']}\n        style={{\n          width: size,\n          height: size,\n        }}\n        viewBox={`0 0 ${size} ${size}`}\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <g\n          style={{\n            width: size,\n            height: size,\n            transformOrigin: `${circleCenter}px ${circleCenter}px`,\n          }}\n        >\n          <circle\n            className={styles['PullToRefresh__spinner-path']}\n            fill=\"none\"\n            strokeDasharray={dasharray}\n            strokeDashoffset={dashoffset}\n            strokeWidth={strokeWidth}\n            strokeLinecap=\"round\"\n            cx={circleCenter}\n            cy={circleCenter}\n            r={radius}\n          />\n        </g>\n      </svg>\n    </RootComponent>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}