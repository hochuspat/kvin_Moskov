{"ast":null,"code":"import { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport * as React from \"react\";\nimport { classNames } from \"@vkontakte/vkjs\";\nimport { useFocusVisible } from \"../../hooks/useFocusVisible\";\nimport { callMultiple } from \"../../lib/callMultiple\";\nimport { FocusVisible } from \"../FocusVisible/FocusVisible\";\nimport { RootComponent } from \"../RootComponent/RootComponent\";\n/**\n * Некликабельный компонент. Отключаем возможность нажимать на компонент.\n */\n\nvar NonClickable = function (_param) /*#__PURE__*/{\n  var href = _param.href,\n      onClick = _param.onClick,\n      onClickCapture = _param.onClickCapture,\n      restProps = _object_without_properties(_param, [\"href\", \"onClick\", \"onClickCapture\"]);\n\n  return React.createElement(RootComponent, restProps);\n};\n/**\n * Кликабельный компонент. Добавляем кучу обвесов\n */\n\n\nvar RealClickable = function (_param) {\n  var baseClassName = _param.baseClassName,\n      children = _param.children,\n      _param_focusVisibleMode = _param.focusVisibleMode,\n      focusVisibleMode = _param_focusVisibleMode === void 0 ? \"inside\" : _param_focusVisibleMode,\n      restProps = _object_without_properties(_param, [\"baseClassName\", \"children\", \"focusVisibleMode\"]);\n\n  var _useFocusVisible = useFocusVisible(),\n      focusVisible = _useFocusVisible.focusVisible,\n      onBlur = _useFocusVisible.onBlur,\n      onFocus = _useFocusVisible.onFocus;\n\n  return /*#__PURE__*/React.createElement(RootComponent, _object_spread({\n    baseClassName: classNames(baseClassName, \"vkuiClickable__host\"),\n    onBlur: callMultiple(onBlur, restProps.onBlur),\n    onFocus: callMultiple(onFocus, restProps.onFocus)\n  }, restProps), children, /*#__PURE__*/React.createElement(FocusVisible, {\n    visible: focusVisible,\n    mode: focusVisibleMode\n  }));\n};\n/**\n * Проверяем, является ли компонент кликабельным\n */\n\n\nfunction checkClickable(props) {\n  return (props.href !== undefined || props.onClick !== undefined || props.onClickCapture !== undefined) && !props.disabled;\n}\n/**\n * Определяет правильный компонент и его свойства\n *\n * - если передан Component, используем его\n * - при передаче `href` превратится в `a`,\n * - при передаче `onClick` превратится в `div` c `role=\"button\"` и `tabIndex=\"0\"`.\n * - иначе используется `div`.\n */\n\n\nfunction component(param) {\n  var Component = param.Component,\n      onClick = param.onClick,\n      onClickCapture = param.onClickCapture,\n      href = param.href,\n      disabled = param.disabled;\n\n  if (Component !== undefined) {\n    return {\n      Component: Component\n    };\n  } else if (href !== undefined) {\n    return {\n      \"Component\": \"a\",\n      \"role\": \"link\",\n      \"aria-disabled\": disabled\n    };\n  } else if (onClick !== undefined || onClickCapture !== undefined) {\n    return {\n      \"Component\": \"div\",\n      \"role\": \"button\",\n      \"tabIndex\": disabled ? undefined : 0,\n      \"aria-disabled\": disabled\n    };\n  }\n\n  return {};\n}\n/**\n * Базовый кликабельный корневой компонент.\n *\n * - при передаче `href` превратится в `a`,\n * - при передаче `onClick` превратится в `div` c `role=\"button\"` и `tabIndex=\"0\"`.\n * - иначе используется `div`.\n */\n\n\nexport var Clickable = function (_param) {\n  var _param_focusVisibleMode = _param.focusVisibleMode,\n      focusVisibleMode = _param_focusVisibleMode === void 0 ? \"inside\" : _param_focusVisibleMode,\n      restProps = _object_without_properties(_param, [\"focusVisibleMode\"]);\n\n  var commonProps = component(restProps);\n  var isClickable = checkClickable(restProps);\n\n  if (isClickable) {\n    return /*#__PURE__*/React.createElement(RealClickable, _object_spread({\n      focusVisibleMode: focusVisibleMode\n    }, commonProps, restProps));\n  }\n\n  return /*#__PURE__*/React.createElement(NonClickable, _object_spread({}, commonProps, restProps));\n};","map":{"version":3,"mappings":";;AAAA,YAAYA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,SAASC,eAAT,QAAgC,6BAAhC;AACA,SAASC,YAAT,QAA6B,wBAA7B;AACA,SAASC,YAAT,QAA+C,8BAA/C;AACA,SAASC,aAAT,QAAkD,gCAAlD;AAQA;;;;AAGA,IAAMC,eAAe;MACnBC;MACAC;MACAC;MACGC,gDAHHH,MAGGG,EAFHF,SAEGE,EADHD,gBACGC;;SACwBV,oBAACK,aAAD,EAAmBK,SAAnB;AAA+B,CAL5D;AAOA;;;;;AAGA,IAAMC,gBAAgB;MACpBC;MACAC;MAAAA,iCACAC;MAAAA,wDAAmB,QAAnBA,GAAmBC;MAChBL,gDAHHE,eAGGF,EAFHG,UAEGH,EADHI,kBACGJ;;EAEH,IAA0CR,oCAA1C;EAAA,IAAQc,eAAkCd,iBAAlCc,YAAR;EAAA,IAAsBC,SAAoBf,iBAApBe,MAAtB;EAAA,IAA8BC,UAAYhB,iBAAZgB,OAA9B;;EAEA,oBACElB,oBAACK,aAAD,EAACA;IACCO,eAAeX,WAAWW,aAAXX,EAAWW,qBAAXX,CADhBI;IAECY,QAAQd,aAAac,MAAbd,EAAqBO,UAAUO,MAA/Bd,CAFTE;IAGCa,SAASf,aAAae,OAAbf,EAAsBO,UAAUQ,OAAhCf;EAHVE,GAIKK,SAJLL,CAAD,EAMGQ,QANH,EAMGA,aACDb,oBAACI,YAAD,EAACA;IAAae,SAASH,YAAtBZ;IAAoCgB,MAAMN;EAA1CV,CAAD,CAPF,CADF;AAWF,CAnBA;AAqBA;;;;;AAGA,SAASiB,cAAT,CAA2BC,KAA3B,EAAmD;EACjD,OACE,CAACA,MAAMf,IAANe,KAAeC,SAAfD,IACCA,MAAMd,OAANc,KAAkBC,SADnBD,IAECA,MAAMb,cAANa,KAAyBC,SAF3B,KAGA,CAACD,MAAME,QAJT;AAMF;AAEA;;;;;;;;;;AAQA,SAASC,SAAT,CAAsBC,KAAtB,EAMwB;MALtBC,YADoBD,MACpBC;MACAnB,UAFoBkB,MAEpBlB;MACAC,iBAHoBiB,MAGpBjB;MACAF,OAJoBmB,MAIpBnB;MACAiB,WALoBE,MAKpBF;;EAEA,IAAIG,cAAcJ,SAAlB,EAA6B;IAC3B,OAAO;MAAEI;IAAF,CAAP;EACF,CAFA,MAEO,IAAIpB,SAASgB,SAAb,EAAwB;IAC7B,OAAO;MAAE,aAAa,GAAf;MAAoB,QAAQ,MAA5B;MAAoC,iBAAiBC;IAArD,CAAP;EACF,CAFO,MAEA,IAAIhB,YAAYe,SAAZf,IAAyBC,mBAAmBc,SAAhD,EAA2D;IAChE,OAAO;MACL,aAAa,KADR;MAEL,QAAQ,QAFH;MAGL,YAAYC,WAAWD,SAAXC,GAAuB,CAH9B;MAIL,iBAAiBA;IAJZ,CAAP;EAMF;;EAEA,OAAO,EAAP;AACF;AAEA;;;;;;;;;AAOA,OAAO,IAAMI,YAAY;uCAAOd;MAAAA,wDAAmB,QAAnBA,GAAmBC;MAAaL,gDAAhCI,kBAAgCJ;;EAC9D,IAAMmB,cAAcJ,UAAUf,SAAVe,CAApB;EACA,IAAMK,cAAcT,eAAeX,SAAfW,CAApB;;EAEA,IAAIS,WAAJ,EAAiB;IACf,oBAAO9B,oBAACW,aAAD,EAACA;MAAcG,kBAAkBA;IAAhCH,GAAsDkB,WAAtDlB,EAAuED,SAAvEC,CAAD,CAAP;EACF;;EAEA,oBAAOX,oBAACM,YAAD,EAACA,mBAAiBuB,WAAjBvB,EAAkCI,SAAlCJ,CAAD,CAAP;AACF,CATO","names":["React","classNames","useFocusVisible","callMultiple","FocusVisible","RootComponent","NonClickable","href","onClick","onClickCapture","restProps","RealClickable","baseClassName","children","focusVisibleMode","_param_focusVisibleMode","focusVisible","onBlur","onFocus","visible","mode","checkClickable","props","undefined","disabled","component","param","Component","Clickable","commonProps","isClickable"],"sources":["C:\\Users\\kulag\\vk\\Ability\\node_modules\\@vkontakte\\vkui\\src\\components\\Clickable\\Clickable.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNames } from '@vkontakte/vkjs';\nimport { useFocusVisible } from '../../hooks/useFocusVisible';\nimport { callMultiple } from '../../lib/callMultiple';\nimport { FocusVisible, FocusVisibleMode } from '../FocusVisible/FocusVisible';\nimport { RootComponent, RootComponentProps } from '../RootComponent/RootComponent';\nimport styles from './Clickable.module.css';\n\nexport interface ClickableProps<T> extends RootComponentProps<T> {\n  baseClassName?: string;\n  focusVisibleMode?: FocusVisibleMode;\n}\n\n/**\n * Некликабельный компонент. Отключаем возможность нажимать на компонент.\n */\nconst NonClickable = <T,>({\n  href,\n  onClick,\n  onClickCapture,\n  ...restProps\n}: RootComponentProps<T>) => <RootComponent {...restProps} />;\n\n/**\n * Кликабельный компонент. Добавляем кучу обвесов\n */\nconst RealClickable = <T,>({\n  baseClassName,\n  children,\n  focusVisibleMode = 'inside',\n  ...restProps\n}: ClickableProps<T>) => {\n  const { focusVisible, onBlur, onFocus } = useFocusVisible();\n\n  return (\n    <RootComponent\n      baseClassName={classNames(baseClassName, styles['Clickable__host'])}\n      onBlur={callMultiple(onBlur, restProps.onBlur)}\n      onFocus={callMultiple(onFocus, restProps.onFocus)}\n      {...restProps}\n    >\n      {children}\n      <FocusVisible visible={focusVisible} mode={focusVisibleMode} />\n    </RootComponent>\n  );\n};\n\n/**\n * Проверяем, является ли компонент кликабельным\n */\nfunction checkClickable<T>(props: ClickableProps<T>): boolean {\n  return (\n    (props.href !== undefined ||\n      props.onClick !== undefined ||\n      props.onClickCapture !== undefined) &&\n    !props.disabled\n  );\n}\n\n/**\n * Определяет правильный компонент и его свойства\n *\n * - если передан Component, используем его\n * - при передаче `href` превратится в `a`,\n * - при передаче `onClick` превратится в `div` c `role=\"button\"` и `tabIndex=\"0\"`.\n * - иначе используется `div`.\n */\nfunction component<T>({\n  Component,\n  onClick,\n  onClickCapture,\n  href,\n  disabled,\n}: RootComponentProps<T>): RootComponentProps<T> {\n  if (Component !== undefined) {\n    return { Component };\n  } else if (href !== undefined) {\n    return { 'Component': 'a', 'role': 'link', 'aria-disabled': disabled };\n  } else if (onClick !== undefined || onClickCapture !== undefined) {\n    return {\n      'Component': 'div',\n      'role': 'button',\n      'tabIndex': disabled ? undefined : 0,\n      'aria-disabled': disabled,\n    };\n  }\n\n  return {};\n}\n\n/**\n * Базовый кликабельный корневой компонент.\n *\n * - при передаче `href` превратится в `a`,\n * - при передаче `onClick` превратится в `div` c `role=\"button\"` и `tabIndex=\"0\"`.\n * - иначе используется `div`.\n */\nexport const Clickable = <T,>({ focusVisibleMode = 'inside', ...restProps }: ClickableProps<T>) => {\n  const commonProps = component(restProps);\n  const isClickable = checkClickable(restProps);\n\n  if (isClickable) {\n    return <RealClickable focusVisibleMode={focusVisibleMode} {...commonProps} {...restProps} />;\n  }\n\n  return <NonClickable {...commonProps} {...restProps} />;\n};\n"]},"metadata":{},"sourceType":"module"}