{"ast":null,"code":"import { _ as _define_property } from \"@swc/helpers/_/_define_property\";\nimport { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_spread_props } from \"@swc/helpers/_/_object_spread_props\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport * as React from \"react\";\nimport { classNames, hasReactNode } from \"@vkontakte/vkjs\";\nimport { useAdaptivity } from \"../../hooks/useAdaptivity\";\nimport { usePlatform } from \"../../hooks/usePlatform\";\nimport { SizeType } from \"../../lib/adaptivity\";\nimport { Platform } from \"../../lib/platform\";\nimport { warnOnce } from \"../../lib/warnOnce\";\nimport { Tappable } from \"../Tappable/Tappable\";\nimport { Footnote } from \"../Typography/Footnote/Footnote\";\nimport { Headline } from \"../Typography/Headline/Headline\";\nimport { Subhead } from \"../Typography/Subhead/Subhead\";\nimport { Chevron } from \"./Chevron/Chevron\";\nvar warn = warnOnce(\"SimpleCell\");\n\nvar sizeYClassNames = _define_property({\n  none: \"vkuiSimpleCell--sizeY-none\"\n}, SizeType.COMPACT, \"vkuiSimpleCell--sizeY-compact\");\n/**\n * @see https://vkcom.github.io/VKUI/#/SimpleCell\n */\n\n\nexport var SimpleCell = function (_param) {\n  var badgeBeforeTitle = _param.badgeBeforeTitle,\n      badgeAfterTitle = _param.badgeAfterTitle,\n      badgeBeforeSubtitle = _param.badgeBeforeSubtitle,\n      badgeAfterSubtitle = _param.badgeAfterSubtitle,\n      before = _param.before,\n      indicator = _param.indicator,\n      children = _param.children,\n      after = _param.after,\n      expandable = _param.expandable,\n      multiline = _param.multiline,\n      subhead = _param.subhead,\n      subtitle = _param.subtitle,\n      extraSubtitle = _param.extraSubtitle,\n      className = _param.className,\n      _param_chevronSize = _param.chevronSize,\n      chevronSize = _param_chevronSize === void 0 ? \"m\" : _param_chevronSize,\n      restProps = _object_without_properties(_param, [\"badgeBeforeTitle\", \"badgeAfterTitle\", \"badgeBeforeSubtitle\", \"badgeAfterSubtitle\", \"before\", \"indicator\", \"children\", \"after\", \"expandable\", \"multiline\", \"subhead\", \"subtitle\", \"extraSubtitle\", \"className\", \"chevronSize\"]);\n\n  var platform = usePlatform();\n\n  if (process.env.NODE_ENV === \"development\" && expandable === true) {\n    // TODO [>=6]: Обновить типизацию для expandable свойства\n    warn('Значение true свойства expandable устарело и будет удалено в v6. Используйте expandable=\"auto\"');\n  }\n\n  var hasChevron = expandable === \"always\" || (expandable === true || expandable === \"auto\") && platform === Platform.IOS;\n  var hasAfter = hasReactNode(after) || hasChevron;\n\n  var _useAdaptivity = useAdaptivity(),\n      _useAdaptivity_sizeY = _useAdaptivity.sizeY,\n      sizeY = _useAdaptivity_sizeY === void 0 ? \"none\" : _useAdaptivity_sizeY;\n\n  return /*#__PURE__*/React.createElement(Tappable, _object_spread_props(_object_spread({}, restProps), {\n    className: classNames(\"vkuiSimpleCell\", sizeY !== SizeType.REGULAR && sizeYClassNames[sizeY], multiline && \"vkuiSimpleCell--mult\", className)\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"vkuiSimpleCell__before\"\n  }, before), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"vkuiSimpleCell__middle\"\n  }, subhead && /*#__PURE__*/React.createElement(Subhead, {\n    Component: \"span\",\n    className: classNames(\"vkuiSimpleCell__text\", \"vkuiSimpleCell__subhead\")\n  }, subhead), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"vkuiSimpleCell__content\"\n  }, badgeBeforeTitle && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"vkuiSimpleCell__badge\"\n  }, badgeBeforeTitle), /*#__PURE__*/React.createElement(Headline, {\n    Component: \"span\",\n    className: \"vkuiSimpleCell__children\",\n    weight: \"3\"\n  }, children), hasReactNode(badgeAfterTitle) && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"vkuiSimpleCell__badge\"\n  }, badgeAfterTitle)), subtitle && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"vkuiSimpleCell__content\"\n  }, badgeBeforeSubtitle && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"vkuiSimpleCell__badge\"\n  }, badgeBeforeSubtitle), /*#__PURE__*/React.createElement(Footnote, {\n    normalize: false,\n    className: classNames(\"vkuiSimpleCell__text\", \"vkuiSimpleCell__subtitle\")\n  }, subtitle), badgeAfterSubtitle && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"vkuiSimpleCell__badge\"\n  }, badgeAfterSubtitle)), extraSubtitle && /*#__PURE__*/React.createElement(Footnote, {\n    className: classNames(\"vkuiSimpleCell__text\", \"vkuiSimpleCell__extraSubtitle\")\n  }, extraSubtitle)), hasReactNode(indicator) && /*#__PURE__*/React.createElement(Headline, {\n    Component: \"span\",\n    weight: \"3\",\n    className: \"vkuiSimpleCell__indicator\"\n  }, indicator), hasAfter && /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(\"vkuiSimpleCell__after\", \"vkuiInternalSimpleCell__after\")\n  }, after, hasChevron && /*#__PURE__*/React.createElement(Chevron, {\n    size: chevronSize,\n    className: \"vkuiSimpleCell__chevronIcon\"\n  })));\n};","map":{"version":3,"mappings":"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","names":["React","classNames","hasReactNode","useAdaptivity","usePlatform","SizeType","Platform","warnOnce","Tappable","Footnote","Headline","Subhead","Chevron","warn","sizeYClassNames","none","COMPACT","SimpleCell","badgeBeforeTitle","badgeAfterTitle","badgeBeforeSubtitle","badgeAfterSubtitle","before","indicator","children","after","expandable","multiline","subhead","subtitle","extraSubtitle","className","chevronSize","_param_chevronSize","restProps","platform","process","env","NODE_ENV","hasChevron","IOS","hasAfter","sizeY","_useAdaptivity_sizeY","REGULAR","div","Component","span","weight","normalize","size"],"sources":["C:\\Users\\kulag\\vk\\Ability\\node_modules\\@vkontakte\\vkui\\src\\components\\SimpleCell\\SimpleCell.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNames, hasReactNode } from '@vkontakte/vkjs';\nimport { useAdaptivity } from '../../hooks/useAdaptivity';\nimport { usePlatform } from '../../hooks/usePlatform';\nimport { SizeType } from '../../lib/adaptivity';\nimport { Platform } from '../../lib/platform';\nimport { warnOnce } from '../../lib/warnOnce';\nimport { HasComponent } from '../../types';\nimport { Tappable, TappableProps } from '../Tappable/Tappable';\nimport { Footnote } from '../Typography/Footnote/Footnote';\nimport { Headline } from '../Typography/Headline/Headline';\nimport { Subhead } from '../Typography/Subhead/Subhead';\nimport { Chevron } from './Chevron/Chevron';\nimport styles from './SimpleCell.module.css';\n\nconst warn = warnOnce('SimpleCell');\n\nconst sizeYClassNames = {\n  none: styles['SimpleCell--sizeY-none'],\n  [SizeType.COMPACT]: styles['SimpleCell--sizeY-compact'],\n};\n\nexport interface SimpleCellOwnProps extends HasComponent {\n  /**\n   * Иконка 28 или `<Avatar size={28|32|40|48|72} />`\n   */\n  before?: React.ReactNode;\n  /**\n   * Иконка 12 или `<Badge />`. Добавится слева от текста `children`.\n   */\n  badgeBeforeTitle?: React.ReactNode;\n  /**\n   * Иконка 12 или `<Badge />`. Добавится справа от текста `children`.\n   */\n  badgeAfterTitle?: React.ReactNode;\n  /**\n   * Иконка 12. Добавится слева от текста `subtitle`.\n   */\n  badgeBeforeSubtitle?: React.ReactNode;\n  /**\n   * Иконка 12. Добавится справа от текста `subtitle`.\n   */\n  badgeAfterSubtitle?: React.ReactNode;\n  /**\n   * Контейнер для текста справа от `children`.\n   */\n  indicator?: React.ReactNode;\n  /**\n   * Дополнительная строка текста над `children`.\n   */\n  subhead?: React.ReactNode;\n  /**\n   * Дополнительная строка текста под `children`.\n   */\n  subtitle?: React.ReactNode;\n  /**\n   * Дополнительная строка текста под `children` и `subtitle`.\n   */\n  extraSubtitle?: React.ReactNode;\n  /**\n   * Иконка 24|28 или `<Switch />`. Располагается справа от `indicator`.\n   */\n  after?: React.ReactNode;\n  /**\n   * Убирает анимацию нажатия\n   */\n  disabled?: boolean;\n  /**\n   * В iOS добавляет chevron справа. Передавать `true`, если предполагается переход при клике по ячейке.\n   */\n  expandable?: boolean | 'auto' | 'always';\n  /**\n   * Размер chevron\n   */\n  chevronSize?: 's' | 'm';\n  /**\n   * Включает многострочный режим для отображения текста\n   */\n  multiline?: boolean;\n}\n\nexport interface SimpleCellProps extends SimpleCellOwnProps, TappableProps {}\n\n/**\n * @see https://vkcom.github.io/VKUI/#/SimpleCell\n */\nexport const SimpleCell = ({\n  badgeBeforeTitle,\n  badgeAfterTitle,\n  badgeBeforeSubtitle,\n  badgeAfterSubtitle,\n  before,\n  indicator,\n  children,\n  after,\n  expandable,\n  multiline,\n  subhead,\n  subtitle,\n  extraSubtitle,\n  className,\n  chevronSize = 'm',\n  ...restProps\n}: SimpleCellProps) => {\n  const platform = usePlatform();\n\n  if (process.env.NODE_ENV === 'development' && expandable === true) {\n    // TODO [>=6]: Обновить типизацию для expandable свойства\n    warn(\n      'Значение true свойства expandable устарело и будет удалено в v6. Используйте expandable=\"auto\"',\n    );\n  }\n\n  const hasChevron =\n    expandable === 'always' ||\n    ((expandable === true || expandable === 'auto') && platform === Platform.IOS);\n\n  const hasAfter = hasReactNode(after) || hasChevron;\n  const { sizeY = 'none' } = useAdaptivity();\n\n  return (\n    <Tappable\n      {...restProps}\n      className={classNames(\n        styles['SimpleCell'],\n        sizeY !== SizeType.REGULAR && sizeYClassNames[sizeY],\n        multiline && styles['SimpleCell--mult'],\n        className,\n      )}\n    >\n      <div className={styles['SimpleCell__before']}>{before}</div>\n      <div className={styles['SimpleCell__middle']}>\n        {subhead && (\n          <Subhead\n            Component=\"span\"\n            className={classNames(styles['SimpleCell__text'], styles['SimpleCell__subhead'])}\n          >\n            {subhead}\n          </Subhead>\n        )}\n        <div className={styles['SimpleCell__content']}>\n          {badgeBeforeTitle && (\n            <span className={styles['SimpleCell__badge']}>{badgeBeforeTitle}</span>\n          )}\n          <Headline Component=\"span\" className={styles['SimpleCell__children']} weight=\"3\">\n            {children}\n          </Headline>\n          {hasReactNode(badgeAfterTitle) && (\n            <span className={styles['SimpleCell__badge']}>{badgeAfterTitle}</span>\n          )}\n        </div>\n        {subtitle && (\n          <div className={styles['SimpleCell__content']}>\n            {badgeBeforeSubtitle && (\n              <span className={styles['SimpleCell__badge']}>{badgeBeforeSubtitle}</span>\n            )}\n            <Footnote\n              normalize={false}\n              className={classNames(styles['SimpleCell__text'], styles['SimpleCell__subtitle'])}\n            >\n              {subtitle}\n            </Footnote>\n            {badgeAfterSubtitle && (\n              <span className={styles['SimpleCell__badge']}>{badgeAfterSubtitle}</span>\n            )}\n          </div>\n        )}\n        {extraSubtitle && (\n          <Footnote\n            className={classNames(styles['SimpleCell__text'], styles['SimpleCell__extraSubtitle'])}\n          >\n            {extraSubtitle}\n          </Footnote>\n        )}\n      </div>\n      {hasReactNode(indicator) && (\n        <Headline Component=\"span\" weight=\"3\" className={styles['SimpleCell__indicator']}>\n          {indicator}\n        </Headline>\n      )}\n      {hasAfter && (\n        <div className={classNames(styles['SimpleCell__after'], 'vkuiInternalSimpleCell__after')}>\n          {after}\n          {hasChevron && (\n            <Chevron size={chevronSize} className={styles['SimpleCell__chevronIcon']} />\n          )}\n        </div>\n      )}\n    </Tappable>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}