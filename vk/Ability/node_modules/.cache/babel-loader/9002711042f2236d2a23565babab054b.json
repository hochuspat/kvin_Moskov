{"ast":null,"code":"import { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport * as React from \"react\";\nimport { classNames, hasReactNode } from \"@vkontakte/vkjs\";\nimport { HoverPopper } from \"../HoverPopper/HoverPopper\";\nimport { Subhead } from \"../Typography/Subhead/Subhead\";\nvar stylesAppearance = {\n  accent: \"vkuiTextTooltip--appearance-accent\",\n  white: \"vkuiTextTooltip--appearance-white\",\n  black: \"vkuiTextTooltip--appearance-black\",\n  inversion: \"vkuiTextTooltip--appearance-inversion\"\n};\n/**\n * @see https://vkcom.github.io/VKUI/#/TextTooltip\n */\n\nexport var TextTooltip = function (_param) {\n  var children = _param.children,\n      text = _param.text,\n      header = _param.header,\n      _param_appearance = _param.appearance,\n      appearance = _param_appearance === void 0 ? \"neutral\" : _param_appearance,\n      className = _param.className,\n      popperProps = _object_without_properties(_param, [\"children\", \"text\", \"header\", \"appearance\", \"className\"]);\n\n  return /*#__PURE__*/React.createElement(HoverPopper, _object_spread({\n    className: classNames(\"vkuiTextTooltip\", appearance !== \"neutral\" && stylesAppearance[appearance], className),\n    arrow: true,\n    arrowClassName: \"vkuiTextTooltip__arrow\",\n    content: /*#__PURE__*/React.createElement(React.Fragment, null, hasReactNode(header) && /*#__PURE__*/React.createElement(Subhead, {\n      weight: \"2\"\n    }, header), hasReactNode(text) && /*#__PURE__*/React.createElement(Subhead, null, text))\n  }, popperProps), children);\n};","map":{"version":3,"mappings":";;AAAA,YAAYA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,EAAqBC,YAArB,QAAyC,iBAAzC;AACA,SAASC,WAAT,QAA8C,4BAA9C;AACA,SAASC,OAAT,QAAwB,+BAAxB;AAGA,IAAMC,mBAAmB;EACvBC,MAAM,sCADiB;EAEvBC,KAAK,qCAFkB;EAGvBC,KAAK,qCAHkB;EAIvBC,SAAS;AAJc,CAAzB;AAuBA;;;;AAGA,OAAO,IAAMC,cAAc;MACzBC;MACAC;MACAC;MAAAA,2BACAC;MAAAA,4CAAa,SAAbA,GAAaC;MACbC;MACGC,kDALHN,UAKGM,EAJHL,MAIGK,EAHHJ,QAGGI,EAFHH,YAEGG,EADHD,WACGC;;EAEH,oBACEjB,oBAACG,WAAD,EAACA;IACCa,WAAWf,8BAETa,eAAe,SAAfA,IAA4BT,gBAAgB,CAACS,UAAD,CAFnCb,EAGTe,SAHSf,CADZE;IAMCe,WANDf;IAOCgB,cAAc,0BAPfhB;IAQCiB,sBACEpB,oBAACA,MAAMqB,QAAP,EAAe,IAAf,EACGnB,aAAaW,MAAbX,KAAaW,aAAWb,oBAACI,OAAD,EAACA;MAAQkB,QAAO;IAAflB,CAAD,EAAqBS,MAArB,CAD3B,EAEGX,aAAaU,IAAbV,KAAaU,aAASZ,oBAACI,OAAD,EAACA,IAAD,EAAUQ,IAAV,CAFzB;EATHT,GAcKc,WAdLd,CAAD,EAgBGQ,QAhBH,CADF;AAoBF,CA5BO","names":["React","classNames","hasReactNode","HoverPopper","Subhead","stylesAppearance","accent","white","black","inversion","TextTooltip","children","text","header","appearance","_param_appearance","className","popperProps","arrow","arrowClassName","content","Fragment","weight"],"sources":["C:\\Users\\kulag\\vk\\Ability\\node_modules\\@vkontakte\\vkui\\src\\components\\TextTooltip\\TextTooltip.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNames, hasReactNode } from '@vkontakte/vkjs';\nimport { HoverPopper, HoverPopperProps } from '../HoverPopper/HoverPopper';\nimport { Subhead } from '../Typography/Subhead/Subhead';\nimport styles from './TextTooltip.module.css';\n\nconst stylesAppearance = {\n  accent: styles['TextTooltip--appearance-accent'],\n  white: styles['TextTooltip--appearance-white'],\n  black: styles['TextTooltip--appearance-black'],\n  inversion: styles['TextTooltip--appearance-inversion'],\n};\n\nexport interface TextTooltipProps\n  extends Omit<HoverPopperProps, 'arrow' | 'arrowClassName' | 'content'> {\n  /**\n   * Текст тултипа\n   */\n  text?: React.ReactNode;\n  /**\n   * Заголовок тултипа\n   */\n  header?: React.ReactNode;\n  /**\n   * Стиль отображения подсказки\n   */\n  appearance?: 'accent' | 'neutral' | 'white' | 'black' | 'inversion';\n}\n\n/**\n * @see https://vkcom.github.io/VKUI/#/TextTooltip\n */\nexport const TextTooltip = ({\n  children,\n  text,\n  header,\n  appearance = 'neutral',\n  className,\n  ...popperProps\n}: TextTooltipProps) => {\n  return (\n    <HoverPopper\n      className={classNames(\n        styles['TextTooltip'],\n        appearance !== 'neutral' && stylesAppearance[appearance],\n        className,\n      )}\n      arrow\n      arrowClassName={styles['TextTooltip__arrow']}\n      content={\n        <React.Fragment>\n          {hasReactNode(header) && <Subhead weight=\"2\">{header}</Subhead>}\n          {hasReactNode(text) && <Subhead>{text}</Subhead>}\n        </React.Fragment>\n      }\n      {...popperProps}\n    >\n      {children}\n    </HoverPopper>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}