{"ast":null,"code":"import { _ as _to_consumable_array } from \"@swc/helpers/_/_to_consumable_array\";\nimport { uniqueArrayFallback } from \"./internal/uniqueArray\";\n/**\n * Создаёт массив чисел требуемой длины\n *\n * @param arrayLength\n * @param startIndex\n */\n\nexport function createArray(arrayLength) {\n  var startIndex = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n  return new Array(arrayLength).fill(null).map(function (_, index) {\n    return startIndex + index;\n  });\n}\n/**\n * Вычисляет сумму элементов массива\n */\n\nexport function sumArray(array) {\n  if (!Array.isArray(array) || !array.length) {\n    return 0;\n  }\n\n  return array.reduce(function (previous, current) {\n    return current + previous;\n  });\n}\n/**\n * Находит среднее арифметическое элементов массива\n */\n\nexport function averageArray(array) {\n  if (!Array.isArray(array) || !array.length) {\n    return 0;\n  }\n\n  return sumArray(array) / array.length;\n}\n/**\n * Возвращает новый массив с уникальными элементами\n */\n\nexport function uniqueArray(array) {\n  if (!Array.isArray(array) || !array.length) {\n    return [];\n  }\n\n  if (typeof Set !== \"undefined\") {\n    return Array.from(new Set(array));\n  }\n\n  return uniqueArrayFallback(array);\n}\n/**\n * Перемешивает исходный массив и возвращает новый\n */\n\nexport function shuffleArray(array) {\n  return array.map(function (a) {\n    return [Math.random(), a];\n  }).sort(function (a, b) {\n    return a[0] - b[0];\n  }).map(function (a) {\n    return a[1];\n  });\n}\n/**\n * Разбивает массив на чанки\n */\n\nexport function chunkArray(array, size) {\n  if (!Array.isArray(array) || !array.length) {\n    return [];\n  }\n\n  if (!size) {\n    return [array];\n  }\n\n  var head = array.slice(0, size);\n  var tail = array.slice(size);\n  return [head].concat(_to_consumable_array(chunkArray(tail, size)));\n}\n/**\n * Удаляет из массива элемент по значению.\n * Если элемент был удалён – возвращает новый массив.\n *\n * @example\n *\n * omitFromArray([1, 2, 3], 3) // [1, 2]\n * omitFromArray([1, 2, 3], 5) // [1, 2, 3]\n */\n\nexport function omitFromArray() {\n  var array = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [],\n      value = arguments.length > 1 ? arguments[1] : void 0;\n  var index = array.indexOf(value);\n\n  if (index < 0) {\n    return array;\n  } else {\n    return _to_consumable_array(array.slice(0, index)).concat(_to_consumable_array(array.slice(index + 1)));\n  }\n}\n/**\n * Возвращает разницу между двумя массивами.\n * Вернёт элементы, которых не хватает во втором массиве.\n *\n * @example\n *\n * difference([1, 2, 3], [1, 2, 3]) // []\n * difference([1, 2, 3], [1]) // [2, 3]\n * difference([1, 2, 3], [1, 10, 100]) // [2, 3]\n */\n\nexport function difference() {\n  var array1 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [],\n      array2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];\n  return array1.reduce(function (res, item) {\n    if (!array2.includes(item)) {\n      res.push(item);\n    }\n\n    return res;\n  }, []);\n}","map":{"version":3,"mappings":"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","names":["uniqueArrayFallback","createArray","arrayLength","startIndex","Array","fill","map","_","index","sumArray","array","isArray","length","reduce","previous","current","averageArray","uniqueArray","Set","from","shuffleArray","a","Math","random","sort","b","chunkArray","size","head","slice","tail","_to_consumable_array","omitFromArray","value","indexOf","difference","array1","array2","res","item","includes","push"],"sources":["C:\\Users\\kulag\\vk\\Ability\\node_modules\\@vkontakte\\vkjs\\src\\arrays.ts"],"sourcesContent":["import { uniqueArrayFallback } from './internal/uniqueArray';\n\n/**\n * Создаёт массив чисел требуемой длины\n *\n * @param arrayLength\n * @param startIndex\n */\nexport function createArray(arrayLength: number, startIndex = 0): number[] {\n  return new Array(arrayLength).fill(null).map((_, index) => startIndex + index);\n}\n\n/**\n * Вычисляет сумму элементов массива\n */\nexport function sumArray(array: number[]): number {\n  if (!Array.isArray(array) || !array.length) {\n    return 0;\n  }\n  return array.reduce((previous, current) => current + previous);\n}\n\n/**\n * Находит среднее арифметическое элементов массива\n */\nexport function averageArray(array: number[]): number {\n  if (!Array.isArray(array) || !array.length) {\n    return 0;\n  }\n  return sumArray(array) / array.length;\n}\n\n/**\n * Возвращает новый массив с уникальными элементами\n */\nexport function uniqueArray<T>(array: T[]): T[] {\n  if (!Array.isArray(array) || !array.length) {\n    return [];\n  }\n\n  if (typeof Set !== 'undefined') {\n    return Array.from(new Set(array));\n  }\n\n  return uniqueArrayFallback(array);\n}\n\n/**\n * Перемешивает исходный массив и возвращает новый\n */\nexport function shuffleArray<T>(array: T[]): T[] {\n  return array\n    .map<[number, T]>((a) => [Math.random(), a])\n    .sort((a, b) => a[0] - b[0])\n    .map<T>((a) => a[1]);\n}\n\n/**\n * Разбивает массив на чанки\n */\nexport function chunkArray<T>(array: T[], size: number): T[][] {\n  if (!Array.isArray(array) || !array.length) {\n    return [];\n  }\n\n  if (!size) {\n    return [array];\n  }\n\n  const head = array.slice(0, size);\n  const tail = array.slice(size);\n\n  return [head, ...chunkArray(tail, size)];\n}\n\n/**\n * Удаляет из массива элемент по значению.\n * Если элемент был удалён – возвращает новый массив.\n *\n * @example\n *\n * omitFromArray([1, 2, 3], 3) // [1, 2]\n * omitFromArray([1, 2, 3], 5) // [1, 2, 3]\n */\nexport function omitFromArray<T>(array: T[] = [], value: T): T[] {\n  const index = array.indexOf(value);\n\n  if (index < 0) {\n    return array;\n  } else {\n    return [...array.slice(0, index), ...array.slice(index + 1)];\n  }\n}\n\n/**\n * Возвращает разницу между двумя массивами.\n * Вернёт элементы, которых не хватает во втором массиве.\n *\n * @example\n *\n * difference([1, 2, 3], [1, 2, 3]) // []\n * difference([1, 2, 3], [1]) // [2, 3]\n * difference([1, 2, 3], [1, 10, 100]) // [2, 3]\n */\nexport function difference<T>(array1: T[] = [], array2: T[] = []) {\n  return array1.reduce<T[]>((res, item) => {\n    if (!array2.includes(item)) {\n      res.push(item);\n    }\n    return res;\n  }, []);\n}\n"]},"metadata":{},"sourceType":"module"}