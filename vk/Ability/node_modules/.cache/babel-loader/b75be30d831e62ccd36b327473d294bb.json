{"ast":null,"code":"import { addDays, addWeeks, eachDayOfInterval, endOfMonth, endOfWeek, isBefore, isFirstDayOfMonth, isLastDayOfMonth, startOfMonth, startOfWeek, subDays, subWeeks } from \"./date\";\nexport var getYears = function (currentYear, range) {\n  var years = [];\n\n  for (var i = currentYear - range; i <= currentYear + range; i++) {\n    years.push({\n      label: String(i).padStart(4, \"0\"),\n      value: i\n    });\n  }\n\n  return years;\n};\nexport var getMonths = function (locale) {\n  var months = [];\n  var formatter = new Intl.DateTimeFormat(locale, {\n    month: \"long\"\n  });\n\n  for (var i = 0; i < 12; i++) {\n    months.push({\n      label: formatter.format(new Date(\"1970-01-01\").setMonth(i)),\n      value: i\n    });\n  }\n\n  return months;\n};\nexport var getDaysNames = function (now, weekStartsOn, locale) {\n  var formatter = new Intl.DateTimeFormat(locale, {\n    weekday: \"short\"\n  });\n  return eachDayOfInterval(startOfWeek(now, weekStartsOn), endOfWeek(now, weekStartsOn)).map(function (day) {\n    return formatter.format(day);\n  });\n};\nexport var navigateDate = function (date, key) {\n  var newDate = date !== null && date !== void 0 ? date : new Date();\n\n  switch (key) {\n    case \"ArrowRight\":\n      newDate = addDays(newDate, 1);\n      break;\n\n    case \"ArrowLeft\":\n      newDate = subDays(newDate, 1);\n      break;\n\n    case \"ArrowUp\":\n      newDate = subWeeks(newDate, 1);\n      break;\n\n    case \"ArrowDown\":\n      newDate = addWeeks(newDate, 1);\n      break;\n  }\n\n  return newDate;\n};\nexport var getWeeks = function (viewDate, weekStartsOn) {\n  var start = startOfWeek(startOfMonth(viewDate), weekStartsOn);\n  var end = endOfWeek(endOfMonth(viewDate), weekStartsOn);\n  var count = 0;\n  var current = start;\n  var nestedWeeks = [];\n  var lastDay = null;\n\n  while (isBefore(current, end)) {\n    var weekNumber = Math.floor(count / 7);\n    nestedWeeks[weekNumber] = nestedWeeks[weekNumber] || [];\n    var day = current.getDay();\n\n    if (lastDay !== day) {\n      lastDay = day;\n      nestedWeeks[weekNumber].push(current);\n      count += 1;\n    }\n\n    current = addDays(current, 1);\n  }\n\n  return nestedWeeks;\n};\nexport var setTimeEqual = function (to, from) {\n  if (from) {\n    to.setHours(from.getHours());\n    to.setMinutes(from.getMinutes());\n    to.setSeconds(from.getSeconds());\n    to.setMilliseconds(from.getMilliseconds());\n  }\n\n  return to;\n};\nexport var isFirstDay = function (day, dayOfWeek) {\n  return dayOfWeek === 0 || isFirstDayOfMonth(day);\n};\nexport var isLastDay = function (day, dayOfWeek) {\n  return dayOfWeek === 6 || isLastDayOfMonth(day);\n};","map":{"version":3,"mappings":"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","names":["addDays","addWeeks","eachDayOfInterval","endOfMonth","endOfWeek","isBefore","isFirstDayOfMonth","isLastDayOfMonth","startOfMonth","startOfWeek","subDays","subWeeks","getYears","currentYear","range","years","i","push","label","String","padStart","value","getMonths","locale","months","formatter","Intl","DateTimeFormat","month","format","Date","setMonth","getDaysNames","now","weekStartsOn","weekday","map","day","navigateDate","date","key","newDate","getWeeks","viewDate","start","end","count","current","nestedWeeks","lastDay","weekNumber","Math","floor","getDay","setTimeEqual","to","from","setHours","getHours","setMinutes","getMinutes","setSeconds","getSeconds","setMilliseconds","getMilliseconds","isFirstDay","dayOfWeek","isLastDay"],"sources":["C:\\Users\\kulag\\vk\\Ability\\node_modules\\@vkontakte\\vkui\\src\\lib\\calendar.ts"],"sourcesContent":["import {\n  addDays,\n  addWeeks,\n  eachDayOfInterval,\n  endOfMonth,\n  endOfWeek,\n  isBefore,\n  isFirstDayOfMonth,\n  isLastDayOfMonth,\n  startOfMonth,\n  startOfWeek,\n  subDays,\n  subWeeks,\n} from './date';\n\nexport const getYears = (currentYear: number, range: number) => {\n  const years: Array<{\n    value: number;\n    label: string;\n  }> = [];\n\n  for (let i = currentYear - range; i <= currentYear + range; i++) {\n    years.push({ label: String(i).padStart(4, '0'), value: i });\n  }\n\n  return years;\n};\n\nexport const getMonths = (locale?: string) => {\n  const months: Array<{\n    value: number;\n    label: string;\n  }> = [];\n  const formatter = new Intl.DateTimeFormat(locale, {\n    month: 'long',\n  });\n\n  for (let i = 0; i < 12; i++) {\n    months.push({\n      label: formatter.format(new Date('1970-01-01').setMonth(i)),\n      value: i,\n    });\n  }\n\n  return months;\n};\n\nexport const getDaysNames = (\n  now: Date,\n  weekStartsOn: 0 | 1 | 2 | 3 | 4 | 5 | 6,\n  locale?: string,\n) => {\n  const formatter = new Intl.DateTimeFormat(locale, {\n    weekday: 'short',\n  });\n  return eachDayOfInterval(startOfWeek(now, weekStartsOn), endOfWeek(now, weekStartsOn)).map(\n    (day) => formatter.format(day),\n  );\n};\n\nexport const navigateDate = (date?: Date | null, key?: string) => {\n  let newDate = date ?? new Date();\n\n  switch (key) {\n    case 'ArrowRight':\n      newDate = addDays(newDate, 1);\n      break;\n    case 'ArrowLeft':\n      newDate = subDays(newDate, 1);\n      break;\n    case 'ArrowUp':\n      newDate = subWeeks(newDate, 1);\n      break;\n    case 'ArrowDown':\n      newDate = addWeeks(newDate, 1);\n      break;\n  }\n\n  return newDate;\n};\n\nexport const getWeeks = (viewDate: Date, weekStartsOn: 0 | 1 | 2 | 3 | 4 | 5 | 6) => {\n  const start = startOfWeek(startOfMonth(viewDate), weekStartsOn);\n  const end = endOfWeek(endOfMonth(viewDate), weekStartsOn);\n\n  let count = 0;\n  let current = start;\n  const nestedWeeks: Date[][] = [];\n  let lastDay = null;\n  while (isBefore(current, end)) {\n    const weekNumber = Math.floor(count / 7);\n    nestedWeeks[weekNumber] = nestedWeeks[weekNumber] || [];\n    const day = current.getDay();\n    if (lastDay !== day) {\n      lastDay = day;\n      nestedWeeks[weekNumber].push(current);\n      count += 1;\n    }\n    current = addDays(current, 1);\n  }\n  return nestedWeeks;\n};\n\nexport const setTimeEqual = (to: Date, from?: Date | null) => {\n  if (from) {\n    to.setHours(from.getHours());\n    to.setMinutes(from.getMinutes());\n    to.setSeconds(from.getSeconds());\n    to.setMilliseconds(from.getMilliseconds());\n  }\n\n  return to;\n};\n\nexport const isFirstDay = (day: Date, dayOfWeek: number) =>\n  dayOfWeek === 0 || isFirstDayOfMonth(day);\n\nexport const isLastDay = (day: Date, dayOfWeek: number) => dayOfWeek === 6 || isLastDayOfMonth(day);\n"]},"metadata":{},"sourceType":"module"}