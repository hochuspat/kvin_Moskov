{"ast":null,"code":"import { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_spread_props } from \"@swc/helpers/_/_object_spread_props\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport { _ as _sliced_to_array } from \"@swc/helpers/_/_sliced_to_array\";\nimport { _ as _to_consumable_array } from \"@swc/helpers/_/_to_consumable_array\";\nimport * as React from \"react\";\nimport { useChipsInput } from \"./useChipsInput\";\nexport var useChipsSelect = function (props) {\n  var options = props.options,\n      filterFn = props.filterFn,\n      getOptionLabel = props.getOptionLabel,\n      getOptionValue = props.getOptionValue,\n      showSelected = props.showSelected;\n\n  var _React_useState = _sliced_to_array(React.useState(false), 2),\n      opened = _React_useState[0],\n      setOpened = _React_useState[1];\n\n  var _React_useState1 = _sliced_to_array(React.useState(0), 2),\n      focusedOptionIndex = _React_useState1[0],\n      setFocusedOptionIndex = _React_useState1[1];\n\n  var _React_useState2 = _sliced_to_array(React.useState(null), 2),\n      focusedOption = _React_useState2[0],\n      setFocusedOption = _React_useState2[1];\n\n  var _useChipsInput = useChipsInput(props),\n      fieldValue = _useChipsInput.fieldValue,\n      selectedOptions = _useChipsInput.selectedOptions,\n      chipsInputState = _object_without_properties(_useChipsInput, [\"fieldValue\", \"selectedOptions\"]);\n\n  var handleInputChange = function (e) {\n    if (!e) {\n      return;\n    }\n\n    chipsInputState.handleInputChange(e);\n\n    if (!opened) {\n      setOpened(true);\n      setFocusedOptionIndex(0);\n    }\n  };\n\n  var filteredOptions = React.useMemo(function () {\n    return filterFn ? options.filter(function (option) {\n      return filterFn(fieldValue, option, getOptionLabel);\n    }) : options;\n  }, [options, filterFn, fieldValue, getOptionLabel]);\n  filteredOptions = React.useMemo(function filterOutSelectedIfNeeded() {\n    if (!filteredOptions.length || showSelected) {\n      return filteredOptions;\n    }\n\n    var filteredSet = new Set(filteredOptions);\n    var selected = selectedOptions.map(function (item) {\n      return getOptionValue(item);\n    });\n    var _iteratorNormalCompletion = true,\n        _didIteratorError = false,\n        _iteratorError = undefined;\n\n    try {\n      for (var _iterator = filteredSet[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var item = _step.value;\n\n        if (selected.includes(getOptionValue(item))) {\n          filteredSet.delete(item);\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return _to_consumable_array(filteredSet);\n  }, [filteredOptions, selectedOptions, getOptionValue, showSelected]);\n  return _object_spread_props(_object_spread({}, chipsInputState), {\n    fieldValue: fieldValue,\n    handleInputChange: handleInputChange,\n    opened: opened,\n    setOpened: setOpened,\n    filteredOptions: filteredOptions,\n    focusedOptionIndex: focusedOptionIndex,\n    setFocusedOptionIndex: setFocusedOptionIndex,\n    focusedOption: focusedOption,\n    setFocusedOption: setFocusedOption,\n    selectedOptions: selectedOptions\n  });\n};","map":{"version":3,"mappings":"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","names":["React","useChipsInput","useChipsSelect","props","options","filterFn","getOptionLabel","getOptionValue","showSelected","useState","opened","setOpened","focusedOptionIndex","setFocusedOptionIndex","focusedOption","setFocusedOption","fieldValue","selectedOptions","chipsInputState","handleInputChange","e","filteredOptions","useMemo","filter","option","filterOutSelectedIfNeeded","length","filteredSet","Set","selected","map","item","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","includes","delete","_to_consumable_array","_object_spread_props"],"sources":["C:\\Users\\kulag\\vk\\Ability\\node_modules\\@vkontakte\\vkui\\src\\hooks\\useChipsSelect.ts"],"sourcesContent":["import * as React from 'react';\nimport { ChipOption } from '../components/Chip/Chip';\nimport { ChipsSelectProps } from '../components/ChipsSelect/ChipsSelect';\nimport { useChipsInput } from './useChipsInput';\n\nexport const useChipsSelect = <Option extends ChipOption>(\n  props: Partial<ChipsSelectProps<Option>>,\n) => {\n  const { options, filterFn, getOptionLabel, getOptionValue, showSelected } = props;\n\n  const [opened, setOpened] = React.useState(false);\n  const [focusedOptionIndex, setFocusedOptionIndex] = React.useState<number | null>(0);\n  const [focusedOption, setFocusedOption] = React.useState<Option | null>(null);\n\n  const { fieldValue, selectedOptions, ...chipsInputState } = useChipsInput(props);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement> | undefined) => {\n    if (!e) {\n      return;\n    }\n    chipsInputState.handleInputChange(e);\n\n    if (!opened) {\n      setOpened(true);\n      setFocusedOptionIndex(0);\n    }\n  };\n\n  let filteredOptions = React.useMemo(() => {\n    return filterFn\n      ? options!.filter((option) => filterFn(fieldValue, option, getOptionLabel))\n      : (options as Option[]);\n  }, [options, filterFn, fieldValue, getOptionLabel]);\n\n  filteredOptions = React.useMemo(\n    function filterOutSelectedIfNeeded() {\n      if (!filteredOptions.length || showSelected) {\n        return filteredOptions;\n      }\n\n      const filteredSet = new Set(filteredOptions);\n      const selected = selectedOptions.map((item) => getOptionValue!(item));\n\n      for (const item of filteredSet) {\n        if (selected.includes(getOptionValue!(item))) {\n          filteredSet.delete(item);\n        }\n      }\n\n      return [...filteredSet];\n    },\n    [filteredOptions, selectedOptions, getOptionValue, showSelected],\n  );\n\n  return {\n    ...chipsInputState,\n    fieldValue,\n    handleInputChange,\n    opened,\n    setOpened,\n    filteredOptions,\n    focusedOptionIndex,\n    setFocusedOptionIndex,\n    focusedOption,\n    setFocusedOption,\n    selectedOptions,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}