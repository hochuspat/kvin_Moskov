{"ast":null,"code":"import { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_spread_props } from \"@swc/helpers/_/_object_spread_props\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport * as React from \"react\";\nimport { classNames, noop } from \"@vkontakte/vkjs\";\nimport { useExternRef } from \"../../hooks/useExternRef\";\nimport { usePlatform } from \"../../hooks/usePlatform\";\nimport { Platform } from \"../../lib/platform\";\nimport { ListContext } from \"../List/ListContext\";\nimport { Removable } from \"../Removable/Removable\";\nimport { SimpleCell } from \"../SimpleCell/SimpleCell\";\nimport { CellCheckbox } from \"./CellCheckbox/CellCheckbox\";\nimport { CellDragger } from \"./CellDragger/CellDragger\";\nimport { useDraggable } from \"./useDraggable\";\n/**\n * @see https://vkcom.github.io/VKUI/#/Cell\n */\n\nexport var Cell = function (_param) {\n  var mode = _param.mode,\n      _param_onRemove = _param.onRemove,\n      onRemove = _param_onRemove === void 0 ? noop : _param_onRemove,\n      _param_removePlaceholder = _param.removePlaceholder,\n      removePlaceholder = _param_removePlaceholder === void 0 ? \"Удалить\" : _param_removePlaceholder,\n      onDragFinish = _param.onDragFinish,\n      before = _param.before,\n      after = _param.after,\n      disabled = _param.disabled,\n      draggable = _param.draggable,\n      ComponentProps = _param.Component,\n      onChange = _param.onChange,\n      name = _param.name,\n      value = _param.value,\n      checked = _param.checked,\n      defaultChecked = _param.defaultChecked,\n      getRootRef = _param.getRootRef,\n      _param_draggerLabel = _param.draggerLabel,\n      draggerLabel = _param_draggerLabel === void 0 ? \"Перенести ячейку\" : _param_draggerLabel,\n      className = _param.className,\n      style = _param.style,\n      restProps = _object_without_properties(_param, [\"mode\", \"onRemove\", \"removePlaceholder\", \"onDragFinish\", \"before\", \"after\", \"disabled\", \"draggable\", \"Component\", \"onChange\", \"name\", \"value\", \"checked\", \"defaultChecked\", \"getRootRef\", \"draggerLabel\", \"className\", \"style\"]);\n\n  var selectable = mode === \"selectable\";\n  var removable = mode === \"removable\";\n  var Component = selectable ? \"label\" : ComponentProps;\n  var platform = usePlatform();\n  var rootElRef = useExternRef(getRootRef);\n\n  var _useDraggable = useDraggable({\n    rootElRef: rootElRef,\n    onDragFinish: onDragFinish\n  }),\n      dragging = _useDraggable.dragging,\n      draggableProps = _object_without_properties(_useDraggable, [\"dragging\"]);\n\n  var toggleDrag = React.useContext(ListContext).toggleDrag;\n  React.useEffect(function () {\n    if (dragging) {\n      toggleDrag(true);\n      return function () {\n        return toggleDrag(false);\n      };\n    }\n\n    return undefined;\n  }, [dragging, toggleDrag]);\n  var dragger;\n\n  if (draggable) {\n    dragger = /*#__PURE__*/React.createElement(CellDragger, _object_spread({\n      className: \"vkuiCell__dragger\",\n      \"aria-label\": draggerLabel\n    }, draggableProps));\n  }\n\n  var checkbox;\n\n  if (selectable) {\n    var checkboxProps = {\n      name: name,\n      value: value,\n      onChange: onChange,\n      defaultChecked: defaultChecked,\n      checked: checked,\n      disabled: disabled\n    };\n    checkbox = /*#__PURE__*/React.createElement(CellCheckbox, _object_spread({\n      className: \"vkuiCell__checkbox\"\n    }, checkboxProps));\n  }\n\n  var simpleCellDisabled = draggable && !selectable || removable && !restProps.onClick || disabled;\n  var hasActive = !simpleCellDisabled && !dragging;\n  var cellClasses = classNames(\"vkuiCell\", platform === Platform.IOS && \"vkuiCell--ios\", dragging && \"vkuiCell--dragging\", removable && \"vkuiCell--removable\", Component === \"label\" && \"vkuiCell--selectable\", disabled && \"vkuiCell--disabled\");\n\n  var simpleCellProps = _object_spread_props(_object_spread({\n    hasActive: hasActive,\n    hasHover: hasActive && !removable\n  }, restProps), {\n    className: \"vkuiCell__content\",\n    disabled: simpleCellDisabled,\n    Component: Component,\n    before: /*#__PURE__*/React.createElement(React.Fragment, null, draggable && platform !== Platform.IOS && dragger, selectable && checkbox, before),\n    after: /*#__PURE__*/React.createElement(React.Fragment, null, draggable && platform === Platform.IOS && dragger, after)\n  });\n\n  if (removable) {\n    return /*#__PURE__*/React.createElement(Removable, {\n      className: classNames(cellClasses, className),\n      style: style,\n      getRootRef: rootElRef,\n      removePlaceholder: removePlaceholder,\n      onRemove: function (e) {\n        return onRemove(e, rootElRef.current);\n      }\n    }, platform === Platform.IOS ? function (param) {\n      var isRemoving = param.isRemoving;\n      return /*#__PURE__*/React.createElement(SimpleCell, _object_spread_props(_object_spread({}, simpleCellProps), {\n        disabled: simpleCellProps.disabled || isRemoving\n      }));\n    } : /*#__PURE__*/React.createElement(SimpleCell, simpleCellProps));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(cellClasses, className),\n    style: style,\n    ref: rootElRef\n  }, /*#__PURE__*/React.createElement(SimpleCell, simpleCellProps));\n};\nCell.Checkbox = CellCheckbox;","map":{"version":3,"mappings":";;;AAAA,YAAYA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,EAAqBC,IAArB,QAAiC,iBAAjC;AACA,SAASC,YAAT,QAA6B,0BAA7B;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,QAAT,QAAyB,oBAAzB;AAEA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,SAAT,QAA0C,wBAA1C;AACA,SAASC,UAAT,QAA4C,0BAA5C;AACA,SAASC,YAAT,QAAgD,6BAAhD;AACA,SAASC,WAAT,QAA4B,2BAA5B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AAqCA;;;;AAGA,OAAO,IAAMC,OAAO;MAClBC;MAAAA,yBACAC;MAAAA,wCAAWZ,IAAXY,GAAWZ;MAAAA,kCACXa;MAAAA,0DAAoB,SAApBA,GAAoBC;MACpBC;MACAC;MACAC;MACAC;MACAC;MACAC,cAAWC,UAAXD;MACAE;MACAC;MACAC;MACAC;MACAC;MACAC;MAAAA,6BACAC;MAAAA,gDAAe,kBAAfA,GAAeC;MACfC;MACAC;MACGC,gDAlBHrB,MAkBGqB,EAjBHpB,UAiBGoB,EAhBHnB,mBAgBGmB,EAfHjB,cAeGiB,EAdHhB,QAcGgB,EAbHf,OAaGe,EAZHd,UAYGc,EAXHb,WAWGa,EAVHZ,WAUGY,EATHV,UASGU,EARHT,MAQGS,EAPHR,OAOGQ,EANHP,SAMGO,EALHN,gBAKGM,EAJHL,YAIGK,EAHHJ,cAGGI,EAFHF,WAEGE,EADHD,OACGC;;EAEH,IAAMC,aAAatB,SAAS,YAA5B;EACA,IAAMuB,YAAYvB,SAAS,WAA3B;EACA,IAAMS,YAAYa,aAAa,OAAbA,GAAuBZ,cAAzC;EAEA,IAAMc,WAAWjC,aAAjB;EAEA,IAAMkC,YAAYnC,aAAa0B,UAAb1B,CAAlB;;EAEA,IAAwCQ,6BAAa;IACnD2B,oBADmD;IAEnDrB;EAFmD,CAAbN,CAAxC;EAAA,IAAM4B,QAAEA,GAAgC5B,cAAhC4B,QAAR;EAAA,IAAqBC,4CAAmB7B,aAAnB6B,EAAmB7B,CAAhC4B,UAAgC5B,CAAnB6B,CAArB;;EAKA,IAAMC,UAAEA,GAAezC,MAAM0C,UAAN1C,CAAiBM,WAAjBN,EAAfyC,UAAR;EACAzC,MAAM2C,SAAN3C,CAAgB;IACd,IAAIuC,QAAJ,EAAc;MACZE,WAAW,IAAXA;MACA,OAAO;eAAMA,WAAW,KAAXA;OAAb;IACF;;IACA,OAAOG,SAAP;EACF,CANA5C,EAMG,CAACuC,QAAD,EAAWE,UAAX,CANHzC;EAQA,IAAI6C,OAAJ;;EACA,IAAIxB,SAAJ,EAAe;IACbwB,uBACE7C,oBAACU,WAAD,EAACA;MACCsB,SAAS,qBADVtB;MAECoC,cAAYhB;IAFbpB,GAGK8B,cAHL9B,CAAD,CADFmC;EAOF;;EAEA,IAAIE,QAAJ;;EACA,IAAIZ,UAAJ,EAAgB;IACd,IAAMa,gBAAmC;MACvCvB,UADuC;MAEvCC,YAFuC;MAGvCF,kBAHuC;MAIvCI,8BAJuC;MAKvCD,gBALuC;MAMvCP;IANuC,CAAzC;IAQA2B,wBAAW/C,oBAACS,YAAD,EAACA;MAAauB,SAAS;IAAtBvB,GAAsDuC,aAAtDvC,CAAD,CAAXsC;EACF;;EAEA,IAAME,qBACJ5B,SAACA,IAAa,CAACc,UAAf,IAA+BC,aAAa,CAACF,UAAUgB,OAAvD,IAAmE9B,QADrE;EAEA,IAAM+B,YAAY,CAACF,kBAAD,IAAuB,CAACV,QAA1C;EAEA,IAAMa,cAAcnD,uBAElBoC,aAAahC,SAASgD,GAAtBhB,IAAyB,eAFPpC,EAGlBsC,gCAHkBtC,EAIlBmC,kCAJkBnC,EAKlBqB,cAAc,OAAdA,IAAc,sBALIrB,EAMlBmB,gCANkBnB,CAApB;;EASA,IAAMqD,kBAAkBC;IACtBJ,WAAWA,SADW;IAEtBK,UAAUL,aAAa,CAACf;EAFF,GAGnBF,SAHmB,GAGnBA;IACHF,SAAS,qBADNE;IAEHd,UAAU6B,kBAFPf;IAGHZ,WAAWA,SAHRY;IAIHhB,qBACElB,oBAACA,MAAMyD,QAAP,EAAe,IAAf,EACGpC,aAAagB,aAAahC,SAASgD,GAAnChC,IAA0CwB,OAD7C,EAEGV,cAAcY,QAFjB,EAGG7B,MAHH,CALCgB;IAWHf,oBACEnB,oBAACA,MAAMyD,QAAP,EAAe,IAAf,EACGpC,aAAagB,aAAahC,SAASgD,GAAnChC,IAA0CwB,OAD7C,EAEG1B,KAFH;EAZCe,CAHmB,CAAxB;;EAsBA,IAAIE,SAAJ,EAAe;IACb,oBACEpC,oBAACO,SAAD,EAACA;MACCyB,WAAW/B,WAAWmD,WAAXnD,EAAwB+B,SAAxB/B,CADZM;MAEC0B,OAAOA,KAFR1B;MAGCsB,YAAYS,SAHb/B;MAICQ,mBAAmBA,iBAJpBR;MAKCO,UAAU,UAAC4C,CAAD,EAACA;eAAM5C,SAAS4C,CAAT5C,EAAYwB,UAAUqB,OAAtB7C;;IALlBP,CAAD,EAOG8B,aAAahC,SAASgD,GAAtBhB,GACC;UAAGuB;0BACD5D,oBAACQ,UAAD,EAACA,wCAAe8C,eAAf9C,GAAe8C;QAAiBlC,UAAUkC,gBAAgBlC,QAAhBkC,IAA4BM;MAAvDN,CAAf9C,CAAD;KAFH6B,gBAKCrC,oBAACQ,UAAD,EAAgB8C,eAAhB,CAZJ,CADF;EAiBF;;EAEA,oBACEtD,oBAAC6D,KAAD,EAACA;IAAI7B,WAAW/B,WAAWmD,WAAXnD,EAAwB+B,SAAxB/B,CAAf4D;IAAmD5B,OAAOA,KAA1D4B;IAAiEC,KAAKxB;EAAtEuB,CAAD,eACE7D,oBAACQ,UAAD,EAAgB8C,eAAhB,CADF,CADF;AAKF,CA/HO;AAiIP1C,KAAKmD,QAALnD,GAAgBH,YAAhBG","names":["React","classNames","noop","useExternRef","usePlatform","Platform","ListContext","Removable","SimpleCell","CellCheckbox","CellDragger","useDraggable","Cell","mode","onRemove","removePlaceholder","_param_removePlaceholder","onDragFinish","before","after","disabled","draggable","Component","ComponentProps","onChange","name","value","checked","defaultChecked","getRootRef","draggerLabel","_param_draggerLabel","className","style","restProps","selectable","removable","platform","rootElRef","dragging","draggableProps","toggleDrag","useContext","useEffect","undefined","dragger","aria-label","checkbox","checkboxProps","simpleCellDisabled","onClick","hasActive","cellClasses","IOS","simpleCellProps","_object_spread_props","hasHover","Fragment","e","current","isRemoving","div","ref","Checkbox"],"sources":["C:\\Users\\kulag\\vk\\Ability\\node_modules\\@vkontakte\\vkui\\src\\components\\Cell\\Cell.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNames, noop } from '@vkontakte/vkjs';\nimport { useExternRef } from '../../hooks/useExternRef';\nimport { usePlatform } from '../../hooks/usePlatform';\nimport { Platform } from '../../lib/platform';\nimport { HasRootRef } from '../../types';\nimport { ListContext } from '../List/ListContext';\nimport { Removable, RemovableProps } from '../Removable/Removable';\nimport { SimpleCell, SimpleCellProps } from '../SimpleCell/SimpleCell';\nimport { CellCheckbox, CellCheckboxProps } from './CellCheckbox/CellCheckbox';\nimport { CellDragger } from './CellDragger/CellDragger';\nimport { useDraggable } from './useDraggable';\nimport styles from './Cell.module.css';\n\nexport interface CellProps\n  extends Omit<SimpleCellProps, 'getRootRef'>,\n    RemovableProps,\n    HasRootRef<HTMLDivElement> {\n  mode?: 'removable' | 'selectable';\n  /**\n   * В режиме перетаскивания ячейка перестает быть кликабельной, то есть при клике переданный onClick вызываться не будет\n   */\n  draggable?: boolean;\n  /**\n   * Имя для input в режиме selectable\n   */\n  name?: string;\n  /**\n   * В режиме selectable реагирует на входящие значения пропса cheсked, как зависящий напрямую от входящего значения\n   */\n  checked?: boolean;\n  /**\n   * В режиме selectable реагирует на входящие значения пропса defaultChecked как неконтролируемый компонент\n   */\n  defaultChecked?: boolean;\n  /**\n   * Коллбэк срабатывает при завершении перетаскивания.\n   * **Важно:** режим перетаскивания не меняет порядок ячеек в DOM. В коллбэке есть объект с полями `from` и `to`.\n   * Эти числа нужны для того, чтобы разработчик понимал, с какого индекса на какой произошел переход. В песочнице\n   * есть рабочий пример с обработкой этих чисел и перерисовкой списка.\n   */\n  onDragFinish?: ({ from, to }: { from: number; to: number }) => void;\n  /**\n   * aria-label для кнопки перетаскивания ячейки\n   */\n  draggerLabel?: string;\n}\n\n/**\n * @see https://vkcom.github.io/VKUI/#/Cell\n */\nexport const Cell = ({\n  mode,\n  onRemove = noop,\n  removePlaceholder = 'Удалить',\n  onDragFinish,\n  before,\n  after,\n  disabled,\n  draggable,\n  Component: ComponentProps,\n  onChange,\n  name,\n  value,\n  checked,\n  defaultChecked,\n  getRootRef,\n  draggerLabel = 'Перенести ячейку',\n  className,\n  style,\n  ...restProps\n}: CellProps) => {\n  const selectable = mode === 'selectable';\n  const removable = mode === 'removable';\n  const Component = selectable ? 'label' : ComponentProps;\n\n  const platform = usePlatform();\n\n  const rootElRef = useExternRef(getRootRef);\n\n  const { dragging, ...draggableProps } = useDraggable({\n    rootElRef,\n    onDragFinish,\n  });\n\n  const { toggleDrag } = React.useContext(ListContext);\n  React.useEffect(() => {\n    if (dragging) {\n      toggleDrag(true);\n      return () => toggleDrag(false);\n    }\n    return undefined;\n  }, [dragging, toggleDrag]);\n\n  let dragger;\n  if (draggable) {\n    dragger = (\n      <CellDragger\n        className={styles['Cell__dragger']}\n        aria-label={draggerLabel}\n        {...draggableProps}\n      />\n    );\n  }\n\n  let checkbox;\n  if (selectable) {\n    const checkboxProps: CellCheckboxProps = {\n      name,\n      value,\n      onChange,\n      defaultChecked,\n      checked,\n      disabled,\n    };\n    checkbox = <CellCheckbox className={styles['Cell__checkbox']} {...checkboxProps} />;\n  }\n\n  const simpleCellDisabled =\n    (draggable && !selectable) || (removable && !restProps.onClick) || disabled;\n  const hasActive = !simpleCellDisabled && !dragging;\n\n  const cellClasses = classNames(\n    styles['Cell'],\n    platform === Platform.IOS && styles['Cell--ios'],\n    dragging && styles['Cell--dragging'],\n    removable && styles['Cell--removable'],\n    Component === 'label' && styles['Cell--selectable'],\n    disabled && styles['Cell--disabled'],\n  );\n\n  const simpleCellProps = {\n    hasActive: hasActive,\n    hasHover: hasActive && !removable,\n    ...restProps,\n    className: styles['Cell__content'],\n    disabled: simpleCellDisabled,\n    Component: Component,\n    before: (\n      <React.Fragment>\n        {draggable && platform !== Platform.IOS && dragger}\n        {selectable && checkbox}\n        {before}\n      </React.Fragment>\n    ),\n    after: (\n      <React.Fragment>\n        {draggable && platform === Platform.IOS && dragger}\n        {after}\n      </React.Fragment>\n    ),\n  };\n\n  if (removable) {\n    return (\n      <Removable\n        className={classNames(cellClasses, className)}\n        style={style}\n        getRootRef={rootElRef}\n        removePlaceholder={removePlaceholder}\n        onRemove={(e) => onRemove(e, rootElRef.current)}\n      >\n        {platform === Platform.IOS ? (\n          ({ isRemoving }) => (\n            <SimpleCell {...simpleCellProps} disabled={simpleCellProps.disabled || isRemoving} />\n          )\n        ) : (\n          <SimpleCell {...simpleCellProps} />\n        )}\n      </Removable>\n    );\n  }\n\n  return (\n    <div className={classNames(cellClasses, className)} style={style} ref={rootElRef}>\n      <SimpleCell {...simpleCellProps} />\n    </div>\n  );\n};\n\nCell.Checkbox = CellCheckbox;\n"]},"metadata":{},"sourceType":"module"}