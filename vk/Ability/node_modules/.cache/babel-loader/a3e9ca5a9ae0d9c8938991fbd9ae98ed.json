{"ast":null,"code":"import { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_spread_props } from \"@swc/helpers/_/_object_spread_props\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport * as React from \"react\";\nimport { Icon16Chevron } from \"@vkontakte/icons\";\nimport { classNames, hasReactNode } from \"@vkontakte/vkjs\";\nimport { RootComponent } from \"../RootComponent/RootComponent\";\nimport { Tappable } from \"../Tappable/Tappable\";\nimport { Paragraph } from \"../Typography/Paragraph/Paragraph\";\nvar stylesMode = {\n  add: \"vkuiMiniInfoCell--mode-add\",\n  accent: \"vkuiMiniInfoCell--mode-accent\",\n  more: \"vkuiMiniInfoCell--mode-more\"\n};\nvar stylesTextWrap = {\n  nowrap: \"vkuiMiniInfoCell--textWrap-nowrap\",\n  full: \"vkuiMiniInfoCell--textWrap-full\",\n  short: \"vkuiMiniInfoCell--textWrap-short\"\n};\n/**\n * @see https://vkcom.github.io/VKUI/#/MiniInfoCell\n */\n\nexport var MiniInfoCell = function (_param) {\n  var before = _param.before,\n      after = _param.after,\n      children = _param.children,\n      _param_mode = _param.mode,\n      mode = _param_mode === void 0 ? \"base\" : _param_mode,\n      _param_textWrap = _param.textWrap,\n      textWrap = _param_textWrap === void 0 ? \"nowrap\" : _param_textWrap,\n      _param_expandable = _param.expandable,\n      expandable = _param_expandable === void 0 ? false : _param_expandable,\n      className = _param.className,\n      restProps = _object_without_properties(_param, [\"before\", \"after\", \"children\", \"mode\", \"textWrap\", \"expandable\", \"className\"]);\n\n  var cellClasses = classNames(\"vkuiMiniInfoCell\", stylesTextWrap[textWrap], mode !== \"base\" && stylesMode[mode], className);\n  var cellContent = /*#__PURE__*/React.createElement(React.Fragment, null, hasReactNode(before) && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"vkuiMiniInfoCell__before\"\n  }, before), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"vkuiMiniInfoCell__middle\"\n  }, /*#__PURE__*/React.createElement(Paragraph, {\n    className: \"vkuiMiniInfoCell__content\",\n    weight: mode === \"more\" ? \"2\" : undefined\n  }, children), expandable && /*#__PURE__*/React.createElement(Icon16Chevron, null)), hasReactNode(after) && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"vkuiMiniInfoCell__after\"\n  }, after));\n  return restProps.onClick ? /*#__PURE__*/React.createElement(Tappable, _object_spread_props(_object_spread({\n    Component: \"div\",\n    role: \"button\"\n  }, restProps), {\n    className: cellClasses\n  }), cellContent) : /*#__PURE__*/React.createElement(RootComponent, _object_spread_props(_object_spread({}, restProps), {\n    baseClassName: cellClasses\n  }), cellContent);\n};","map":{"version":3,"mappings":";;;AAAA,YAAYA,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,UAAT,EAAqBC,YAArB,QAAyC,iBAAzC;AAEA,SAASC,aAAT,QAA8B,gCAA9B;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,SAAT,QAA0B,mCAA1B;AAGA,IAAMC,aAAa;EACjBC,GAAG,8BADc;EAEjBC,MAAM,iCAFW;EAGjBC,IAAI;AAHa,CAAnB;AAMA,IAAMC,iBAAiB;EACrBC,MAAM,qCADe;EAErBC,IAAI,mCAFiB;EAGrBC,KAAK;AAHgB,CAAvB;AA4CA;;;;AAGA,OAAO,IAAMC,eAAe;MAC1BC;MACAC;MACAC;MAAAA,qBACAC;MAAAA,gCAAO,MAAPA,GAAOC;MAAAC,yBACPC;MAAAA,wCAAW,QAAXA,GAAWD;MAAAE,2BACXC;MAAAA,4CAAa,KAAbA,GAAaD;MACbE;MACGC,gDAPHV,QAOGU,EANHT,OAMGS,EALHR,UAKGQ,EAJHP,MAIGO,EAHHJ,UAGGI,EAFHF,YAEGE,EADHD,WACGC;;EAEH,IAAMC,cAAczB,+BAElBS,cAAc,CAACW,QAAD,CAFIpB,EAGlBiB,SAAS,MAATA,IAAmBZ,UAAU,CAACY,IAAD,CAHXjB,EAIlBuB,SAJkBvB,CAApB;EAOA,IAAM0B,2BACJ5B,oBAACA,MAAM6B,QAAP,EAAe,IAAf,EACG1B,aAAaa,MAAbb,KAAaa,aAAWhB,oBAAC8B,MAAD,EAACA;IAAKL,SAAS;EAAdK,CAAD,EAAkDd,MAAlD,CAD3B,EAC6EA,aAC3EhB,oBAAC+B,KAAD,EAACA;IAAIN,SAAS;EAAbM,CAAD,eACE/B,oBAACM,SAAD,EAACA;IACCmB,SAAS,6BADVnB;IAEC0B,QAAQb,SAAS,MAATA,GAAkB,GAAlBA,GAAwBc;EAFjC3B,CAAD,EAIGY,QAJH,CADF,EAOGM,2BAAcxB,oBAACC,aAAD,EAACA,IAAD,CAPjB,CAFF,EAWGE,aAAac,KAAbd,KAAac,aAAUjB,oBAAC8B,MAAD,EAACA;IAAKL,SAAS;EAAdK,CAAD,EAAiDb,KAAjD,CAX1B,CADF;EAgBA,OAAOS,UAAUQ,OAAVR,GAAiB,aACtB1B,oBAACK,QAAD,EAACA;IAAS8B,WAAU,KAAnB9B;IAAyB+B,MAAK;EAA9B/B,GAA2CqB,SAA3CrB,GAA2CqB;IAAWD,WAAWE;EAAtBD,CAA3CrB,CAAD,EACGuB,WADH,CADKF,GAEFE,aAGH5B,oBAACI,aAAD,EAACA,wCAAkBsB,SAAlBtB,GAAkBsB;IAAWW,eAAeV;EAA1BD,CAAlBtB,CAAD,EACGwB,WADH,CALF;AASF,CA1CO","names":["React","Icon16Chevron","classNames","hasReactNode","RootComponent","Tappable","Paragraph","stylesMode","add","accent","more","stylesTextWrap","nowrap","full","short","MiniInfoCell","before","after","children","mode","_param_mode","_param_textWrap","textWrap","_param_expandable","expandable","className","restProps","cellClasses","cellContent","Fragment","span","div","weight","undefined","onClick","Component","role","baseClassName"],"sources":["C:\\Users\\kulag\\vk\\Ability\\node_modules\\@vkontakte\\vkui\\src\\components\\MiniInfoCell\\MiniInfoCell.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Icon16Chevron } from '@vkontakte/icons';\nimport { classNames, hasReactNode } from '@vkontakte/vkjs';\nimport { HTMLAttributesWithRootRef } from '../../types';\nimport { RootComponent } from '../RootComponent/RootComponent';\nimport { Tappable } from '../Tappable/Tappable';\nimport { Paragraph } from '../Typography/Paragraph/Paragraph';\nimport styles from './MiniInfoCell.module.css';\n\nconst stylesMode = {\n  add: styles['MiniInfoCell--mode-add'],\n  accent: styles['MiniInfoCell--mode-accent'],\n  more: styles['MiniInfoCell--mode-more'],\n};\n\nconst stylesTextWrap = {\n  nowrap: styles['MiniInfoCell--textWrap-nowrap'],\n  full: styles['MiniInfoCell--textWrap-full'],\n  short: styles['MiniInfoCell--textWrap-short'],\n};\n\nexport interface MiniInfoCellProps extends HTMLAttributesWithRootRef<HTMLDivElement> {\n  /**\n   * Иконка слева.<br />\n   * Рекомендуется использовать иконки размера 20.\n   */\n  before: React.ReactNode;\n\n  /**\n   * Содержимое справа.<br />\n   * `<UsersStack size=\"s\" />` или `<Avatar size={24} />`\n   */\n  after?: React.ReactNode;\n\n  /**\n   * Тип ячейки:\n   *\n   * - `base` – базовая ячейка с серой иконкой и серым текстом.<br />\n   * В компонент можно передать `Link`, чтобы визуально сделать часть текста ссылкой.\n   * - `add` – тип ячейки, который показывает, что взаимодействие с ней должно вызывать действие добавления чего-то.\n   * - `more` – взаимодействие с такой ячейкой должно открывать какую-то подробную информацию.\n   */\n  mode?: 'base' | 'accent' | 'add' | 'more';\n\n  /**\n   * Тип отображения текста:\n   *\n   * - `nowrap` – в одну строку, текст не переносится и обрезается.\n   * - `short` – максимально отображается 3 строки, остальное обрезается.\n   * - `full` – текст отображается полностью.\n   */\n  textWrap?: 'nowrap' | 'short' | 'full';\n\n  /**\n   * Передавать `true`, если предполагается переход при клике по ячейке.\n   */\n  expandable?: boolean;\n}\n\n/**\n * @see https://vkcom.github.io/VKUI/#/MiniInfoCell\n */\nexport const MiniInfoCell = ({\n  before,\n  after,\n  children,\n  mode = 'base',\n  textWrap = 'nowrap',\n  expandable = false,\n  className,\n  ...restProps\n}: MiniInfoCellProps) => {\n  const cellClasses = classNames(\n    styles['MiniInfoCell'],\n    stylesTextWrap[textWrap],\n    mode !== 'base' && stylesMode[mode],\n    className,\n  );\n\n  const cellContent = (\n    <React.Fragment>\n      {hasReactNode(before) && <span className={styles['MiniInfoCell__before']}>{before}</span>}\n      <div className={styles['MiniInfoCell__middle']}>\n        <Paragraph\n          className={styles['MiniInfoCell__content']}\n          weight={mode === 'more' ? '2' : undefined}\n        >\n          {children}\n        </Paragraph>\n        {expandable && <Icon16Chevron />}\n      </div>\n      {hasReactNode(after) && <span className={styles['MiniInfoCell__after']}>{after}</span>}\n    </React.Fragment>\n  );\n\n  return restProps.onClick ? (\n    <Tappable Component=\"div\" role=\"button\" {...restProps} className={cellClasses}>\n      {cellContent}\n    </Tappable>\n  ) : (\n    <RootComponent {...restProps} baseClassName={cellClasses}>\n      {cellContent}\n    </RootComponent>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}