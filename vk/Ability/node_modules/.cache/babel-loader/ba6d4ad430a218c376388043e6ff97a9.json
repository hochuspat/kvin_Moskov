{"ast":null,"code":"import { _ as _instanceof } from \"@swc/helpers/_/_instanceof\";\nimport { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_spread_props } from \"@swc/helpers/_/_object_spread_props\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport { autoUpdate as autoUpdateLib } from \"@vkontakte/vkui-floating-ui/react-dom\";\nvar defaultOptions = {\n  ancestorScroll: true,\n  ancestorResize: true,\n  // По умолчанию отключаем, т.к. навешивать `MutationObserver` может быть дорого.\n  // В `autoUpdateLib` по умолчанию опция включена. Там используется ResizeObserver, но и он не менее дорогостоящий.\n  // https://github.com/floating-ui/floating-ui/blob/0a34fe9cc2c7483976785a71bd0777cd7c3f2a6a/packages/dom/src/autoUpdate.ts#L6-L33\n  elementResize: false,\n  animationFrame: false\n};\nexport function autoUpdateFloatingElement(reference, floating, update) {\n  var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : defaultOptions;\n\n  var _options_elementResize = options.elementResize,\n      elementResize = _options_elementResize === void 0 ? false : _options_elementResize,\n      restOptions = _object_without_properties(options, [\"elementResize\"]);\n\n  var autoUpdateLibDisposer = autoUpdateLib(reference, floating, update, _object_spread_props(_object_spread({}, restOptions), {\n    // Отключаем в библиотеке, т.к. под капотом используется `ResizeObserver`, которое не покрывается нашим `browserlist`.\n    // Вместо него мы используем `MutationObserver`.\n    // https://caniuse.com/resizeobserver\n    elementResize: false\n  })); // В случае если `ResizeObserver` будет полифилиться или он будет покрываться нашим `browserlist`, то надо удалить\n  // код с `MutationObserver`.\n\n  var observer = null;\n\n  if (elementResize) {\n    var initialUpdate = true;\n    observer = new MutationObserver(function () {\n      if (!initialUpdate) {\n        update();\n      }\n\n      initialUpdate = false;\n    });\n\n    if (_instanceof(reference, Element)) {\n      observer.observe(reference, {\n        childList: true,\n        subtree: true\n      });\n    }\n\n    observer.observe(floating, {\n      childList: true,\n      subtree: true\n    });\n  }\n\n  return function () {\n    if (observer !== null) {\n      observer.disconnect();\n      observer = null;\n    }\n\n    autoUpdateLibDisposer();\n  };\n}","map":{"version":3,"mappings":";;;;AAAA,SACEA,cAAcC,aADhB,QAKO,uCALP;AAOA,IAAMC,iBAAiB;EACrBC,gBAAgB,IADK;EAErBC,gBAAgB,IAFK;EAGrB;EACA;EACA;EACAC,eAAe,KANM;EAOrBC,gBAAgB;AAPK,CAAvB;AAUA,OAAO,SAASC,yBAAT,CACLC,SADK,EAELC,QAFK,EAGLC,MAHK,EAGa;MAClBC,2EAAsCT;;EAEtC,6BAAkDS,QAA1CN,aAAR;EAAA,IAAQA,oDAAgB,KAAhBA,GAAgBO,sBAAxB;EAAA,IAAkCC,yCAAgBF,OAAhBE,EAAgBF,CAA1CN,eAA0CM,CAAhBE,CAAlC;;EAEA,IAAMC,wBAAwBb,cAAcO,SAAdP,EAAyBQ,QAAzBR,EAAmCS,MAAnCT,EAA2Cc,wCACpEF,WADoE,GACpEA;IACH;IACA;IACA;IACAR,eAAe;EAJZQ,CADoE,CAA3CZ,CAA9B,CALkB,CAalB;EACA;;EACA,IAAIe,WAAoC,IAAxC;;EACA,IAAIX,aAAJ,EAAmB;IACjB,IAAIY,gBAAgB,IAApB;IACAD,WAAW,IAAIE,gBAAJ,CAAqB;MAC9B,IAAI,CAACD,aAAL,EAAoB;QAClBP;MACF;;MAEAO,gBAAgB,KAAhBA;IACF,CANW,CAAXD;;IAQA,IAAIR,WAAS,CAATA,SAAS,EAAYW,OAAZ,CAAb,EAAkC;MAChCH,SAASI,OAATJ,CAAiBR,SAAjBQ,EAA4B;QAC1BK,WAAW,IADe;QAE1BC,SAAS;MAFiB,CAA5BN;IAIF;;IAEAA,SAASI,OAATJ,CAAiBP,QAAjBO,EAA2B;MACzBK,WAAW,IADc;MAEzBC,SAAS;IAFgB,CAA3BN;EAIF;;EAEA,OAAO;IACL,IAAIA,aAAa,IAAjB,EAAuB;MACrBA,SAASO,UAATP;MACAA,WAAW,IAAXA;IACF;;IACAF;EACF,CANA;AAOF","names":["autoUpdate","autoUpdateLib","defaultOptions","ancestorScroll","ancestorResize","elementResize","animationFrame","autoUpdateFloatingElement","reference","floating","update","options","_options_elementResize","restOptions","autoUpdateLibDisposer","_object_spread_props","observer","initialUpdate","MutationObserver","Element","observe","childList","subtree","disconnect"],"sources":["C:\\Users\\kulag\\vk\\Ability\\node_modules\\@vkontakte\\vkui\\src\\lib\\floating\\adapters.ts"],"sourcesContent":["import {\n  autoUpdate as autoUpdateLib,\n  type AutoUpdateOptions,\n  type FloatingElement,\n  type ReferenceType,\n} from '@vkontakte/vkui-floating-ui/react-dom';\n\nconst defaultOptions = {\n  ancestorScroll: true,\n  ancestorResize: true,\n  // По умолчанию отключаем, т.к. навешивать `MutationObserver` может быть дорого.\n  // В `autoUpdateLib` по умолчанию опция включена. Там используется ResizeObserver, но и он не менее дорогостоящий.\n  // https://github.com/floating-ui/floating-ui/blob/0a34fe9cc2c7483976785a71bd0777cd7c3f2a6a/packages/dom/src/autoUpdate.ts#L6-L33\n  elementResize: false,\n  animationFrame: false,\n};\n\nexport function autoUpdateFloatingElement(\n  reference: ReferenceType,\n  floating: FloatingElement,\n  update: () => void,\n  options: Partial<AutoUpdateOptions> = defaultOptions,\n): ReturnType<typeof autoUpdateLib> {\n  const { elementResize = false, ...restOptions } = options;\n\n  const autoUpdateLibDisposer = autoUpdateLib(reference, floating, update, {\n    ...restOptions,\n    // Отключаем в библиотеке, т.к. под капотом используется `ResizeObserver`, которое не покрывается нашим `browserlist`.\n    // Вместо него мы используем `MutationObserver`.\n    // https://caniuse.com/resizeobserver\n    elementResize: false,\n  });\n\n  // В случае если `ResizeObserver` будет полифилиться или он будет покрываться нашим `browserlist`, то надо удалить\n  // код с `MutationObserver`.\n  let observer: MutationObserver | null = null;\n  if (elementResize) {\n    let initialUpdate = true;\n    observer = new MutationObserver(() => {\n      if (!initialUpdate) {\n        update();\n      }\n\n      initialUpdate = false;\n    });\n\n    if (reference instanceof Element) {\n      observer.observe(reference, {\n        childList: true,\n        subtree: true,\n      });\n    }\n\n    observer.observe(floating, {\n      childList: true,\n      subtree: true,\n    });\n  }\n\n  return () => {\n    if (observer !== null) {\n      observer.disconnect();\n      observer = null;\n    }\n    autoUpdateLibDisposer();\n  };\n}\n"]},"metadata":{},"sourceType":"module"}