{"ast":null,"code":"import { _ as _sliced_to_array } from \"@swc/helpers/_/_sliced_to_array\";\nimport * as React from \"react\";\nimport { useDOM } from \"../lib/dom\";\nimport { useGlobalEventListener } from \"./useGlobalEventListener\";\n/**\n * Возвращает текущую ориентация экрана на человеческом языке.\n * Учитывает особенности API на разных платформах.\n */\n\nfunction getOrientation(window) {\n  var // eslint-disable-next-line compat/compat\n  _window_screen_orientation, _window_screen;\n\n  if (!window) {\n    return \"portrait\";\n  }\n\n  var _window_screen_orientation_angle;\n\n  var angle = Math.abs((_window_screen_orientation_angle = (_window_screen = window.screen) === null || _window_screen === void 0 ? void 0 : (_window_screen_orientation = _window_screen.orientation) === null || _window_screen_orientation === void 0 ? void 0 : _window_screen_orientation.angle) !== null && _window_screen_orientation_angle !== void 0 ? _window_screen_orientation_angle : Number(window.orientation));\n  return angle === 90 ? \"landscape\" : \"portrait\";\n}\n/**\n * Возвращает текущую ориентация экрана на человеческом языке.\n * Обновляется при изменении ориентации.\n */\n\n\nexport function useOrientationChange() {\n  var window = useDOM().window;\n\n  var _React_useState = _sliced_to_array(React.useState(function () {\n    return getOrientation(window);\n  }), 2),\n      orientation = _React_useState[0],\n      setOrientation = _React_useState[1];\n\n  useGlobalEventListener(window, \"orientationchange\", function () {\n    return setOrientation(getOrientation(window));\n  });\n  return orientation;\n}","map":{"version":3,"mappings":";AAAA,YAAYA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,QAAuB,YAAvB;AACA,SAASC,sBAAT,QAAuC,0BAAvC;AAIA;;;;;AAIA,SAASC,cAAT,CAAwBC,MAAxB,EAAkD;MAM9C;EACAA;;EANF,IAAI,CAACA,MAAL,EAAa;IACX,OAAO,UAAP;EACF;;MAIEA;;EAFF,IAAMC,QAAQC,KAAKC,GAALD,CAEZF,6DAAOI,MAAPJ,MAAa,IAAbA,sFAAeK,WAAfL,MAA0B,IAA1BA,gFAA4BC,KAA5BD,MAAiC,IAAjCA,qFAAqCM,OAAON,OAAOK,WAAdC,CAFzBJ,CAAd;EAKA,OAAOD,UAAU,EAAVA,GAAe,WAAfA,GAA6B,UAApC;AACF;AAEA;;;;;;AAIA,OAAO,SAASM,oBAAT,GAASA;EACd,IAAMP,MAAEA,GAAWH,SAAXG,MAAR;;EAEA,IAAsCJ,yCAAMY,QAANZ,CAAe;WAAMG,eAAeC,MAAfD;GAArBH,KAAtC;EAAA,IAAOS,cAA+BT,kBAAtC;EAAA,IAAoBa,iBAAkBb,kBAAtC;;EAEAE,uBAAuBE,MAAvBF,EAA+B,mBAA/BA,EAAoD;WAAMW,eAAeV,eAAeC,MAAfD,CAAfU;GAA1DX;EAEA,OAAOO,WAAP;AACF","names":["React","useDOM","useGlobalEventListener","getOrientation","window","angle","Math","abs","screen","orientation","Number","useOrientationChange","useState","setOrientation"],"sources":["C:\\Users\\kulag\\vk\\Ability\\node_modules\\@vkontakte\\vkui\\src\\hooks\\useOrientationChange.ts"],"sourcesContent":["import * as React from 'react';\nimport { useDOM } from '../lib/dom';\nimport { useGlobalEventListener } from './useGlobalEventListener';\n\ntype Orientation = 'portrait' | 'landscape';\n\n/**\n * Возвращает текущую ориентация экрана на человеческом языке.\n * Учитывает особенности API на разных платформах.\n */\nfunction getOrientation(window: Window | undefined): Orientation {\n  if (!window) {\n    return 'portrait';\n  }\n\n  const angle = Math.abs(\n    // eslint-disable-next-line compat/compat\n    window.screen?.orientation?.angle ?? Number(window.orientation),\n  );\n\n  return angle === 90 ? 'landscape' : 'portrait';\n}\n\n/**\n * Возвращает текущую ориентация экрана на человеческом языке.\n * Обновляется при изменении ориентации.\n */\nexport function useOrientationChange(): Orientation {\n  const { window } = useDOM();\n\n  const [orientation, setOrientation] = React.useState(() => getOrientation(window));\n\n  useGlobalEventListener(window, 'orientationchange', () => setOrientation(getOrientation(window)));\n\n  return orientation;\n}\n"]},"metadata":{},"sourceType":"module"}