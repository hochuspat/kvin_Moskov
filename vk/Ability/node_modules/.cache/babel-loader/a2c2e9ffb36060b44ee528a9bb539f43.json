{"ast":null,"code":"import { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_spread_props } from \"@swc/helpers/_/_object_spread_props\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport { _ as _sliced_to_array } from \"@swc/helpers/_/_sliced_to_array\";\nimport { _ as _type_of } from \"@swc/helpers/_/_type_of\";\nimport * as React from \"react\";\nimport { classNames, noop } from \"@vkontakte/vkjs\";\nimport { useChipsSelect } from \"../../hooks/useChipsSelect\";\nimport { useExternRef } from \"../../hooks/useExternRef\";\nimport { useGlobalEventListener } from \"../../hooks/useGlobalEventListener\";\nimport { useDOM } from \"../../lib/dom\";\nimport { defaultFilterFn } from \"../../lib/select\";\nimport { ChipsInputBase, chipsInputDefaultProps } from \"../ChipsInputBase/ChipsInputBase\";\nimport { CustomSelectDropdown } from \"../CustomSelectDropdown/CustomSelectDropdown\";\nimport { CustomSelectOption } from \"../CustomSelectOption/CustomSelectOption\";\nimport { DropdownIcon } from \"../DropdownIcon/DropdownIcon\";\nimport { FormField } from \"../FormField/FormField\";\nimport { IconButton } from \"../IconButton/IconButton\";\nimport { Footnote } from \"../Typography/Footnote/Footnote\";\nvar FOCUS_ACTION_NEXT = \"next\";\nvar FOCUS_ACTION_PREV = \"prev\";\n\nvar chipsSelectDefaultProps = _object_spread_props(_object_spread({}, chipsInputDefaultProps), {\n  emptyText: \"Ничего не найдено\",\n  creatableText: \"Создать значение\",\n  onChangeStart: noop,\n  creatable: false,\n  fetching: false,\n  showSelected: true,\n  closeAfterSelect: true,\n  options: [],\n  filterFn: defaultFilterFn,\n  renderOption: function renderOption(props) {\n    return /*#__PURE__*/React.createElement(CustomSelectOption, props);\n  }\n});\n/**\n * @see https://vkcom.github.io/VKUI/#/ChipsSelect\n */\n\n\nexport var ChipsSelect = function (props) {\n  var propsWithDefault = _object_spread({}, chipsSelectDefaultProps, props);\n\n  var style = propsWithDefault.style,\n      onFocus = propsWithDefault.onFocus,\n      onBlur = propsWithDefault.onBlur,\n      onKeyDown = propsWithDefault.onKeyDown,\n      className = propsWithDefault.className,\n      fetching = propsWithDefault.fetching,\n      renderOption = propsWithDefault.renderOption,\n      emptyText = propsWithDefault.emptyText,\n      getRef = propsWithDefault.getRef,\n      getRootRef = propsWithDefault.getRootRef,\n      disabled = propsWithDefault.disabled,\n      placeholder = propsWithDefault.placeholder,\n      tabIndex = propsWithDefault.tabIndex,\n      getOptionValue = propsWithDefault.getOptionValue,\n      getOptionLabel = propsWithDefault.getOptionLabel,\n      showSelected = propsWithDefault.showSelected,\n      getNewOptionData = propsWithDefault.getNewOptionData,\n      renderChip = propsWithDefault.renderChip,\n      popupDirection = propsWithDefault.popupDirection,\n      creatable = propsWithDefault.creatable,\n      filterFn = propsWithDefault.filterFn,\n      inputValue = propsWithDefault.inputValue,\n      creatableText = propsWithDefault.creatableText,\n      closeAfterSelect = propsWithDefault.closeAfterSelect,\n      onChangeStart = propsWithDefault.onChangeStart,\n      before = propsWithDefault.before,\n      icon = propsWithDefault.icon,\n      options = propsWithDefault.options,\n      fixDropdownWidth = propsWithDefault.fixDropdownWidth,\n      forceDropdownPortal = propsWithDefault.forceDropdownPortal,\n      restProps = _object_without_properties(propsWithDefault, [\"style\", \"onFocus\", \"onBlur\", \"onKeyDown\", \"className\", \"fetching\", \"renderOption\", \"emptyText\", \"getRef\", \"getRootRef\", \"disabled\", \"placeholder\", \"tabIndex\", \"getOptionValue\", \"getOptionLabel\", \"showSelected\", \"getNewOptionData\", \"renderChip\", \"popupDirection\", \"creatable\", \"filterFn\", \"inputValue\", \"creatableText\", \"closeAfterSelect\", \"onChangeStart\", \"before\", \"icon\", \"options\", \"fixDropdownWidth\", \"forceDropdownPortal\"]);\n\n  var document = useDOM().document;\n\n  var _React_useState = _sliced_to_array(React.useState(undefined), 2),\n      popperPlacement = _React_useState[0],\n      setPopperPlacement = _React_useState[1];\n\n  var scrollBoxRef = React.useRef(null);\n  var rootRef = useExternRef(getRootRef);\n\n  var _useChipsSelect = useChipsSelect(propsWithDefault),\n      fieldValue = _useChipsSelect.fieldValue,\n      _useChipsSelect_selectedOptions = _useChipsSelect.selectedOptions,\n      selectedOptions = _useChipsSelect_selectedOptions === void 0 ? [] : _useChipsSelect_selectedOptions,\n      opened = _useChipsSelect.opened,\n      setOpened = _useChipsSelect.setOpened,\n      addOptionFromInput = _useChipsSelect.addOptionFromInput,\n      filteredOptions = _useChipsSelect.filteredOptions,\n      addOption = _useChipsSelect.addOption,\n      handleInputChange = _useChipsSelect.handleInputChange,\n      clearInput = _useChipsSelect.clearInput,\n      focusedOption = _useChipsSelect.focusedOption,\n      setFocusedOption = _useChipsSelect.setFocusedOption,\n      focusedOptionIndex = _useChipsSelect.focusedOptionIndex,\n      setFocusedOptionIndex = _useChipsSelect.setFocusedOptionIndex;\n\n  var showCreatable = Boolean(creatable && creatableText && !filteredOptions.length && fieldValue);\n\n  var handleFocus = function (e) {\n    setOpened(true);\n    setFocusedOptionIndex(null);\n    onFocus(e);\n  };\n\n  var handleBlur = function (e) {\n    onBlur(e); // Не добавляем значение, если его нужно выбрать строго из списка\n\n    if (!e.defaultPrevented && !creatable) {\n      e.preventDefault();\n    }\n  };\n\n  var handleClickOutside = function (e) {\n    var _rootRef_current, _scrollBoxRef_current;\n\n    var isClickOutsideFormField = !((_rootRef_current = rootRef.current) === null || _rootRef_current === void 0 ? void 0 : _rootRef_current.contains(e.target));\n    var isClickOutsideDropdown = !((_scrollBoxRef_current = scrollBoxRef.current) === null || _scrollBoxRef_current === void 0 ? void 0 : _scrollBoxRef_current.contains(e.target));\n\n    if (isClickOutsideFormField && isClickOutsideDropdown) {\n      setOpened(false);\n    }\n  };\n\n  var chipsSelectOptions = React.useRef([]).current;\n\n  var scrollToElement = function (index) {\n    var center = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n    var dropdown = scrollBoxRef.current;\n    var item = chipsSelectOptions[index];\n\n    if (!item || !dropdown) {\n      return;\n    }\n\n    var dropdownHeight = dropdown.offsetHeight;\n    var scrollTop = dropdown.scrollTop;\n    var itemTop = item.offsetTop;\n    var itemHeight = item.offsetHeight;\n\n    if (center) {\n      dropdown.scrollTop = itemTop - dropdownHeight / 2 + itemHeight / 2;\n    } else if (itemTop + itemHeight > dropdownHeight + scrollTop) {\n      dropdown.scrollTop = itemTop - dropdownHeight + itemHeight;\n    } else if (itemTop < scrollTop) {\n      dropdown.scrollTop = itemTop;\n    }\n  };\n\n  var focusOptionByIndex = function (index, oldIndex) {\n    var length = filteredOptions.length;\n\n    if (index < 0) {\n      index = length - 1;\n    } else if (index >= length) {\n      index = 0;\n    }\n\n    if (index === oldIndex) {\n      return;\n    }\n\n    scrollToElement(index);\n    setFocusedOptionIndex(index);\n  };\n\n  var focusOption = function (nextIndex, type) {\n    var index = nextIndex === null ? -1 : nextIndex;\n\n    if (type === FOCUS_ACTION_NEXT) {\n      index = index + 1;\n    } else if (type === FOCUS_ACTION_PREV) {\n      index = index - 1;\n    }\n\n    focusOptionByIndex(index, focusedOptionIndex);\n  };\n\n  var handleKeyDown = function (e) {\n    onKeyDown(e);\n\n    if (e.key === \"ArrowUp\" && !e.defaultPrevented) {\n      e.preventDefault();\n\n      if (!opened) {\n        setOpened(true);\n        setFocusedOptionIndex(0);\n      } else {\n        focusOption(focusedOptionIndex, FOCUS_ACTION_PREV);\n      }\n    }\n\n    if (e.key === \"ArrowDown\" && !e.defaultPrevented) {\n      e.preventDefault();\n\n      if (!opened) {\n        setOpened(true);\n        setFocusedOptionIndex(0);\n      } else {\n        focusOption(focusedOptionIndex, FOCUS_ACTION_NEXT);\n      }\n    }\n\n    if (e.key === \"Enter\" && !e.defaultPrevented && opened) {\n      if (focusedOptionIndex != null) {\n        var option = filteredOptions[focusedOptionIndex];\n\n        if (option) {\n          onChangeStart(e, option);\n\n          if (!e.defaultPrevented) {\n            addOption(option);\n            setFocusedOptionIndex(null);\n            clearInput();\n            closeAfterSelect && setOpened(false);\n            e.preventDefault();\n          }\n        } else if (!creatable) {\n          e.preventDefault();\n        }\n      } else if (!creatable) {\n        e.preventDefault();\n      }\n    }\n\n    if ([\"Escape\", \"Tab\"].includes(e.key) && !e.defaultPrevented && opened) {\n      setOpened(false);\n    }\n  };\n\n  React.useEffect(function () {\n    if (focusedOptionIndex != null && filteredOptions[focusedOptionIndex]) {\n      setFocusedOption(filteredOptions[focusedOptionIndex]);\n    } else if (focusedOptionIndex === null || focusedOptionIndex === 0) {\n      setFocusedOption(null);\n    }\n  }, [focusedOptionIndex, filteredOptions, setFocusedOption]);\n  useGlobalEventListener(document, \"click\", handleClickOutside);\n\n  var renderChipWrapper = function (renderChipProps) {\n    if (renderChipProps === undefined) {\n      return null;\n    }\n\n    var onRemoveWrapper = function (e, value) {\n      var _renderChipProps_onRemove;\n\n      e === null || e === void 0 ? void 0 : e.preventDefault();\n      e === null || e === void 0 ? void 0 : e.stopPropagation();\n      (_renderChipProps_onRemove = renderChipProps.onRemove) === null || _renderChipProps_onRemove === void 0 ? void 0 : _renderChipProps_onRemove.call(renderChipProps, e, value);\n    };\n\n    return renderChip(_object_spread_props(_object_spread({}, renderChipProps), {\n      onRemove: onRemoveWrapper\n    }));\n  };\n\n  var isPopperDirectionTop = popperPlacement === null || popperPlacement === void 0 ? void 0 : popperPlacement.includes(\"top\");\n  var onPlacementChange = React.useCallback(function (placement) {\n    setPopperPlacement(placement);\n  }, [setPopperPlacement]);\n  var onDropdownMouseLeave = React.useCallback(function () {\n    setFocusedOptionIndex(null);\n  }, [setFocusedOptionIndex]);\n\n  var toggleOpened = function () {\n    setOpened(function (prevOpened) {\n      return !prevOpened;\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormField, {\n    getRootRef: rootRef,\n    style: style,\n    className: classNames(\"vkuiChipsSelect\", opened && (isPopperDirectionTop ? \"vkuiChipsSelect--pop-up\" : \"vkuiChipsSelect--pop-down\"), className),\n    disabled: disabled,\n    role: \"application\",\n    \"aria-disabled\": disabled,\n    \"aria-readonly\": restProps.readOnly,\n    after: /*#__PURE__*/React.createElement(IconButton, {\n      className: \"vkuiChipsSelect__dropdown\",\n      activeMode: \"\",\n      hoverMode: \"\",\n      // TODO [>=6]: add label customization\n      \"aria-label\": opened ? \"Скрыть\" : \"Развернуть\",\n      onClick: toggleOpened\n    }, icon !== null && icon !== void 0 ? icon : /*#__PURE__*/React.createElement(DropdownIcon, {\n      className: \"vkuiChipsSelect__icon\",\n      opened: opened\n    })),\n    before: before\n  }, /*#__PURE__*/React.createElement(ChipsInputBase, _object_spread_props(_object_spread({}, restProps), {\n    tabIndex: tabIndex,\n    value: selectedOptions,\n    inputValue: fieldValue,\n    getNewOptionData: getNewOptionData,\n    getOptionLabel: getOptionLabel,\n    getOptionValue: getOptionValue,\n    renderChip: renderChipWrapper,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    onKeyDown: handleKeyDown,\n    placeholder: placeholder,\n    getRef: getRef,\n    disabled: disabled,\n    onInputChange: handleInputChange\n  }))), opened && /*#__PURE__*/React.createElement(CustomSelectDropdown, {\n    targetRef: rootRef,\n    placement: popupDirection,\n    scrollBoxRef: scrollBoxRef,\n    onPlacementChange: onPlacementChange,\n    onMouseLeave: onDropdownMouseLeave,\n    fetching: fetching,\n    sameWidth: fixDropdownWidth,\n    forcePortal: forceDropdownPortal\n  }, showCreatable && /*#__PURE__*/React.createElement(CustomSelectOption, {\n    hovered: focusedOptionIndex === 0,\n    onMouseDown: addOptionFromInput,\n    onMouseEnter: function () {\n      return setFocusedOptionIndex(0);\n    }\n  }, creatableText), !(filteredOptions === null || filteredOptions === void 0 ? void 0 : filteredOptions.length) && !showCreatable && emptyText ? /*#__PURE__*/React.createElement(Footnote, {\n    className: \"vkuiChipsSelect__empty\"\n  }, emptyText) : filteredOptions.map(function (option, index) {\n    var label = getOptionLabel(option);\n    var hovered = focusedOption && getOptionValue(option) === getOptionValue(focusedOption);\n    var selected = selectedOptions.find(function (selectedOption) {\n      return getOptionValue(selectedOption) === getOptionValue(option);\n    });\n    var value = getOptionValue(option);\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      key: \"\".concat(typeof value === \"undefined\" ? \"undefined\" : _type_of(value), \"-\").concat(value)\n    }, renderOption({\n      option: option,\n      hovered: Boolean(hovered),\n      children: label,\n      selected: !!selected,\n      getRootRef: function (e) {\n        if (e) {\n          return chipsSelectOptions[index] = e;\n        }\n\n        return undefined;\n      },\n      onMouseDown: function (e) {\n        onChangeStart === null || onChangeStart === void 0 ? void 0 : onChangeStart(e, option);\n\n        if (!e.defaultPrevented) {\n          closeAfterSelect && setOpened(false);\n          addOption(option);\n          clearInput();\n        }\n      },\n      onMouseEnter: function () {\n        return setFocusedOptionIndex(index);\n      }\n    }));\n  })));\n};","map":{"version":3,"mappings":"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","names":["React","classNames","noop","useChipsSelect","useExternRef","useGlobalEventListener","useDOM","defaultFilterFn","ChipsInputBase","chipsInputDefaultProps","CustomSelectDropdown","CustomSelectOption","DropdownIcon","FormField","IconButton","Footnote","FOCUS_ACTION_NEXT","FOCUS_ACTION_PREV","chipsSelectDefaultProps","_object_spread_props","emptyText","creatableText","onChangeStart","creatable","fetching","showSelected","closeAfterSelect","options","filterFn","renderOption","props","ChipsSelect","propsWithDefault","_object_spread","style","onFocus","onBlur","onKeyDown","className","getRef","getRootRef","disabled","placeholder","tabIndex","getOptionValue","getOptionLabel","getNewOptionData","renderChip","popupDirection","inputValue","before","icon","fixDropdownWidth","forceDropdownPortal","restProps","document","useState","undefined","popperPlacement","setPopperPlacement","scrollBoxRef","useRef","rootRef","fieldValue","selectedOptions","_useChipsSelect_selectedOptions","opened","setOpened","addOptionFromInput","filteredOptions","addOption","handleInputChange","clearInput","focusedOption","setFocusedOption","focusedOptionIndex","setFocusedOptionIndex","showCreatable","Boolean","length","handleFocus","e","handleBlur","defaultPrevented","preventDefault","handleClickOutside","isClickOutsideFormField","current","contains","target","isClickOutsideDropdown","chipsSelectOptions","scrollToElement","index","center","dropdown","item","dropdownHeight","offsetHeight","scrollTop","itemTop","offsetTop","itemHeight","focusOptionByIndex","oldIndex","focusOption","nextIndex","type","handleKeyDown","key","option","includes","useEffect","renderChipWrapper","renderChipProps","onRemoveWrapper","value","stopPropagation","onRemove","isPopperDirectionTop","onPlacementChange","useCallback","placement","onDropdownMouseLeave","toggleOpened","prevOpened","role","aria-disabled","aria-readonly","readOnly","after","activeMode","hoverMode","aria-label","onClick","onInputChange","targetRef","onMouseLeave","sameWidth","forcePortal","hovered","onMouseDown","onMouseEnter","map","label","selected","find","selectedOption","Fragment","concat","children"],"sources":["C:\\Users\\kulag\\vk\\Ability\\node_modules\\@vkontakte\\vkui\\src\\components\\ChipsSelect\\ChipsSelect.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNames, noop } from '@vkontakte/vkjs';\nimport { useChipsSelect } from '../../hooks/useChipsSelect';\nimport { useExternRef } from '../../hooks/useExternRef';\nimport { useGlobalEventListener } from '../../hooks/useGlobalEventListener';\nimport { useDOM } from '../../lib/dom';\nimport type { Placement } from '../../lib/floating';\nimport { defaultFilterFn } from '../../lib/select';\nimport { ChipOption, ChipValue, RenderChip } from '../Chip/Chip';\nimport { ChipsInputProps } from '../ChipsInput/ChipsInput';\nimport { ChipsInputBase, chipsInputDefaultProps } from '../ChipsInputBase/ChipsInputBase';\nimport { CustomSelectDropdown } from '../CustomSelectDropdown/CustomSelectDropdown';\nimport {\n  CustomSelectOption,\n  CustomSelectOptionProps,\n} from '../CustomSelectOption/CustomSelectOption';\nimport { DropdownIcon } from '../DropdownIcon/DropdownIcon';\nimport { FormField } from '../FormField/FormField';\nimport { IconButton } from '../IconButton/IconButton';\nimport { Footnote } from '../Typography/Footnote/Footnote';\nimport styles from './ChipsSelect.module.css';\n\nexport interface ChipsSelectProps<Option extends ChipOption>\n  extends Omit<ChipsInputProps<Option>, 'after'> {\n  popupDirection?: 'top' | 'bottom';\n  options?: Option[];\n  filterFn?:\n    | false\n    | ((\n        value?: string,\n        option?: Option,\n        getOptionLabel?: Pick<ChipsInputProps<Option>, 'getOptionLabel'>['getOptionLabel'],\n      ) => boolean);\n  /**\n   * Возможность создавать чипы которых нет в списке (по enter или с помощью пункта в меню, см creatableText)\n   */\n  creatable?: boolean;\n  /**\n   * Отрисовка лоадера вместо списка опций в выпадающем списке\n   */\n  fetching?: boolean;\n  renderOption?: (props: CustomSelectOptionProps) => React.ReactNode;\n  /**\n   * Показывать или скрывать уже выбранные опции\n   */\n  showSelected?: boolean;\n  /**\n   * Текст для пункта создающего чипы при клике, так же отвечает за то будет ли показан этот пункт (показывается после того как в списке не отсанется опций)\n   */\n  creatableText?: string;\n  /**\n   * Текст который показывается если список опций пуст\n   */\n  emptyText?: string;\n  /**\n   * Событие срабатывающее перед onChange\n   */\n  onChangeStart?: (e: React.MouseEvent | React.KeyboardEvent, option: Option) => void;\n  /**\n   * Закрытие выпадающего списка после выбора элемента\n   */\n  closeAfterSelect?: boolean;\n  fixDropdownWidth?: boolean;\n  forceDropdownPortal?: boolean;\n  /**\n   * Иконка раскрывающегося списка\n   */\n  icon?: React.ReactNode;\n  /**\n   * Добавляет значение в список на событие `onBlur` (использовать вместе с `creatable`)\n   */\n  addOnBlur?: boolean;\n}\n\ntype FocusActionType = 'next' | 'prev';\n\nconst FOCUS_ACTION_NEXT: FocusActionType = 'next';\nconst FOCUS_ACTION_PREV: FocusActionType = 'prev';\n\nconst chipsSelectDefaultProps: ChipsSelectProps<any> = {\n  ...chipsInputDefaultProps,\n  emptyText: 'Ничего не найдено',\n  creatableText: 'Создать значение',\n  onChangeStart: noop,\n  creatable: false,\n  fetching: false,\n  showSelected: true,\n  closeAfterSelect: true,\n  options: [],\n  filterFn: defaultFilterFn,\n  renderOption(props) {\n    return <CustomSelectOption {...props} />;\n  },\n};\n\n/**\n * @see https://vkcom.github.io/VKUI/#/ChipsSelect\n */\nexport const ChipsSelect = <Option extends ChipOption>(props: ChipsSelectProps<Option>) => {\n  const propsWithDefault = { ...chipsSelectDefaultProps, ...props };\n  const {\n    style,\n    onFocus,\n    onBlur,\n    onKeyDown,\n    className,\n    fetching,\n    renderOption,\n    emptyText,\n    getRef,\n    getRootRef,\n    disabled,\n    placeholder,\n    tabIndex,\n    getOptionValue,\n    getOptionLabel,\n    showSelected,\n    getNewOptionData,\n    renderChip,\n    popupDirection,\n    creatable,\n    filterFn,\n    inputValue,\n    creatableText,\n    closeAfterSelect,\n    onChangeStart,\n    before,\n    icon,\n    options,\n    fixDropdownWidth,\n    forceDropdownPortal,\n    ...restProps\n  } = propsWithDefault;\n\n  const { document } = useDOM();\n\n  const [popperPlacement, setPopperPlacement] = React.useState<Placement | undefined>(undefined);\n\n  const scrollBoxRef = React.useRef<HTMLDivElement>(null);\n  const rootRef = useExternRef(getRootRef);\n  const {\n    fieldValue,\n    selectedOptions = [],\n    opened,\n    setOpened,\n    addOptionFromInput,\n    filteredOptions,\n    addOption,\n    handleInputChange,\n    clearInput,\n    focusedOption,\n    setFocusedOption,\n    focusedOptionIndex,\n    setFocusedOptionIndex,\n  } = useChipsSelect(propsWithDefault);\n\n  const showCreatable = Boolean(\n    creatable && creatableText && !filteredOptions.length && fieldValue,\n  );\n\n  const handleFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n    setOpened(true);\n    setFocusedOptionIndex(null);\n    onFocus!(e);\n  };\n\n  const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n    onBlur!(e);\n\n    // Не добавляем значение, если его нужно выбрать строго из списка\n    if (!e.defaultPrevented && !creatable) {\n      e.preventDefault();\n    }\n  };\n\n  const handleClickOutside = (e: MouseEvent) => {\n    const isClickOutsideFormField = !rootRef.current?.contains(e.target as Node);\n    const isClickOutsideDropdown = !scrollBoxRef.current?.contains(e.target as Node);\n\n    if (isClickOutsideFormField && isClickOutsideDropdown) {\n      setOpened(false);\n    }\n  };\n\n  const chipsSelectOptions = React.useRef<HTMLElement[]>([]).current;\n\n  const scrollToElement = (index: number, center = false) => {\n    const dropdown = scrollBoxRef.current;\n    const item = chipsSelectOptions[index];\n\n    if (!item || !dropdown) {\n      return;\n    }\n\n    const dropdownHeight = dropdown.offsetHeight;\n    const scrollTop = dropdown.scrollTop;\n    const itemTop = item.offsetTop;\n    const itemHeight = item.offsetHeight;\n\n    if (center) {\n      dropdown.scrollTop = itemTop - dropdownHeight / 2 + itemHeight / 2;\n    } else if (itemTop + itemHeight > dropdownHeight + scrollTop) {\n      dropdown.scrollTop = itemTop - dropdownHeight + itemHeight;\n    } else if (itemTop < scrollTop) {\n      dropdown.scrollTop = itemTop;\n    }\n  };\n\n  const focusOptionByIndex = (index: number, oldIndex: number | null) => {\n    const { length } = filteredOptions;\n\n    if (index < 0) {\n      index = length - 1;\n    } else if (index >= length) {\n      index = 0;\n    }\n\n    if (index === oldIndex) {\n      return;\n    }\n\n    scrollToElement(index);\n    setFocusedOptionIndex(index);\n  };\n\n  const focusOption = (nextIndex: number | null, type: FocusActionType) => {\n    let index = nextIndex === null ? -1 : nextIndex;\n\n    if (type === FOCUS_ACTION_NEXT) {\n      index = index + 1;\n    } else if (type === FOCUS_ACTION_PREV) {\n      index = index - 1;\n    }\n\n    focusOptionByIndex(index, focusedOptionIndex);\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    onKeyDown!(e);\n\n    if (e.key === 'ArrowUp' && !e.defaultPrevented) {\n      e.preventDefault();\n\n      if (!opened) {\n        setOpened(true);\n        setFocusedOptionIndex(0);\n      } else {\n        focusOption(focusedOptionIndex, FOCUS_ACTION_PREV);\n      }\n    }\n\n    if (e.key === 'ArrowDown' && !e.defaultPrevented) {\n      e.preventDefault();\n\n      if (!opened) {\n        setOpened(true);\n        setFocusedOptionIndex(0);\n      } else {\n        focusOption(focusedOptionIndex, FOCUS_ACTION_NEXT);\n      }\n    }\n\n    if (e.key === 'Enter' && !e.defaultPrevented && opened) {\n      if (focusedOptionIndex != null) {\n        const option = filteredOptions[focusedOptionIndex];\n\n        if (option) {\n          onChangeStart!(e, option);\n\n          if (!e.defaultPrevented) {\n            addOption(option);\n            setFocusedOptionIndex(null);\n            clearInput();\n            closeAfterSelect && setOpened(false);\n            e.preventDefault();\n          }\n        } else if (!creatable) {\n          e.preventDefault();\n        }\n      } else if (!creatable) {\n        e.preventDefault();\n      }\n    }\n\n    if (['Escape', 'Tab'].includes(e.key) && !e.defaultPrevented && opened) {\n      setOpened(false);\n    }\n  };\n\n  React.useEffect(() => {\n    if (focusedOptionIndex != null && filteredOptions[focusedOptionIndex]) {\n      setFocusedOption(filteredOptions[focusedOptionIndex]);\n    } else if (focusedOptionIndex === null || focusedOptionIndex === 0) {\n      setFocusedOption(null);\n    }\n  }, [focusedOptionIndex, filteredOptions, setFocusedOption]);\n\n  useGlobalEventListener(document, 'click', handleClickOutside);\n\n  const renderChipWrapper = (renderChipProps: RenderChip<Option> | undefined) => {\n    if (renderChipProps === undefined) {\n      return null;\n    }\n    const onRemoveWrapper = (e: React.MouseEvent | undefined, value: ChipValue | undefined) => {\n      e?.preventDefault();\n      e?.stopPropagation();\n\n      renderChipProps.onRemove?.(e, value);\n    };\n\n    return renderChip!({\n      ...renderChipProps,\n      onRemove: onRemoveWrapper,\n    });\n  };\n\n  const isPopperDirectionTop = popperPlacement?.includes('top');\n\n  const onPlacementChange = React.useCallback(\n    (placement?: Placement) => {\n      setPopperPlacement(placement);\n    },\n    [setPopperPlacement],\n  );\n\n  const onDropdownMouseLeave = React.useCallback(() => {\n    setFocusedOptionIndex(null);\n  }, [setFocusedOptionIndex]);\n\n  const toggleOpened = () => {\n    setOpened((prevOpened) => !prevOpened);\n  };\n\n  return (\n    <>\n      <FormField\n        getRootRef={rootRef}\n        style={style}\n        className={classNames(\n          styles['ChipsSelect'],\n          opened &&\n            (isPopperDirectionTop\n              ? styles['ChipsSelect--pop-up']\n              : styles['ChipsSelect--pop-down']),\n          className,\n        )}\n        disabled={disabled}\n        role=\"application\"\n        aria-disabled={disabled}\n        aria-readonly={restProps.readOnly}\n        after={\n          <IconButton\n            className={styles['ChipsSelect__dropdown']}\n            activeMode=\"\"\n            hoverMode=\"\"\n            // TODO [>=6]: add label customization\n            aria-label={opened ? 'Скрыть' : 'Развернуть'}\n            onClick={toggleOpened}\n          >\n            {icon ?? <DropdownIcon className={styles['ChipsSelect__icon']} opened={opened} />}\n          </IconButton>\n        }\n        before={before}\n      >\n        <ChipsInputBase\n          {...restProps}\n          tabIndex={tabIndex}\n          value={selectedOptions}\n          inputValue={fieldValue}\n          getNewOptionData={getNewOptionData}\n          getOptionLabel={getOptionLabel}\n          getOptionValue={getOptionValue}\n          renderChip={renderChipWrapper}\n          onFocus={handleFocus}\n          onBlur={handleBlur}\n          onKeyDown={handleKeyDown}\n          placeholder={placeholder}\n          getRef={getRef}\n          disabled={disabled}\n          onInputChange={handleInputChange}\n        />\n      </FormField>\n      {opened && (\n        <CustomSelectDropdown\n          targetRef={rootRef}\n          placement={popupDirection}\n          scrollBoxRef={scrollBoxRef}\n          onPlacementChange={onPlacementChange}\n          onMouseLeave={onDropdownMouseLeave}\n          fetching={fetching}\n          sameWidth={fixDropdownWidth}\n          forcePortal={forceDropdownPortal}\n        >\n          {showCreatable && (\n            <CustomSelectOption\n              hovered={focusedOptionIndex === 0}\n              onMouseDown={addOptionFromInput}\n              onMouseEnter={() => setFocusedOptionIndex(0)}\n            >\n              {creatableText}\n            </CustomSelectOption>\n          )}\n          {!filteredOptions?.length && !showCreatable && emptyText ? (\n            <Footnote className={styles['ChipsSelect__empty']}>{emptyText}</Footnote>\n          ) : (\n            filteredOptions.map((option: Option, index: number) => {\n              const label = getOptionLabel!(option);\n              const hovered =\n                focusedOption && getOptionValue!(option) === getOptionValue!(focusedOption);\n              const selected = selectedOptions.find((selectedOption: Option) => {\n                return getOptionValue!(selectedOption) === getOptionValue!(option);\n              });\n              const value = getOptionValue!(option);\n\n              return (\n                <React.Fragment key={`${typeof value}-${value}`}>\n                  {renderOption!({\n                    option,\n                    hovered: Boolean(hovered),\n                    children: label,\n                    selected: !!selected,\n                    getRootRef: (e) => {\n                      if (e) {\n                        return (chipsSelectOptions[index] = e);\n                      }\n                      return undefined;\n                    },\n                    onMouseDown: (e: React.MouseEvent<HTMLDivElement>) => {\n                      onChangeStart?.(e, option);\n\n                      if (!e.defaultPrevented) {\n                        closeAfterSelect && setOpened(false);\n                        addOption(option);\n                        clearInput();\n                      }\n                    },\n                    onMouseEnter: () => setFocusedOptionIndex(index),\n                  })}\n                </React.Fragment>\n              );\n            })\n          )}\n        </CustomSelectDropdown>\n      )}\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}