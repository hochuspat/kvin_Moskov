{"ast":null,"code":"import { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport * as React from \"react\";\nimport { classNames } from \"@vkontakte/vkjs\";\nimport { HoverPopper } from \"../HoverPopper/HoverPopper\";\nvar stylesAppearance = {\n  accent: \"vkuiRichTooltip--appearance-accent\",\n  white: \"vkuiRichTooltip--appearance-white\",\n  black: \"vkuiRichTooltip--appearance-black\",\n  inversion: \"vkuiRichTooltip--appearance-inversion\"\n};\n/**\n * @see https://vkcom.github.io/VKUI/#/RichTooltip\n */\n\nexport var RichTooltip = function (_param) {\n  var children = _param.children,\n      _param_arrow = _param.arrow,\n      arrow = _param_arrow === void 0 ? true : _param_arrow,\n      _param_appearance = _param.appearance,\n      appearance = _param_appearance === void 0 ? \"neutral\" : _param_appearance,\n      className = _param.className,\n      popperProps = _object_without_properties(_param, [\"children\", \"arrow\", \"appearance\", \"className\"]);\n\n  return /*#__PURE__*/React.createElement(HoverPopper, _object_spread({\n    className: classNames(\"vkuiRichTooltip\", appearance !== \"neutral\" && stylesAppearance[appearance], className),\n    arrow: arrow,\n    arrowClassName: \"vkuiRichTooltip__arrow\"\n  }, popperProps), children);\n};","map":{"version":3,"mappings":";;AAAA,YAAYA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,SAASC,WAAT,QAA8C,4BAA9C;AAGA,IAAMC,mBAAmB;EACvBC,MAAM,sCADiB;EAEvBC,KAAK,qCAFkB;EAGvBC,KAAK,qCAHkB;EAIvBC,SAAS;AAJc,CAAzB;AAcA;;;;AAGA,OAAO,IAAMC,cAAc;MACzBC;MAAAA,sBACAC;MAAAA,kCAAQ,IAARA,GAAQC;MAAAC,2BACRC;MAAAA,4CAAa,SAAbA,GAAaD;MACbE;MACGC,kDAJHN,UAIGM,EAHHL,OAGGK,EAFHF,YAEGE,EADHD,WACGC;;EAEH,oBACEf,oBAACE,WAAD,EAACA;IACCY,WAAWb,8BAETY,eAAe,SAAfA,IAA4BV,gBAAgB,CAACU,UAAD,CAFnCZ,EAGTa,SAHSb,CADZC;IAMCQ,OAAOA,KANRR;IAOCc,cAAc;EAPfd,GAQKa,WARLb,CAAD,EAUGO,QAVH,CADF;AAcF,CArBO","names":["React","classNames","HoverPopper","stylesAppearance","accent","white","black","inversion","RichTooltip","children","arrow","_param_arrow","_param_appearance","appearance","className","popperProps","arrowClassName"],"sources":["C:\\Users\\kulag\\vk\\Ability\\node_modules\\@vkontakte\\vkui\\src\\components\\RichTooltip\\RichTooltip.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNames } from '@vkontakte/vkjs';\nimport { HoverPopper, HoverPopperProps } from '../HoverPopper/HoverPopper';\nimport styles from './RichTooltip.module.css';\n\nconst stylesAppearance = {\n  accent: styles['RichTooltip--appearance-accent'],\n  white: styles['RichTooltip--appearance-white'],\n  black: styles['RichTooltip--appearance-black'],\n  inversion: styles['RichTooltip--appearance-inversion'],\n};\n\nexport interface RichTooltipProps extends Omit<HoverPopperProps, 'arrowClassName'> {\n  /**\n   * Стиль отображения подсказки\n   */\n  appearance?: 'accent' | 'neutral' | 'white' | 'black' | 'inversion';\n}\n\n/**\n * @see https://vkcom.github.io/VKUI/#/RichTooltip\n */\nexport const RichTooltip = ({\n  children,\n  arrow = true,\n  appearance = 'neutral',\n  className,\n  ...popperProps\n}: RichTooltipProps) => {\n  return (\n    <HoverPopper\n      className={classNames(\n        styles['RichTooltip'],\n        appearance !== 'neutral' && stylesAppearance[appearance],\n        className,\n      )}\n      arrow={arrow}\n      arrowClassName={styles['RichTooltip__arrow']}\n      {...popperProps}\n    >\n      {children}\n    </HoverPopper>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}