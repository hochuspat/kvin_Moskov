{"ast":null,"code":"import { _ as _define_property } from \"@swc/helpers/_/_define_property\";\nimport * as React from \"react\";\nimport { warnOnce } from \"../lib/warnOnce\";\nimport { useEffectDev } from \"./useEffectDev\";\nimport { useExternRef } from \"./useExternRef\";\n\nvar isDOMTypeElement = function (element) {\n  return typeof element.type === \"string\";\n};\n\nvar warn = warnOnce(\"usePatchChildrenRef\");\nexport var usePatchChildrenRef = function (children) {\n  var childRef = React.isValidElement(children) && (isDOMTypeElement(children) ? children.ref : children.props.getRootRef);\n  var patchedRef = useExternRef(childRef);\n  useEffectDev(function () {\n    if (!patchedRef.current) {\n      warn(\"Кажется, в children передан компонент, который не поддерживает свойство getRootRef. Мы не можем получить ссылку на корневой dom-элемент этого компонента\", \"error\");\n    }\n  }, [children === null || children === void 0 ? void 0 : children.type, patchedRef]);\n  return [patchedRef, React.isValidElement(children) ? React.cloneElement(children, _define_property({}, isDOMTypeElement(children) ? \"ref\" : \"getRootRef\", patchedRef)) : children];\n};","map":{"version":3,"mappings":";AAAA,YAAYA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,YAAT,QAA6B,gBAA7B;;AAIA,IAAMC,mBAAmB,UAACC,OAAD,EAACA;EACxB,OAAO,OAAOA,QAAQC,IAAf,KAAwB,QAA/B;AACF,CAFA;;AAIA,IAAMC,OAAON,SAAS,qBAATA,CAAb;AAEA,OAAO,IAAMO,sBAAsB,UACjCC,QADiC,EACjCA;EAEA,IAAMC,WACJV,MAAMW,cAANX,CAAqBS,QAArBT,MACCI,iBAAiBK,QAAjBL,IAA8BK,SAASG,GAAvCR,GAA8DK,SAASI,KAATJ,CAAeK,UAD9Ed,CADF;EAGA,IAAMe,aAAaZ,aAAgBO,QAAhBP,CAAnB;EAEAD,aAAa;IACX,IAAI,CAACa,WAAWC,OAAhB,EAAyB;MACvBT,KACE,0JADFA,EAEE,OAFFA;IAIF;EACF,CAPAL,EAOG,CAACO,6DAAUH,IAAX,EAAiBS,UAAjB,CAPHb;EASA,OAAO,CACLa,UADK,EAELf,MAAMW,cAANX,CAAqBS,QAArBT,IACIA,MAAMiB,YAANjB,CAAmBS,QAAnBT,EACEkB,qBAACd,iBAAiBK,QAAjBL,IAA6B,KAA7BA,GAAqC,YAAtC,EAAqDW,UAArD,CADFf,CADJA,GAIIS,QANC,CAAP;AAQF,CAzBO","names":["React","warnOnce","useEffectDev","useExternRef","isDOMTypeElement","element","type","warn","usePatchChildrenRef","children","childRef","isValidElement","ref","props","getRootRef","patchedRef","current","cloneElement","_define_property"],"sources":["C:\\Users\\kulag\\vk\\Ability\\node_modules\\@vkontakte\\vkui\\src\\hooks\\usePatchChildrenRef.ts"],"sourcesContent":["import * as React from 'react';\nimport { warnOnce } from '../lib/warnOnce';\nimport { useEffectDev } from './useEffectDev';\nimport { useExternRef } from './useExternRef';\n\ntype ChildrenElement<T> = React.ReactElement<{ getRootRef?: React.Ref<T> }>;\n\nconst isDOMTypeElement = (element: React.ReactElement): element is React.DOMElement<any, any> => {\n  return typeof element.type === 'string';\n};\n\nconst warn = warnOnce('usePatchChildrenRef');\n\nexport const usePatchChildrenRef = <T = HTMLElement>(\n  children?: ChildrenElement<T>,\n): [React.MutableRefObject<T | null>, ChildrenElement<T> | undefined] => {\n  const childRef =\n    React.isValidElement(children) &&\n    (isDOMTypeElement(children) ? (children.ref as React.Ref<T>) : children.props.getRootRef);\n  const patchedRef = useExternRef<T>(childRef);\n\n  useEffectDev(() => {\n    if (!patchedRef.current) {\n      warn(\n        'Кажется, в children передан компонент, который не поддерживает свойство getRootRef. Мы не можем получить ссылку на корневой dom-элемент этого компонента',\n        'error',\n      );\n    }\n  }, [children?.type, patchedRef]);\n\n  return [\n    patchedRef,\n    React.isValidElement(children)\n      ? React.cloneElement(children, {\n          [isDOMTypeElement(children) ? 'ref' : 'getRootRef']: patchedRef,\n        })\n      : children,\n  ];\n};\n"]},"metadata":{},"sourceType":"module"}