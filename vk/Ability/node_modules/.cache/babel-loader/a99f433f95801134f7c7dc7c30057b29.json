{"ast":null,"code":"/* eslint-disable @typescript-eslint/quotes */\nimport { Replacer } from \"../lib/replacer\";\nimport { fromCodePoint, getCodePointAt, numericUnicodeMap } from \"../lib/codepoints\";\nimport { buildFullNamedEntities, fullNamedEntities } from \"./entity\";\nvar escapeReplacer = /*#__PURE__*/new Replacer({\n  \"&\": \"&amp;\",\n  \"<\": \"&lt;\",\n  \">\": \"&gt;\",\n  \"'\": \"&#39;\",\n  '\"': \"&quot;\"\n});\nvar unescapeReplacer = /*#__PURE__*/new Replacer({\n  \"&amp;\": \"&\",\n  \"&#38;\": \"&\",\n  \"&lt;\": \"<\",\n  \"&#60;\": \"<\",\n  \"&gt;\": \">\",\n  \"&#62;\": \">\",\n  \"&apos;\": \"'\",\n  \"&#39;\": \"'\",\n  \"&quot;\": '\"',\n  \"&#34;\": '\"'\n});\nvar namedEntities = {\n  \"amp;\": \"&\",\n  \"lt;\": \"<\",\n  \"gt;\": \">\",\n  \"quot;\": '\"',\n  \"apos;\": \"'\"\n};\n/**\n * Safely escape HTML entities such as `&`, `<`, `>`, `\"`, and `'`\n * @param {string} input\n */\n\nexport function escape(input) {\n  return escapeReplacer.replace(input);\n}\n/**\n * Unescape HTML entities such as `&`, `<`, `>`, `\"`, and `'`\n * @param {string} input\n */\n\nexport function unescape(input) {\n  return unescapeReplacer.replace(input);\n}\nexport var outOfBoundsChar = /*#__PURE__*/String.fromCharCode(65533);\nvar ENCODE_REGEX = /(?:[<>'\"&\\x01-\\x08\\x11-\\x15\\x17-\\x1F\\x7f-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])/g;\nexport function encodeHTMLEntities(input) {\n  if (input == null) {\n    return \"\";\n  }\n\n  return input.replace(ENCODE_REGEX, function (entity) {\n    var code = entity.length > 1 ? getCodePointAt(entity, 0) : entity.charCodeAt(0);\n    return \"&#\" + String(code) + \";\";\n  });\n}\nvar DECODE_REGEX = /&(?:#\\d+|#[xX][\\da-fA-F]+|[0-9a-zA-Z]+);?/g;\n\nfunction decodeString(input, entities) {\n  if (typeof input !== \"string\" || !input) {\n    return \"\";\n  }\n\n  return input.replace(DECODE_REGEX, function (entity) {\n    if (entity[1] === \"#\") {\n      // We need to have at least \"&#.\".\n      if (entity.length <= 3) {\n        return entity;\n      }\n\n      var secondChar = entity.charAt(2);\n      var code = secondChar === \"x\" || secondChar === \"X\" ? parseInt(entity.substr(3).toLowerCase(), 16) : parseInt(entity.substr(2));\n\n      if (code >= 0x10ffff) {\n        return outOfBoundsChar;\n      }\n\n      if (code > 65535) {\n        return fromCodePoint(code);\n      }\n\n      return String.fromCharCode(numericUnicodeMap[code] || code);\n    }\n\n    return entities[entity.slice(1)] || entity;\n  });\n}\n\nexport function decodeHTMLEntitiesDeep(input) {\n  if (typeof input === \"string\") {\n    return decodeHTMLEntities(input);\n  }\n\n  if (typeof input === \"object\") {\n    var correctType = Object.prototype.toString.apply(input);\n\n    if (correctType === \"[object Array]\") {\n      return input.map(function (item) {\n        return decodeHTMLEntitiesDeep(item);\n      });\n    }\n\n    if (correctType === \"[object Object]\") {\n      var response = {};\n      Object.keys(input).forEach(function (item) {\n        response[decodeHTMLEntities(item)] = decodeHTMLEntitiesDeep(input[item]);\n      });\n      return response;\n    }\n  }\n\n  return input;\n}\n/**\n * `decodeHTMLEntities` декодирует зарезервированные HTML-сущности.\n *\n * Если нужна возможность декодировать все сущности, используйте\n * {@link decodeHTMLFullEntities}\n *\n * @param input текст который необходимо декодировать\n * @param entities кастомный словарь сущностей `{'lt;': '<'}`\n */\n\nexport function decodeHTMLEntities(input) {\n  var entities = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : namedEntities;\n  return decodeString(input, entities);\n}\n/**\n * `decodeHTMLFullEntities` декодирует все HTML-сущности.\n *\n * Если вам нужно декодировать не все сущности, используйте\n * {@link decodeHTMLEntities} и кастомный словарь.\n *\n * @param input текст который необходимо декодировать\n */\n\nexport function decodeHTMLFullEntities(input) {\n  buildFullNamedEntities();\n  return decodeString(input, fullNamedEntities);\n}","map":{"version":3,"mappings":"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","names":["Replacer","fromCodePoint","getCodePointAt","numericUnicodeMap","buildFullNamedEntities","fullNamedEntities","escapeReplacer","unescapeReplacer","namedEntities","escape","input","replace","unescape","outOfBoundsChar","String","fromCharCode","ENCODE_REGEX","encodeHTMLEntities","entity","code","length","charCodeAt","DECODE_REGEX","decodeString","entities","secondChar","charAt","parseInt","substr","toLowerCase","slice","decodeHTMLEntitiesDeep","decodeHTMLEntities","correctType","Object","prototype","toString","apply","map","item","response","keys","forEach","decodeHTMLFullEntities"],"sources":["C:\\Users\\kulag\\vk\\Ability\\node_modules\\@vkontakte\\vkjs\\src\\html\\escape.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/quotes */\nimport { Replacer } from '../lib/replacer';\nimport { fromCodePoint, getCodePointAt, numericUnicodeMap } from '../lib/codepoints';\nimport { Dictionary } from '../types';\nimport { buildFullNamedEntities, fullNamedEntities } from './entity';\n\nconst escapeReplacer = /*#__PURE__*/ new Replacer({\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  \"'\": '&#39;',\n  '\"': '&quot;',\n});\n\nconst unescapeReplacer = /*#__PURE__*/ new Replacer({\n  '&amp;': '&',\n  '&#38;': '&',\n  '&lt;': '<',\n  '&#60;': '<',\n  '&gt;': '>',\n  '&#62;': '>',\n  '&apos;': \"'\",\n  '&#39;': \"'\",\n  '&quot;': '\"',\n  '&#34;': '\"',\n});\n\nconst namedEntities: Record<string, string> = {\n  'amp;': '&',\n  'lt;': '<',\n  'gt;': '>',\n  'quot;': '\"',\n  'apos;': `'`,\n};\n\n/**\n * Safely escape HTML entities such as `&`, `<`, `>`, `\"`, and `'`\n * @param {string} input\n */\nexport function escape(input: string): string {\n  return escapeReplacer.replace(input);\n}\n\n/**\n * Unescape HTML entities such as `&`, `<`, `>`, `\"`, and `'`\n * @param {string} input\n */\nexport function unescape(input: string): string {\n  return unescapeReplacer.replace(input);\n}\n\nexport const outOfBoundsChar = /*#__PURE__*/ String.fromCharCode(65533);\n\nconst ENCODE_REGEX =\n  /(?:[<>'\"&\\x01-\\x08\\x11-\\x15\\x17-\\x1F\\x7f-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])/g;\n\nexport function encodeHTMLEntities(input: string): string {\n  if (input == null) {\n    return '';\n  }\n\n  return input.replace(ENCODE_REGEX, (entity) => {\n    const code = entity.length > 1 ? getCodePointAt(entity, 0) : entity.charCodeAt(0);\n    return '&#' + String(code) + ';';\n  });\n}\n\nconst DECODE_REGEX = /&(?:#\\d+|#[xX][\\da-fA-F]+|[0-9a-zA-Z]+);?/g;\n\nfunction decodeString(input: string, entities: Record<string, string>): string {\n  if (typeof input !== 'string' || !input) {\n    return '';\n  }\n\n  return input.replace(DECODE_REGEX, (entity) => {\n    if (entity[1] === '#') {\n      // We need to have at least \"&#.\".\n      if (entity.length <= 3) {\n        return entity;\n      }\n\n      const secondChar = entity.charAt(2);\n      const code =\n        secondChar === 'x' || secondChar === 'X'\n          ? parseInt(entity.substr(3).toLowerCase(), 16)\n          : parseInt(entity.substr(2));\n\n      if (code >= 0x10ffff) {\n        return outOfBoundsChar;\n      }\n\n      if (code > 65535) {\n        return fromCodePoint(code);\n      }\n\n      return String.fromCharCode(numericUnicodeMap[code] || code);\n    }\n\n    return entities[entity.slice(1)] || entity;\n  });\n}\n\nexport function decodeHTMLEntitiesDeep<T>(input: T): T {\n  if (typeof input === 'string') {\n    return decodeHTMLEntities(input) as unknown as T;\n  }\n\n  if (typeof input === 'object') {\n    const correctType = Object.prototype.toString.apply(input);\n\n    if (correctType === '[object Array]') {\n      return (input as unknown[]).map((item) => {\n        return decodeHTMLEntitiesDeep(item);\n      }) as T;\n    }\n\n    if (correctType === '[object Object]') {\n      const response: Dictionary<unknown> = {};\n      Object.keys(input as Dictionary<unknown>).forEach((item) => {\n        response[decodeHTMLEntities(item)] = decodeHTMLEntitiesDeep(\n          (input as Dictionary<unknown>)[item],\n        );\n      });\n\n      return response as unknown as T;\n    }\n  }\n\n  return input;\n}\n\n/**\n * `decodeHTMLEntities` декодирует зарезервированные HTML-сущности.\n *\n * Если нужна возможность декодировать все сущности, используйте\n * {@link decodeHTMLFullEntities}\n *\n * @param input текст который необходимо декодировать\n * @param entities кастомный словарь сущностей `{'lt;': '<'}`\n */\nexport function decodeHTMLEntities(input: string, entities = namedEntities): string {\n  return decodeString(input, entities);\n}\n\n/**\n * `decodeHTMLFullEntities` декодирует все HTML-сущности.\n *\n * Если вам нужно декодировать не все сущности, используйте\n * {@link decodeHTMLEntities} и кастомный словарь.\n *\n * @param input текст который необходимо декодировать\n */\nexport function decodeHTMLFullEntities(input: string): string {\n  buildFullNamedEntities();\n\n  return decodeString(input, fullNamedEntities);\n}\n"]},"metadata":{},"sourceType":"module"}