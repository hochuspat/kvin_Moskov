{"ast":null,"code":"import { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_spread_props } from \"@swc/helpers/_/_object_spread_props\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport { _ as _sliced_to_array } from \"@swc/helpers/_/_sliced_to_array\";\nimport * as React from \"react\";\nimport { classNames } from \"@vkontakte/vkjs\";\nimport { useBooleanState } from \"../../../hooks/useBooleanState\";\nimport { useExternRef } from \"../../../hooks/useExternRef\";\nimport { useFocusVisible } from \"../../../hooks/useFocusVisible\";\nimport { arrowMiddleware, convertFloatingDataToReactCSSProperties, flipMiddleware, offsetMiddleware, shiftMiddleware, useFloating } from \"../../../lib/floating\";\nimport { FocusVisible } from \"../../FocusVisible/FocusVisible\";\nimport { TooltipBase } from \"../../TooltipBase/TooltipBase\";\nexport var SliderThumb = function (_param) {\n  var className = _param.className,\n      getRootRef = _param.getRootRef,\n      inputProps = _param.inputProps,\n      withTooltip = _param.withTooltip,\n      restProps = _object_without_properties(_param, [\"className\", \"getRootRef\", \"inputProps\", \"withTooltip\"]);\n\n  var _useFocusVisible = useFocusVisible(false),\n      focusVisible = _useFocusVisible.focusVisible,\n      onBlur = _useFocusVisible.onBlur,\n      onFocus = _useFocusVisible.onFocus;\n\n  var _React_useState = _sliced_to_array(React.useState(null), 2),\n      arrowRef = _React_useState[0],\n      setArrowRef = _React_useState[1];\n\n  var memoizedMiddlewares = React.useMemo(function () {\n    return [offsetMiddleware({\n      crossAxis: 0,\n      mainAxis: 15\n    }), flipMiddleware(), shiftMiddleware({\n      padding: 8\n    }), arrowMiddleware({\n      element: arrowRef\n    })];\n  }, [arrowRef]);\n\n  var _useFloating = useFloating({\n    placement: \"top\",\n    middleware: memoizedMiddlewares\n  }),\n      floatingDataX = _useFloating.x,\n      floatingDataY = _useFloating.y,\n      resolvedPlacement = _useFloating.placement,\n      refs = _useFloating.refs,\n      floatingPositionStrategy = _useFloating.strategy,\n      _useFloating_middlewareData = _useFloating.middlewareData,\n      arrowCoords = _useFloating_middlewareData.arrow,\n      updateTooltipPosition = _useFloating.update;\n\n  var _useBooleanState = useBooleanState(false),\n      isHovered = _useBooleanState.value,\n      setHoveredTrue = _useBooleanState.setTrue,\n      setHoveredFalse = _useBooleanState.setFalse;\n\n  var handleRootRef = useExternRef(getRootRef, refs.setReference);\n  var shouldShowTooltip = withTooltip && (focusVisible || isHovered);\n  var inputValue = inputProps && inputProps.value;\n  React.useEffect(function udpateTooltipPositionOnValueChange() {\n    if (shouldShowTooltip && inputValue !== \"undefined\") {\n      updateTooltipPosition();\n    }\n  }, [inputValue, updateTooltipPosition, shouldShowTooltip]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", _object_spread_props(_object_spread({}, restProps), {\n    ref: handleRootRef,\n    onMouseEnter: setHoveredTrue,\n    onMouseLeave: setHoveredFalse,\n    className: classNames(\"vkuiSliderThumb\", focusVisible && \"vkuiSliderThumb--focused\", className)\n  }), /*#__PURE__*/React.createElement(\"input\", _object_spread_props(_object_spread({}, inputProps), {\n    type: \"range\",\n    className: \"vkuiSliderThumb__nativeInput\",\n    \"aria-orientation\": \"horizontal\",\n    onBlur: onBlur,\n    onFocus: onFocus\n  })), /*#__PURE__*/React.createElement(FocusVisible, {\n    visible: focusVisible,\n    mode: \"outside\"\n  })), shouldShowTooltip && /*#__PURE__*/React.createElement(TooltipBase, {\n    appearance: \"neutral\",\n    getRootRef: refs.setFloating,\n    floatingStyle: convertFloatingDataToReactCSSProperties(floatingPositionStrategy, floatingDataX, floatingDataY),\n    arrowCoords: arrowCoords,\n    arrowPlacement: resolvedPlacement,\n    getArrowRef: setArrowRef,\n    text: inputValue\n  }));\n};","map":{"version":3,"mappings":"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","names":["React","classNames","useBooleanState","useExternRef","useFocusVisible","arrowMiddleware","convertFloatingDataToReactCSSProperties","flipMiddleware","offsetMiddleware","shiftMiddleware","useFloating","FocusVisible","TooltipBase","SliderThumb","className","getRootRef","inputProps","withTooltip","restProps","focusVisible","onBlur","onFocus","useState","arrowRef","setArrowRef","memoizedMiddlewares","useMemo","crossAxis","mainAxis","padding","element","placement","middleware","x","floatingDataX","y","floatingDataY","resolvedPlacement","refs","strategy","floatingPositionStrategy","middlewareData","arrow","arrowCoords","update","updateTooltipPosition","value","isHovered","setTrue","setHoveredTrue","setFalse","setHoveredFalse","handleRootRef","setReference","shouldShowTooltip","inputValue","useEffect","udpateTooltipPositionOnValueChange","Fragment","span","ref","onMouseEnter","onMouseLeave","input","type","aria-orientation","visible","mode","appearance","setFloating","floatingStyle","arrowPlacement","getArrowRef","text"],"sources":["C:\\Users\\kulag\\vk\\Ability\\node_modules\\@vkontakte\\vkui\\src\\components\\Slider\\SliderThumb\\SliderThumb.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNames } from '@vkontakte/vkjs';\nimport { useBooleanState } from '../../../hooks/useBooleanState';\nimport { useExternRef } from '../../../hooks/useExternRef';\nimport { useFocusVisible } from '../../../hooks/useFocusVisible';\nimport {\n  arrowMiddleware,\n  convertFloatingDataToReactCSSProperties,\n  flipMiddleware,\n  offsetMiddleware,\n  shiftMiddleware,\n  useFloating,\n} from '../../../lib/floating';\nimport type { HasDataAttribute, HasRootRef } from '../../../types';\nimport { FocusVisible } from '../../FocusVisible/FocusVisible';\nimport { TooltipBase } from '../../TooltipBase/TooltipBase';\nimport styles from './SliderThumb.module.css';\n\ninterface SliderThumbProps extends HasRootRef<HTMLSpanElement>, HasDataAttribute {\n  className?: string;\n  style?: React.CSSProperties;\n  inputProps?: React.InputHTMLAttributes<HTMLInputElement> &\n    React.RefAttributes<HTMLInputElement> &\n    HasDataAttribute;\n  withTooltip?: boolean;\n}\n\nexport const SliderThumb = ({\n  className,\n  getRootRef,\n  inputProps,\n  withTooltip,\n  ...restProps\n}: SliderThumbProps) => {\n  const { focusVisible, onBlur, onFocus } = useFocusVisible(false);\n  const [arrowRef, setArrowRef] = React.useState<HTMLDivElement | null>(null);\n\n  const memoizedMiddlewares = React.useMemo(() => {\n    return [\n      offsetMiddleware({\n        crossAxis: 0,\n        mainAxis: 15,\n      }),\n      flipMiddleware(),\n      shiftMiddleware({ padding: 8 }),\n      arrowMiddleware({\n        element: arrowRef,\n      }),\n    ];\n  }, [arrowRef]);\n\n  const {\n    x: floatingDataX,\n    y: floatingDataY,\n    placement: resolvedPlacement,\n    refs,\n    strategy: floatingPositionStrategy,\n    middlewareData: { arrow: arrowCoords },\n    update: updateTooltipPosition,\n  } = useFloating({\n    placement: 'top',\n    middleware: memoizedMiddlewares,\n  });\n\n  const {\n    value: isHovered,\n    setTrue: setHoveredTrue,\n    setFalse: setHoveredFalse,\n  } = useBooleanState(false);\n\n  const handleRootRef = useExternRef<HTMLSpanElement>(getRootRef, refs.setReference);\n\n  const shouldShowTooltip = withTooltip && (focusVisible || isHovered);\n\n  const inputValue = inputProps && inputProps.value;\n  React.useEffect(\n    function udpateTooltipPositionOnValueChange() {\n      if (shouldShowTooltip && inputValue !== 'undefined') {\n        updateTooltipPosition();\n      }\n    },\n    [inputValue, updateTooltipPosition, shouldShowTooltip],\n  );\n\n  return (\n    <React.Fragment>\n      <span\n        {...restProps}\n        ref={handleRootRef}\n        onMouseEnter={setHoveredTrue}\n        onMouseLeave={setHoveredFalse}\n        className={classNames(\n          styles['SliderThumb'],\n          focusVisible && styles['SliderThumb--focused'],\n          className,\n        )}\n      >\n        <input\n          {...inputProps}\n          type=\"range\"\n          className={styles['SliderThumb__nativeInput']}\n          aria-orientation=\"horizontal\"\n          onBlur={onBlur}\n          onFocus={onFocus}\n        />\n        <FocusVisible visible={focusVisible} mode=\"outside\" />\n      </span>\n      {shouldShowTooltip && (\n        <TooltipBase\n          appearance=\"neutral\"\n          getRootRef={refs.setFloating}\n          floatingStyle={convertFloatingDataToReactCSSProperties(\n            floatingPositionStrategy,\n            floatingDataX,\n            floatingDataY,\n          )}\n          arrowCoords={arrowCoords}\n          arrowPlacement={resolvedPlacement}\n          getArrowRef={setArrowRef}\n          text={inputValue}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}