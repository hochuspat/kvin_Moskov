{"ast":null,"code":"var MAX_FONT_SIZE = 30;\nvar MAX_IMAGE_BASE_SIZE = 96;\nvar RELATIVE_SIZE = MAX_FONT_SIZE / MAX_IMAGE_BASE_SIZE;\n/**\n * По возможности выставляем размеры по дизайн-системе. Иначе высчитываем.\n */\n\nexport function getInitialsFontSize(avatarSize) {\n  if (avatarSize <= 16) {\n    return 5;\n  } else if (avatarSize <= 24) {\n    return 8;\n  } else if (avatarSize <= 32) {\n    return 10;\n  } else if (avatarSize <= 36) {\n    return 13;\n  } else if (avatarSize <= 44) {\n    return 14;\n  } else if (avatarSize <= 48) {\n    return 17;\n  } else if (avatarSize < 56) {\n    return 18;\n  } else if (avatarSize <= 64) {\n    return 21;\n  } else if (avatarSize <= 88) {\n    return 26;\n  } else if (avatarSize <= MAX_IMAGE_BASE_SIZE) {\n    return MAX_FONT_SIZE;\n  }\n\n  var calculatedFontSize = Math.ceil(avatarSize * RELATIVE_SIZE);\n  var evenFix = calculatedFontSize % 2;\n  return calculatedFontSize + evenFix;\n}","map":{"version":3,"mappings":"AAEA,IAAMA,gBAAgB,EAAtB;AACA,IAAMC,sBAAqC,EAA3C;AACA,IAAMC,gBAAgBF,gBAAgBC,mBAAtC;AAEA;;;;AAGA,OAAO,SAASE,mBAAT,CAA6BC,UAA7B,EAA+C;EACpD,IAAIA,cAAc,EAAlB,EAAsB;IACpB,OAAO,CAAP;EACF,CAFA,MAEO,IAAIA,cAAc,EAAlB,EAAsB;IAC3B,OAAO,CAAP;EACF,CAFO,MAEA,IAAIA,cAAc,EAAlB,EAAsB;IAC3B,OAAO,EAAP;EACF,CAFO,MAEA,IAAIA,cAAc,EAAlB,EAAsB;IAC3B,OAAO,EAAP;EACF,CAFO,MAEA,IAAIA,cAAc,EAAlB,EAAsB;IAC3B,OAAO,EAAP;EACF,CAFO,MAEA,IAAIA,cAAc,EAAlB,EAAsB;IAC3B,OAAO,EAAP;EACF,CAFO,MAEA,IAAIA,aAAa,EAAjB,EAAqB;IAC1B,OAAO,EAAP;EACF,CAFO,MAEA,IAAIA,cAAc,EAAlB,EAAsB;IAC3B,OAAO,EAAP;EACF,CAFO,MAEA,IAAIA,cAAc,EAAlB,EAAsB;IAC3B,OAAO,EAAP;EACF,CAFO,MAEA,IAAIA,cAAcH,mBAAlB,EAAuC;IAC5C,OAAOD,aAAP;EACF;;EAEA,IAAMK,qBAAqBC,KAAKC,IAALD,CAAUF,aAAaF,aAAvBI,CAA3B;EACA,IAAME,UAAUH,qBAAqB,CAArC;EACA,OAAOA,qBAAqBG,OAA5B;AACF","names":["MAX_FONT_SIZE","MAX_IMAGE_BASE_SIZE","RELATIVE_SIZE","getInitialsFontSize","avatarSize","calculatedFontSize","Math","ceil","evenFix"],"sources":["C:\\Users\\kulag\\vk\\Ability\\node_modules\\@vkontakte\\vkui\\src\\components\\Avatar\\helpers.ts"],"sourcesContent":["import type { ImageBaseSize } from '../ImageBase/ImageBase';\n\nconst MAX_FONT_SIZE = 30;\nconst MAX_IMAGE_BASE_SIZE: ImageBaseSize = 96;\nconst RELATIVE_SIZE = MAX_FONT_SIZE / MAX_IMAGE_BASE_SIZE;\n\n/**\n * По возможности выставляем размеры по дизайн-системе. Иначе высчитываем.\n */\nexport function getInitialsFontSize(avatarSize: number): number {\n  if (avatarSize <= 16) {\n    return 5;\n  } else if (avatarSize <= 24) {\n    return 8;\n  } else if (avatarSize <= 32) {\n    return 10;\n  } else if (avatarSize <= 36) {\n    return 13;\n  } else if (avatarSize <= 44) {\n    return 14;\n  } else if (avatarSize <= 48) {\n    return 17;\n  } else if (avatarSize < 56) {\n    return 18;\n  } else if (avatarSize <= 64) {\n    return 21;\n  } else if (avatarSize <= 88) {\n    return 26;\n  } else if (avatarSize <= MAX_IMAGE_BASE_SIZE) {\n    return MAX_FONT_SIZE;\n  }\n\n  const calculatedFontSize = Math.ceil(avatarSize * RELATIVE_SIZE);\n  const evenFix = calculatedFontSize % 2;\n  return calculatedFontSize + evenFix;\n}\n"]},"metadata":{},"sourceType":"module"}