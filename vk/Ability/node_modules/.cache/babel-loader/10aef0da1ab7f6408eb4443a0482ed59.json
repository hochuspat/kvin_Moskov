{"ast":null,"code":"import * as React from \"react\";\nimport { createPortal } from \"react-dom\";\nimport { useAppearance } from \"../../hooks/useAppearance\";\nimport { useIsClient } from \"../../hooks/useIsClient\";\nimport { isRefObject } from \"../../lib/isRefObject\";\nimport { AppearanceProvider } from \"../AppearanceProvider/AppearanceProvider\";\nimport { AppRootContext } from \"./AppRootContext\";\nexport var AppRootPortal = function (param) {\n  var children = param.children,\n      className = param.className,\n      forcePortalProp = param.forcePortal,\n      tmp = param.portalRoot,\n      portalRootProp = tmp === void 0 ? null : tmp;\n\n  var _React_useContext = React.useContext(AppRootContext),\n      portalRoot = _React_useContext.portalRoot,\n      mode = _React_useContext.mode,\n      disablePortal = _React_useContext.disablePortal;\n\n  var appearance = useAppearance();\n  var isClient = useIsClient();\n\n  if (!isClient) {\n    return null;\n  }\n\n  var forcePortal = forcePortalProp !== null && forcePortalProp !== void 0 ? forcePortalProp : mode !== \"full\";\n  var portalContainer = getPortalContainer(portalRootProp, portalRoot);\n  var ignoreDisablePortalFlagFromContext = portalRootProp && forcePortal;\n  var shouldUsePortal = ignoreDisablePortalFlagFromContext ? true : !disablePortal && portalContainer && forcePortal;\n  return shouldUsePortal && portalContainer ? /*#__PURE__*/createPortal( /*#__PURE__*/React.createElement(AppearanceProvider, {\n    appearance: appearance\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: className\n  }, children)), portalContainer) : /*#__PURE__*/React.createElement(React.Fragment, null, children);\n};\n/**\n * Получает из кастомного пропа `partialRootProp` и `partialRoot` контекста\n * контейнер-элемент для портала.\n * `partialRootProp` может быть ref элементом.\n *\n */\n\nfunction getPortalContainer(portalRootProp, portalRoot) {\n  if (!portalRootProp) {\n    return portalRoot;\n  }\n\n  return isRefObject(portalRootProp) ? portalRootProp.current : portalRootProp;\n}","map":{"version":3,"mappings":"AAAA,YAAYA,KAAZ,MAAuB,OAAvB;AACA,SAASC,YAAT,QAA6B,WAA7B;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,WAAT,QAA4B,uBAA5B;AAEA,SAASC,kBAAT,QAAmC,0CAAnC;AACA,SAASC,cAAT,QAA+B,kBAA/B;AAaA,OAAO,IAAMC,gBAAgB;MAC3BC;MACAC;MACAC,eAAaC,SAAbD;MACYE,YAAZC;MAAYD,kCAAiB,IAAjBA;;EAEZ,IAA4CZ,0BAAMc,UAANd,CAAiBM,cAAjBN,CAA5C;EAAA,IAAQa,aAAoCb,kBAApCa,UAAR;EAAA,IAAoBE,OAAwBf,kBAAxBe,IAApB;EAAA,IAA0BC,gBAAkBhB,kBAAlBgB,aAA1B;;EACA,IAAMC,aAAaf,eAAnB;EAEA,IAAMgB,WAAWf,aAAjB;;EACA,IAAI,CAACe,QAAL,EAAe;IACb,OAAO,IAAP;EACF;;EAEA,IAAMR,cAAcC,2EAAmBI,SAAS,MAAhD;EAEA,IAAMI,kBAAkBC,mBAAmBR,cAAnBQ,EAAmCP,UAAnCO,CAAxB;EAEA,IAAMC,qCAAqCT,kBAAkBF,WAA7D;EACA,IAAMY,kBAAkBD,qCACpB,IADoBA,GAEpB,CAACL,aAAD,IAAkBG,eAAlB,IAAqCT,WAFzC;EAIA,OAAOY,mBAAmBH,eAAnBG,GAAmBH,aACxBlB,2BACED,oBAACK,kBAAD,EAACA;IAAmBY,YAAYA;EAA/BZ,CAAD,eACEL,oBAACuB,KAAD,EAACA;IAAId,WAAWA;EAAfc,CAAD,EAA4Bf,QAA5B,CADF,CADFP,EAIEkB,eAJFlB,CADKqB,GAKHH,aAGFnB,oBAACA,MAAMwB,QAAP,EAAe,IAAf,EAAiBhB,QAAjB,CARF;AAUF,CAjCO;AAmCP;;;;;;;AAMA,SAASY,kBAAT,CACER,cADF,EAEEC,UAFF,EAEiC;EAE/B,IAAI,CAACD,cAAL,EAAqB;IACnB,OAAOC,UAAP;EACF;;EAEA,OAAOT,YAAYQ,cAAZR,IAA8BQ,eAAea,OAA7CrB,GAAuDQ,cAA9D;AACF","names":["React","createPortal","useAppearance","useIsClient","isRefObject","AppearanceProvider","AppRootContext","AppRootPortal","children","className","forcePortal","forcePortalProp","portalRootProp","portalRoot","useContext","mode","disablePortal","appearance","isClient","portalContainer","getPortalContainer","ignoreDisablePortalFlagFromContext","shouldUsePortal","div","Fragment","current"],"sources":["C:\\Users\\kulag\\vk\\Ability\\node_modules\\@vkontakte\\vkui\\src\\components\\AppRoot\\AppRootPortal.tsx"],"sourcesContent":["import * as React from 'react';\nimport { createPortal } from 'react-dom';\nimport { useAppearance } from '../../hooks/useAppearance';\nimport { useIsClient } from '../../hooks/useIsClient';\nimport { isRefObject } from '../../lib/isRefObject';\nimport { HasChildren } from '../../types';\nimport { AppearanceProvider } from '../AppearanceProvider/AppearanceProvider';\nimport { AppRootContext } from './AppRootContext';\n\nexport interface AppRootPortalProps extends HasChildren {\n  className?: string;\n  forcePortal?: boolean;\n  /**\n   * Кастомный root-элемент портала.\n   * При передаче вместе с `forcePorta=true` игнорируется `portalRoot` и `disablePortal`\n   * из контекста `AppRoot`.\n   */\n  portalRoot?: HTMLElement | React.RefObject<HTMLElement> | null;\n}\n\nexport const AppRootPortal = ({\n  children,\n  className,\n  forcePortal: forcePortalProp,\n  portalRoot: portalRootProp = null,\n}: AppRootPortalProps) => {\n  const { portalRoot, mode, disablePortal } = React.useContext(AppRootContext);\n  const appearance = useAppearance();\n\n  const isClient = useIsClient();\n  if (!isClient) {\n    return null;\n  }\n\n  const forcePortal = forcePortalProp ?? mode !== 'full';\n\n  const portalContainer = getPortalContainer(portalRootProp, portalRoot);\n\n  const ignoreDisablePortalFlagFromContext = portalRootProp && forcePortal;\n  const shouldUsePortal = ignoreDisablePortalFlagFromContext\n    ? true\n    : !disablePortal && portalContainer && forcePortal;\n\n  return shouldUsePortal && portalContainer ? (\n    createPortal(\n      <AppearanceProvider appearance={appearance}>\n        <div className={className}>{children}</div>\n      </AppearanceProvider>,\n      portalContainer,\n    )\n  ) : (\n    <React.Fragment>{children}</React.Fragment>\n  );\n};\n\n/**\n * Получает из кастомного пропа `partialRootProp` и `partialRoot` контекста\n * контейнер-элемент для портала.\n * `partialRootProp` может быть ref элементом.\n *\n */\nfunction getPortalContainer(\n  portalRootProp?: HTMLElement | React.RefObject<HTMLElement> | null,\n  portalRoot?: HTMLElement | null,\n) {\n  if (!portalRootProp) {\n    return portalRoot;\n  }\n\n  return isRefObject(portalRootProp) ? portalRootProp.current : portalRootProp;\n}\n"]},"metadata":{},"sourceType":"module"}